{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"README.html","text":"Tutorial # We can illustrate how to use hourly by looking at the hourly repo itself. git clone https://github.com/asherp/hourly.git cd hourly from hourly import get_work_commits get_work_commits gathers all commits into a pandas array work , repo = get_work_commits ( '..' ) work . head () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } message hash name email time 2018-10-19 23:40:41-04:00 Initial commit ef5690543bfb354b9325d1fbd1f9abbaf... Asher Pembroke apembroke@gmail.com 2018-10-19 23:57:48-04:00 clock in 5c8f05b57b739ec525291c248ea920065... Asher Pembroke apembroke@gmail.com 2018-10-20 00:21:40-04:00 preparing setup.py 254ecdacb52fc70bc358f8d55be58df3b... Asher Pembroke apembroke@gmail.com 2018-10-20 00:39:11-04:00 clock out - work done for the day 0e33fa3d74f663f954b05dd9f30e0128c... Asher Pembroke apembroke@gmail.com 2018-10-20 01:06:08-04:00 clock in - start adding requireme... dc065b17337b14c2f8e0458de61e6880a... Asher Pembroke apembroke@gmail.com get_labor calculates hours worked by differencing commit timestamps and raises an error if clock in and clock out are of different lengths. Getting time card # First we filter by commit messages containing \"clock\" from hourly import get_clocks , get_labor work . head ( 8 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } message hash name email time 2018-10-19 23:40:41-04:00 Initial commit ef5690543bfb354b9325d1fbd1f9abbaf... Asher Pembroke apembroke@gmail.com 2018-10-19 23:57:48-04:00 clock in 5c8f05b57b739ec525291c248ea920065... Asher Pembroke apembroke@gmail.com 2018-10-20 00:21:40-04:00 preparing setup.py 254ecdacb52fc70bc358f8d55be58df3b... Asher Pembroke apembroke@gmail.com 2018-10-20 00:39:11-04:00 clock out - work done for the day 0e33fa3d74f663f954b05dd9f30e0128c... Asher Pembroke apembroke@gmail.com 2018-10-20 01:06:08-04:00 clock in - start adding requireme... dc065b17337b14c2f8e0458de61e6880a... Asher Pembroke apembroke@gmail.com 2018-10-20 01:47:01-04:00 clock out 644ad6ebf4c9015fd512ed47b858602d7... Asher Pembroke apembroke@gmail.com 2018-10-20 01:47:45-04:00 clock in - pro bono e6b5f78daa68e3731f82effccb66fd4bd... Asher Pembroke apembroke@gmail.com 2018-10-20 01:51:36-04:00 clock out - pro bono 1aff88af5e9688645966ccd15da8e1530... Asher Pembroke apembroke@gmail.com Choose start and end dates (timezones have to match) start_date , end_date = work . index [[ 0 , 25 ]] start_date , end_date (Timestamp('2018-10-19 23:40:41-0400', tz='US/Eastern'), Timestamp('2018-11-23 14:14:38-0500', tz='US/Eastern')) Filter by clocks statements clocks = get_clocks ( work , start_date = start_date , end_date = end_date ) clocks .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } message hash name email time 2018-10-19 23:57:48-04:00 clock in 5c8f05b57b739ec525291c248ea920065... Asher Pembroke apembroke@gmail.com 2018-10-20 00:39:11-04:00 clock out - work done for the day 0e33fa3d74f663f954b05dd9f30e0128c... Asher Pembroke apembroke@gmail.com 2018-10-20 01:06:08-04:00 clock in - start adding requireme... dc065b17337b14c2f8e0458de61e6880a... Asher Pembroke apembroke@gmail.com 2018-10-20 01:47:01-04:00 clock out 644ad6ebf4c9015fd512ed47b858602d7... Asher Pembroke apembroke@gmail.com 2018-10-20 01:47:45-04:00 clock in - pro bono e6b5f78daa68e3731f82effccb66fd4bd... Asher Pembroke apembroke@gmail.com 2018-10-20 01:51:36-04:00 clock out - pro bono 1aff88af5e9688645966ccd15da8e1530... Asher Pembroke apembroke@gmail.com 2018-10-20 02:03:56-04:00 clock in - finishing tutorial 53bd7316e579d8582c46af09277b40fbb... Asher Pembroke apembroke@gmail.com 2018-10-20 02:11:54-04:00 clock out - converted notebook fo... d55b5718a3178ab6161f7e3a148c6561a... Asher Pembroke apembroke@gmail.com 2018-10-20 02:14:21-04:00 had to clock out so notebook exam... d9ec537b36475b565df6b28d0cab6edc3... Asher Pembroke apembroke@gmail.com 2018-10-20 11:53:00-04:00 clock in - handling errant messages fa615994ba6b771594d711dea6087cc7b... Asher Pembroke apembroke@gmail.com 2018-10-20 13:16:13-04:00 clock out - converting to pd.Time... ed7aab29e43e7120428816481216198a2... Asher Pembroke apembroke@gmail.com 2018-10-20 13:47:56-04:00 clock in - adding work log 5b398037bf24cd503a7fc88c3b078913f... Asher Pembroke apembroke@gmail.com 2018-10-20 14:33:35-04:00 clock out - see WorkLog.md 93c2aa04aeba7cfe1573205abec053c7d... Asher Pembroke apembroke@gmail.com 2018-10-28 13:44:48-04:00 clock in c4e95f59dc0c8ce296a40300760ab6880... Asher Pembroke apembroke@gmail.com 2018-10-28 13:56:35-04:00 clock out f5200e718c062e828d436506286fd05e5... Asher Pembroke apembroke@gmail.com Handling errant clock in/out messages # If you mistakenly put \"clock out\" in a message, hourly will interpret the message as a legitimate end time. This will likely raise an error when computing the labor. For example, there is a problematic commit in the this repo's history: clocks [ clocks . hash == 'd9ec537b36475b565df6b28d0cab6edc3a89f2da' ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } message hash name email time 2018-10-20 02:14:21-04:00 had to clock out so notebook exam... d9ec537b36475b565df6b28d0cab6edc3... Asher Pembroke apembroke@gmail.com When we include this in our labor calculation, we get the following error: try : get_labor ( clocks ) except ValueError as e : print ( e ) pay period: 2018-10-19 23:57:48-04:00 -> 2018-10-28 13:56:35-04:00 In/Out logs do not match: clock ins:7, clock outs:8 We can skip this errant commit by setting errant_clocks clocks = get_clocks ( work , start_date = start_date , end_date = end_date , errant_clocks = [ 'd9ec537b36475b565df6b28d0cab6edc3a89f2da' ], ) Finally we can generate a timesheet: labor = get_labor ( clocks ) labor pay period: 2018-10-19 23:57:48-04:00 -> 2018-10-28 13:56:35-04:00 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } TimeIn LogIn ... TimeDelta Hours 0 2018-10-19 23:57:48-04:00 clock in ... 00:41:23 0.689722 1 2018-10-20 01:06:08-04:00 clock in - start adding requireme... ... 00:40:53 0.681389 2 2018-10-20 01:47:45-04:00 clock in - pro bono ... 00:03:51 0.064167 3 2018-10-20 02:03:56-04:00 clock in - finishing tutorial ... 00:07:58 0.132778 4 2018-10-20 11:53:00-04:00 clock in - handling errant messages ... 01:23:13 1.386944 5 2018-10-20 13:47:56-04:00 clock in - adding work log ... 00:45:39 0.760833 6 2018-10-28 13:44:48-04:00 clock in ... 00:11:47 0.196389 7 rows \u00d7 10 columns Filtering work session keywords # Use the \"ignore\" key word to skip any work you don't want to include in your invoices. labor = get_labor ( clocks , ignore = 'pro bono' ) labor pay period: 2018-10-19 23:57:48-04:00 -> 2018-10-28 13:56:35-04:00 ignoring pro bono .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } TimeIn LogIn ... TimeDelta Hours 0 2018-10-19 23:57:48-04:00 clock in ... 00:41:23 0.689722 1 2018-10-20 01:06:08-04:00 clock in - start adding requireme... ... 00:40:53 0.681389 3 2018-10-20 02:03:56-04:00 clock in - finishing tutorial ... 00:07:58 0.132778 4 2018-10-20 11:53:00-04:00 clock in - handling errant messages ... 01:23:13 1.386944 5 2018-10-20 13:47:56-04:00 clock in - adding work log ... 00:45:39 0.760833 6 2018-10-28 13:44:48-04:00 clock in ... 00:11:47 0.196389 6 rows \u00d7 10 columns Get total earnings # Total earnings can be found using this function. Currency is just a string for printing, but in the future we can add unit conversion. from hourly import get_hours_worked , get_earnings get_hours_worked ( labor ) 3.848055555555556 get_earnings ( get_hours_worked ( labor ), wage = 80 , currency = 'USD' ) 307 . 84 USD 307 . 84 Time adjustment # If you forget to clock in or clock out, you can correct your time sheet by adjusting your clock time. work , repo = get_work_commits ( '..' ) # reports actual work time, according to commit message work = work [ work . message . str . contains ( 'T-' )] . drop ([ 'name' , 'email' ], axis = 1 ) work .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } message hash time 2019-02-25 11:19:10-05:00 clock in T-1hr d7add63b4d2e3e1ca1423296aaed25d9c... 2019-02-25 12:54:51-05:00 clock out T-5m acfb8596317786e38177345aa25310980... 2019-03-16 19:12:25-04:00 clock in T-10m aa96bfaf35ab22c24c8ab8dfa3f2580ca... 2019-03-20 20:56:27-04:00 clock in T-10m 7484e4679022a65b4e24e54fb35f8904b... 2019-04-09 00:50:52-04:00 clock in T-5m 88b7abade22835c17c32c47959b5bb50f... 2019-04-11 03:12:13-04:00 clock-in: T-1h 12580fe0f7e96e24987b023dba3ee5556... 2019-04-13 03:24:44-04:00 clock-in: T-45m c6b53a3ecbf0f76f7e174088178511515... 2019-06-19 15:56:37-04:00 clock-out: T-5m 30de457a2dc24ca1cc922caaca1bbff6b... 2019-08-08 00:51:23-04:00 clock-out: T-15m 7f217173d54ac7074514b5d284aa4ed9a... 2019-08-14 01:03:57-04:00 clock-in: T-1h22m 11f6c9adeee806bbc65f4ea2c76ed49e1... 2019-08-14 01:12:41-04:00 clock-in: T-7m 07a334a28d89d108c1ffdd0ebf2f0bde8... 2019-12-23 13:06:57-05:00 clock-in: T-30m f4c47e6484a22fb2231da68a6addd4af0... The above work commits contain time adjustments. By default, get_clocks adjusts time stamps automatically when a commit message contains the keyword T- . clocks = get_clocks ( work ) clocks .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } message hash time 2019-02-25 10:19:10-05:00 clock in T-1hr d7add63b4d2e3e1ca1423296aaed25d9c... 2019-02-25 12:49:51-05:00 clock out T-5m acfb8596317786e38177345aa25310980... 2019-03-16 19:02:25-04:00 clock in T-10m aa96bfaf35ab22c24c8ab8dfa3f2580ca... 2019-03-20 20:46:27-04:00 clock in T-10m 7484e4679022a65b4e24e54fb35f8904b... 2019-04-09 00:45:52-04:00 clock in T-5m 88b7abade22835c17c32c47959b5bb50f... 2019-04-11 02:12:13-04:00 clock-in: T-1h 12580fe0f7e96e24987b023dba3ee5556... 2019-04-13 02:39:44-04:00 clock-in: T-45m c6b53a3ecbf0f76f7e174088178511515... 2019-06-19 15:51:37-04:00 clock-out: T-5m 30de457a2dc24ca1cc922caaca1bbff6b... 2019-08-08 00:36:23-04:00 clock-out: T-15m 7f217173d54ac7074514b5d284aa4ed9a... 2019-08-13 23:41:57-04:00 clock-in: T-1h22m 11f6c9adeee806bbc65f4ea2c76ed49e1... 2019-08-14 01:05:41-04:00 clock-in: T-7m 07a334a28d89d108c1ffdd0ebf2f0bde8... 2019-12-23 12:36:57-05:00 clock-in: T-30m f4c47e6484a22fb2231da68a6addd4af0... We can verify that the time adjustment works: clocks [ 'adjustment' ] = ( work . index - clocks . index ) clocks .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } message hash adjustment time 2019-02-25 10:19:10-05:00 clock in T-1hr d7add63b4d2e3e1ca1423296aaed25d9c... 01:00:00 2019-02-25 12:49:51-05:00 clock out T-5m acfb8596317786e38177345aa25310980... 00:05:00 2019-03-16 19:02:25-04:00 clock in T-10m aa96bfaf35ab22c24c8ab8dfa3f2580ca... 00:10:00 2019-03-20 20:46:27-04:00 clock in T-10m 7484e4679022a65b4e24e54fb35f8904b... 00:10:00 2019-04-09 00:45:52-04:00 clock in T-5m 88b7abade22835c17c32c47959b5bb50f... 00:05:00 2019-04-11 02:12:13-04:00 clock-in: T-1h 12580fe0f7e96e24987b023dba3ee5556... 01:00:00 2019-04-13 02:39:44-04:00 clock-in: T-45m c6b53a3ecbf0f76f7e174088178511515... 00:45:00 2019-06-19 15:51:37-04:00 clock-out: T-5m 30de457a2dc24ca1cc922caaca1bbff6b... 00:05:00 2019-08-08 00:36:23-04:00 clock-out: T-15m 7f217173d54ac7074514b5d284aa4ed9a... 00:15:00 2019-08-13 23:41:57-04:00 clock-in: T-1h22m 11f6c9adeee806bbc65f4ea2c76ed49e1... 01:22:00 2019-08-14 01:05:41-04:00 clock-in: T-7m 07a334a28d89d108c1ffdd0ebf2f0bde8... 00:07:00 2019-12-23 12:36:57-05:00 clock-in: T-30m f4c47e6484a22fb2231da68a6addd4af0... 00:30:00 get_labor ( clocks , match_logs = False ) pay period: 2019-02-25 10:19:10-05:00 -> 2019-12-23 12:36:57-05:00 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } TimeIn LogIn ... TimeDelta Hours 0 2019-02-25 10:19:10-05:00 clock in T-1hr ... 0 days 02:30:41 2.511389 1 2019-03-16 19:02:25-04:00 clock in T-10m ... 94 days 20:49:12 2276.820000 2 2019-03-20 20:46:27-04:00 clock in T-10m ... 140 days 03:49:56 3363.832222 3 rows \u00d7 8 columns The default behavior can be changed by setting adjust_clocks to False . clocks_raw = get_clocks ( work , adjust_clocks = False ) clocks_raw [ 'adjustment' ] = ( work . index - clocks_raw . index ) clocks_raw .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } message hash adjustment time 2019-02-25 11:19:10-05:00 clock in T-1hr d7add63b4d2e3e1ca1423296aaed25d9c... 0 days 2019-02-25 12:54:51-05:00 clock out T-5m acfb8596317786e38177345aa25310980... 0 days 2019-03-16 19:12:25-04:00 clock in T-10m aa96bfaf35ab22c24c8ab8dfa3f2580ca... 0 days 2019-03-20 20:56:27-04:00 clock in T-10m 7484e4679022a65b4e24e54fb35f8904b... 0 days 2019-04-09 00:50:52-04:00 clock in T-5m 88b7abade22835c17c32c47959b5bb50f... 0 days 2019-04-11 03:12:13-04:00 clock-in: T-1h 12580fe0f7e96e24987b023dba3ee5556... 0 days 2019-04-13 03:24:44-04:00 clock-in: T-45m c6b53a3ecbf0f76f7e174088178511515... 0 days 2019-06-19 15:56:37-04:00 clock-out: T-5m 30de457a2dc24ca1cc922caaca1bbff6b... 0 days 2019-08-08 00:51:23-04:00 clock-out: T-15m 7f217173d54ac7074514b5d284aa4ed9a... 0 days 2019-08-14 01:03:57-04:00 clock-in: T-1h22m 11f6c9adeee806bbc65f4ea2c76ed49e1... 0 days 2019-08-14 01:12:41-04:00 clock-in: T-7m 07a334a28d89d108c1ffdd0ebf2f0bde8... 0 days 2019-12-23 13:06:57-05:00 clock-in: T-30m f4c47e6484a22fb2231da68a6addd4af0... 0 days Note Only time subtractions are supported for now: it's easy to forget to clock in/out, but I can't think of a reason to clock-in sometime in the future. Tip Hourly uses pandas' Timedelta format to modify times. This allows for syntax like clock in T-1hr45","title":"Time Estimation"},{"location":"README.html#tutorial","text":"We can illustrate how to use hourly by looking at the hourly repo itself. git clone https://github.com/asherp/hourly.git cd hourly from hourly import get_work_commits get_work_commits gathers all commits into a pandas array work , repo = get_work_commits ( '..' ) work . head () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } message hash name email time 2018-10-19 23:40:41-04:00 Initial commit ef5690543bfb354b9325d1fbd1f9abbaf... Asher Pembroke apembroke@gmail.com 2018-10-19 23:57:48-04:00 clock in 5c8f05b57b739ec525291c248ea920065... Asher Pembroke apembroke@gmail.com 2018-10-20 00:21:40-04:00 preparing setup.py 254ecdacb52fc70bc358f8d55be58df3b... Asher Pembroke apembroke@gmail.com 2018-10-20 00:39:11-04:00 clock out - work done for the day 0e33fa3d74f663f954b05dd9f30e0128c... Asher Pembroke apembroke@gmail.com 2018-10-20 01:06:08-04:00 clock in - start adding requireme... dc065b17337b14c2f8e0458de61e6880a... Asher Pembroke apembroke@gmail.com get_labor calculates hours worked by differencing commit timestamps and raises an error if clock in and clock out are of different lengths.","title":"Tutorial"},{"location":"README.html#getting-time-card","text":"First we filter by commit messages containing \"clock\" from hourly import get_clocks , get_labor work . head ( 8 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } message hash name email time 2018-10-19 23:40:41-04:00 Initial commit ef5690543bfb354b9325d1fbd1f9abbaf... Asher Pembroke apembroke@gmail.com 2018-10-19 23:57:48-04:00 clock in 5c8f05b57b739ec525291c248ea920065... Asher Pembroke apembroke@gmail.com 2018-10-20 00:21:40-04:00 preparing setup.py 254ecdacb52fc70bc358f8d55be58df3b... Asher Pembroke apembroke@gmail.com 2018-10-20 00:39:11-04:00 clock out - work done for the day 0e33fa3d74f663f954b05dd9f30e0128c... Asher Pembroke apembroke@gmail.com 2018-10-20 01:06:08-04:00 clock in - start adding requireme... dc065b17337b14c2f8e0458de61e6880a... Asher Pembroke apembroke@gmail.com 2018-10-20 01:47:01-04:00 clock out 644ad6ebf4c9015fd512ed47b858602d7... Asher Pembroke apembroke@gmail.com 2018-10-20 01:47:45-04:00 clock in - pro bono e6b5f78daa68e3731f82effccb66fd4bd... Asher Pembroke apembroke@gmail.com 2018-10-20 01:51:36-04:00 clock out - pro bono 1aff88af5e9688645966ccd15da8e1530... Asher Pembroke apembroke@gmail.com Choose start and end dates (timezones have to match) start_date , end_date = work . index [[ 0 , 25 ]] start_date , end_date (Timestamp('2018-10-19 23:40:41-0400', tz='US/Eastern'), Timestamp('2018-11-23 14:14:38-0500', tz='US/Eastern')) Filter by clocks statements clocks = get_clocks ( work , start_date = start_date , end_date = end_date ) clocks .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } message hash name email time 2018-10-19 23:57:48-04:00 clock in 5c8f05b57b739ec525291c248ea920065... Asher Pembroke apembroke@gmail.com 2018-10-20 00:39:11-04:00 clock out - work done for the day 0e33fa3d74f663f954b05dd9f30e0128c... Asher Pembroke apembroke@gmail.com 2018-10-20 01:06:08-04:00 clock in - start adding requireme... dc065b17337b14c2f8e0458de61e6880a... Asher Pembroke apembroke@gmail.com 2018-10-20 01:47:01-04:00 clock out 644ad6ebf4c9015fd512ed47b858602d7... Asher Pembroke apembroke@gmail.com 2018-10-20 01:47:45-04:00 clock in - pro bono e6b5f78daa68e3731f82effccb66fd4bd... Asher Pembroke apembroke@gmail.com 2018-10-20 01:51:36-04:00 clock out - pro bono 1aff88af5e9688645966ccd15da8e1530... Asher Pembroke apembroke@gmail.com 2018-10-20 02:03:56-04:00 clock in - finishing tutorial 53bd7316e579d8582c46af09277b40fbb... Asher Pembroke apembroke@gmail.com 2018-10-20 02:11:54-04:00 clock out - converted notebook fo... d55b5718a3178ab6161f7e3a148c6561a... Asher Pembroke apembroke@gmail.com 2018-10-20 02:14:21-04:00 had to clock out so notebook exam... d9ec537b36475b565df6b28d0cab6edc3... Asher Pembroke apembroke@gmail.com 2018-10-20 11:53:00-04:00 clock in - handling errant messages fa615994ba6b771594d711dea6087cc7b... Asher Pembroke apembroke@gmail.com 2018-10-20 13:16:13-04:00 clock out - converting to pd.Time... ed7aab29e43e7120428816481216198a2... Asher Pembroke apembroke@gmail.com 2018-10-20 13:47:56-04:00 clock in - adding work log 5b398037bf24cd503a7fc88c3b078913f... Asher Pembroke apembroke@gmail.com 2018-10-20 14:33:35-04:00 clock out - see WorkLog.md 93c2aa04aeba7cfe1573205abec053c7d... Asher Pembroke apembroke@gmail.com 2018-10-28 13:44:48-04:00 clock in c4e95f59dc0c8ce296a40300760ab6880... Asher Pembroke apembroke@gmail.com 2018-10-28 13:56:35-04:00 clock out f5200e718c062e828d436506286fd05e5... Asher Pembroke apembroke@gmail.com","title":"Getting time card"},{"location":"README.html#handling-errant-clock-inout-messages","text":"If you mistakenly put \"clock out\" in a message, hourly will interpret the message as a legitimate end time. This will likely raise an error when computing the labor. For example, there is a problematic commit in the this repo's history: clocks [ clocks . hash == 'd9ec537b36475b565df6b28d0cab6edc3a89f2da' ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } message hash name email time 2018-10-20 02:14:21-04:00 had to clock out so notebook exam... d9ec537b36475b565df6b28d0cab6edc3... Asher Pembroke apembroke@gmail.com When we include this in our labor calculation, we get the following error: try : get_labor ( clocks ) except ValueError as e : print ( e ) pay period: 2018-10-19 23:57:48-04:00 -> 2018-10-28 13:56:35-04:00 In/Out logs do not match: clock ins:7, clock outs:8 We can skip this errant commit by setting errant_clocks clocks = get_clocks ( work , start_date = start_date , end_date = end_date , errant_clocks = [ 'd9ec537b36475b565df6b28d0cab6edc3a89f2da' ], ) Finally we can generate a timesheet: labor = get_labor ( clocks ) labor pay period: 2018-10-19 23:57:48-04:00 -> 2018-10-28 13:56:35-04:00 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } TimeIn LogIn ... TimeDelta Hours 0 2018-10-19 23:57:48-04:00 clock in ... 00:41:23 0.689722 1 2018-10-20 01:06:08-04:00 clock in - start adding requireme... ... 00:40:53 0.681389 2 2018-10-20 01:47:45-04:00 clock in - pro bono ... 00:03:51 0.064167 3 2018-10-20 02:03:56-04:00 clock in - finishing tutorial ... 00:07:58 0.132778 4 2018-10-20 11:53:00-04:00 clock in - handling errant messages ... 01:23:13 1.386944 5 2018-10-20 13:47:56-04:00 clock in - adding work log ... 00:45:39 0.760833 6 2018-10-28 13:44:48-04:00 clock in ... 00:11:47 0.196389 7 rows \u00d7 10 columns","title":"Handling errant clock in/out messages"},{"location":"README.html#filtering-work-session-keywords","text":"Use the \"ignore\" key word to skip any work you don't want to include in your invoices. labor = get_labor ( clocks , ignore = 'pro bono' ) labor pay period: 2018-10-19 23:57:48-04:00 -> 2018-10-28 13:56:35-04:00 ignoring pro bono .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } TimeIn LogIn ... TimeDelta Hours 0 2018-10-19 23:57:48-04:00 clock in ... 00:41:23 0.689722 1 2018-10-20 01:06:08-04:00 clock in - start adding requireme... ... 00:40:53 0.681389 3 2018-10-20 02:03:56-04:00 clock in - finishing tutorial ... 00:07:58 0.132778 4 2018-10-20 11:53:00-04:00 clock in - handling errant messages ... 01:23:13 1.386944 5 2018-10-20 13:47:56-04:00 clock in - adding work log ... 00:45:39 0.760833 6 2018-10-28 13:44:48-04:00 clock in ... 00:11:47 0.196389 6 rows \u00d7 10 columns","title":"Filtering work session keywords"},{"location":"README.html#get-total-earnings","text":"Total earnings can be found using this function. Currency is just a string for printing, but in the future we can add unit conversion. from hourly import get_hours_worked , get_earnings get_hours_worked ( labor ) 3.848055555555556 get_earnings ( get_hours_worked ( labor ), wage = 80 , currency = 'USD' ) 307 . 84 USD 307 . 84","title":"Get total earnings"},{"location":"README.html#time-adjustment","text":"If you forget to clock in or clock out, you can correct your time sheet by adjusting your clock time. work , repo = get_work_commits ( '..' ) # reports actual work time, according to commit message work = work [ work . message . str . contains ( 'T-' )] . drop ([ 'name' , 'email' ], axis = 1 ) work .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } message hash time 2019-02-25 11:19:10-05:00 clock in T-1hr d7add63b4d2e3e1ca1423296aaed25d9c... 2019-02-25 12:54:51-05:00 clock out T-5m acfb8596317786e38177345aa25310980... 2019-03-16 19:12:25-04:00 clock in T-10m aa96bfaf35ab22c24c8ab8dfa3f2580ca... 2019-03-20 20:56:27-04:00 clock in T-10m 7484e4679022a65b4e24e54fb35f8904b... 2019-04-09 00:50:52-04:00 clock in T-5m 88b7abade22835c17c32c47959b5bb50f... 2019-04-11 03:12:13-04:00 clock-in: T-1h 12580fe0f7e96e24987b023dba3ee5556... 2019-04-13 03:24:44-04:00 clock-in: T-45m c6b53a3ecbf0f76f7e174088178511515... 2019-06-19 15:56:37-04:00 clock-out: T-5m 30de457a2dc24ca1cc922caaca1bbff6b... 2019-08-08 00:51:23-04:00 clock-out: T-15m 7f217173d54ac7074514b5d284aa4ed9a... 2019-08-14 01:03:57-04:00 clock-in: T-1h22m 11f6c9adeee806bbc65f4ea2c76ed49e1... 2019-08-14 01:12:41-04:00 clock-in: T-7m 07a334a28d89d108c1ffdd0ebf2f0bde8... 2019-12-23 13:06:57-05:00 clock-in: T-30m f4c47e6484a22fb2231da68a6addd4af0... The above work commits contain time adjustments. By default, get_clocks adjusts time stamps automatically when a commit message contains the keyword T- . clocks = get_clocks ( work ) clocks .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } message hash time 2019-02-25 10:19:10-05:00 clock in T-1hr d7add63b4d2e3e1ca1423296aaed25d9c... 2019-02-25 12:49:51-05:00 clock out T-5m acfb8596317786e38177345aa25310980... 2019-03-16 19:02:25-04:00 clock in T-10m aa96bfaf35ab22c24c8ab8dfa3f2580ca... 2019-03-20 20:46:27-04:00 clock in T-10m 7484e4679022a65b4e24e54fb35f8904b... 2019-04-09 00:45:52-04:00 clock in T-5m 88b7abade22835c17c32c47959b5bb50f... 2019-04-11 02:12:13-04:00 clock-in: T-1h 12580fe0f7e96e24987b023dba3ee5556... 2019-04-13 02:39:44-04:00 clock-in: T-45m c6b53a3ecbf0f76f7e174088178511515... 2019-06-19 15:51:37-04:00 clock-out: T-5m 30de457a2dc24ca1cc922caaca1bbff6b... 2019-08-08 00:36:23-04:00 clock-out: T-15m 7f217173d54ac7074514b5d284aa4ed9a... 2019-08-13 23:41:57-04:00 clock-in: T-1h22m 11f6c9adeee806bbc65f4ea2c76ed49e1... 2019-08-14 01:05:41-04:00 clock-in: T-7m 07a334a28d89d108c1ffdd0ebf2f0bde8... 2019-12-23 12:36:57-05:00 clock-in: T-30m f4c47e6484a22fb2231da68a6addd4af0... We can verify that the time adjustment works: clocks [ 'adjustment' ] = ( work . index - clocks . index ) clocks .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } message hash adjustment time 2019-02-25 10:19:10-05:00 clock in T-1hr d7add63b4d2e3e1ca1423296aaed25d9c... 01:00:00 2019-02-25 12:49:51-05:00 clock out T-5m acfb8596317786e38177345aa25310980... 00:05:00 2019-03-16 19:02:25-04:00 clock in T-10m aa96bfaf35ab22c24c8ab8dfa3f2580ca... 00:10:00 2019-03-20 20:46:27-04:00 clock in T-10m 7484e4679022a65b4e24e54fb35f8904b... 00:10:00 2019-04-09 00:45:52-04:00 clock in T-5m 88b7abade22835c17c32c47959b5bb50f... 00:05:00 2019-04-11 02:12:13-04:00 clock-in: T-1h 12580fe0f7e96e24987b023dba3ee5556... 01:00:00 2019-04-13 02:39:44-04:00 clock-in: T-45m c6b53a3ecbf0f76f7e174088178511515... 00:45:00 2019-06-19 15:51:37-04:00 clock-out: T-5m 30de457a2dc24ca1cc922caaca1bbff6b... 00:05:00 2019-08-08 00:36:23-04:00 clock-out: T-15m 7f217173d54ac7074514b5d284aa4ed9a... 00:15:00 2019-08-13 23:41:57-04:00 clock-in: T-1h22m 11f6c9adeee806bbc65f4ea2c76ed49e1... 01:22:00 2019-08-14 01:05:41-04:00 clock-in: T-7m 07a334a28d89d108c1ffdd0ebf2f0bde8... 00:07:00 2019-12-23 12:36:57-05:00 clock-in: T-30m f4c47e6484a22fb2231da68a6addd4af0... 00:30:00 get_labor ( clocks , match_logs = False ) pay period: 2019-02-25 10:19:10-05:00 -> 2019-12-23 12:36:57-05:00 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } TimeIn LogIn ... TimeDelta Hours 0 2019-02-25 10:19:10-05:00 clock in T-1hr ... 0 days 02:30:41 2.511389 1 2019-03-16 19:02:25-04:00 clock in T-10m ... 94 days 20:49:12 2276.820000 2 2019-03-20 20:46:27-04:00 clock in T-10m ... 140 days 03:49:56 3363.832222 3 rows \u00d7 8 columns The default behavior can be changed by setting adjust_clocks to False . clocks_raw = get_clocks ( work , adjust_clocks = False ) clocks_raw [ 'adjustment' ] = ( work . index - clocks_raw . index ) clocks_raw .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } message hash adjustment time 2019-02-25 11:19:10-05:00 clock in T-1hr d7add63b4d2e3e1ca1423296aaed25d9c... 0 days 2019-02-25 12:54:51-05:00 clock out T-5m acfb8596317786e38177345aa25310980... 0 days 2019-03-16 19:12:25-04:00 clock in T-10m aa96bfaf35ab22c24c8ab8dfa3f2580ca... 0 days 2019-03-20 20:56:27-04:00 clock in T-10m 7484e4679022a65b4e24e54fb35f8904b... 0 days 2019-04-09 00:50:52-04:00 clock in T-5m 88b7abade22835c17c32c47959b5bb50f... 0 days 2019-04-11 03:12:13-04:00 clock-in: T-1h 12580fe0f7e96e24987b023dba3ee5556... 0 days 2019-04-13 03:24:44-04:00 clock-in: T-45m c6b53a3ecbf0f76f7e174088178511515... 0 days 2019-06-19 15:56:37-04:00 clock-out: T-5m 30de457a2dc24ca1cc922caaca1bbff6b... 0 days 2019-08-08 00:51:23-04:00 clock-out: T-15m 7f217173d54ac7074514b5d284aa4ed9a... 0 days 2019-08-14 01:03:57-04:00 clock-in: T-1h22m 11f6c9adeee806bbc65f4ea2c76ed49e1... 0 days 2019-08-14 01:12:41-04:00 clock-in: T-7m 07a334a28d89d108c1ffdd0ebf2f0bde8... 0 days 2019-12-23 13:06:57-05:00 clock-in: T-30m f4c47e6484a22fb2231da68a6addd4af0... 0 days Note Only time subtractions are supported for now: it's easy to forget to clock in/out, but I can't think of a reason to clock-in sometime in the future. Tip Hourly uses pandas' Timedelta format to modify times. This allows for syntax like clock in T-1hr45","title":"Time adjustment"},{"location":"index.html","text":"Hourly # Hourly is a command-line time tracking tool for git projects. Hourly parses your commit messages for clock-in and clock-out keywords to precisely estimate work hours. Designed for developers and project managers, hourly makes it easy to see how and where you spend your time. When configured with Stripe or BTCPay, hourly can generate invoices for your specified wage. Usage # Work sessions # To clock in: hourly-in The above command updates the header of your work log ( WorkLog.md by default) and commits it with the message \"clock-in\". Stage any changes to your code base. When you are ready to commit: hourly commit.message=\"my commit message\" Hourly updates the work log with your commit message. Feel free to use the work log to provide additional context. When you are finished committing other work for this session, you may clock out: hourly-out Again, hourly updates the work log and commits it with the message \"clock-out\" along with any other staged files. Read more about configuring your work log . Timesheets # When you are ready to generate a timesheet for your repo, run hourly from your git directory: hourly-report Hourly parses all the commit messages for clock in/out keywords and uses git's timestamps to determine how long each session lasted. For example, here's what happens when you run hourly on the hourly repo itself : hourly-report repo.start_date=\"2018-10-21\" repo.end_date=\"2019-3-10\" repo.ignore=\"pro bono\" pay period: 2018-10-28 13:44:48-04:00 -> 2019-02-25 12:49:51-05:00 ignoring pro bono TimeIn LogIn TimeOut LogOut TimeDelta Hours 0 2018-10-28 13:44:48-04:00 clock in 2018-10-28 13:56:35-04:00 clock out 00:11:47 0.196389 1 2019-02-25 10:19:10-05:00 clock in T-1hr 2019-02-25 12:49:51-05:00 clock out T-5m 02:30:41 2.511389 0 days 02:42:28, 2.71 hours worked To save the timesheet as a csv file, include an ouput prefix: hourly-report repo.start_date=\"2018-10-21\" repo.end_date=\"2019-3-10\" repo.ignore=\"pro bono\" report.filename=Pembroke pay period: 2018-10-28 13:44:48-04:00 -> 2019-02-25 12:49:51-05:00 ignoring pro bono TimeIn LogIn TimeOut LogOut TimeDelta Hours 0 2018-10-28 13:44:48-04:00 clock in 2018-10-28 13:56:35-04:00 clock out 00:11:47 0.196389 1 2019-02-25 10:19:10-05:00 clock in T-1hr 2019-02-25 12:49:51-05:00 clock out T-5m 02:30:41 2.511389 0 days 02:42:28, 2.71 hours worked writing to file Pembroke-20181028-134448_to_20190225-124951.csv Visit the Tutorial for a detailed walk-through of how hourly generates timesheets. Invoicing # To generate an invoice using stripe: hourly-report invoice=stripe repo.start_date=\"Jan 1, 2020\" stripe.customer.email=myclient@momandpop.com The above command generates a time sheet for this repo, calculates earnings, prepares a stripe invoice, and asks you to confirm details. After confirmation, an email will be sent from your Stripe account to myclient@momandpop.com. The btcpay invoicing is similar: hourly-report invoice=btcpay repo.start_date=\"Jan 1, 2020\" After confirmation, hourly tells your btcpay server to generate an invoice and displays the corresponding payment url. Note that BTCPay can be configured for lightning, so streaming payments are possible! Visit the Payments section for more info. Getting Started # Hourly is hosted on github under the Apache 2.0 license https://github.com/asherp/hourly Install # pip install hourly --upgrade Requirements # pandas gitpython plotly hydra stripe (optional) btcpay-python (optional) You can get these dependencies like this: pip install pandas gitpython plotly pip install hydra-core --upgrade For invoicing: pip install btcpay-python pip install stripe For hourly's docs: pip install mkdocs mkdocs-material markdown-include mknotebooks Tests # For integration tests, hourly may be tested against the hourly repo. Unit tests are based on pytest suite with pytest-cov pip install pytest pytest-cov To run the tests, navigate to the base of this repo, then py.test tests.py --cov=hourly Configuration # Hourly uses Hydra for customized configuration. The full options are given by hourly's help command: hourly --help A simple hour tracker for git projects This application helps users clock in and out of git repos, as well as generate timesheets for invoicing. Configure hourly to ignore commits by keyword or hashes == Configuration groups == Compose your configuration from those groups (group=option) == Config == Override anything in the config (foo.bar=value) commit: clock: null identity: - name - email message: '' tminus: null compensation: [] config_override: hourly.yaml invoice: null payment: null repo: case_sensitive: false end_date: null errant_clocks: [] gitdir: . ignore: null match_logs: false start_date: null report: currency: '' filename: null pandas: display: max_columns: 10 max_colwidth: 45 max_rows: null width: 600 timesheet: true wage: null work: false vis: frequency: 1 d plotly: figure: margin: pad: 0 plot: animation_opts: null auto_open: true auto_play: true config: null filename: hourly-work.html image: null image_filename: plot_image include_mathjax: cdn include_plotlyjs: cdn link_text: Export to plot.ly output_type: file show_link: false validate: true work_log: bullet: '*' filename: WorkLog.md header_depth: 1 Powered by Hydra (https://hydra.cc) Use --hydra-help to view Hydra specific help Hourly's default configuration including comments can be seen here. config_override : hourly.yaml init : false repo : gitdir : . start_date : null end_date : null errant_clocks : [] # list of commit hashes to skip case_sensitive : False # should commit message filters be case-sensitive ignore : null # ignore work containing string, ie 'pro bono' match_logs : False # should all clock-ins be paired with clock-outs report : timesheet : false # print timesheet work : false # print work log filename : '???' # csv file to save report to pandas : display : max_rows : null max_columns : 10 max_colwidth : 45 width : 600 commit : clock : '???' # 'in' will update WorkLog.md and commit with message \"clock-in\" tminus : null # '15m' will prepend 'T-15m' to commit message (ignored if clock is null) message : '' # 'my message' will append 'my message' to commit message identity : # how to identify contributors - name - email compensation : [] # sets wages and currency per developer work_log : filename : WorkLog.md header_depth : 1 # determines markdown header size bullet : '*' vis : # set to null to prevent plotting frequency : '1 d' # start small - experienced users can override plotly : # plotly keywords figure : hovermode : 'x' margin : pad : 0 plot : show_link : False link_text : 'Export to plot.ly' validate : True output_type : file include_plotlyjs : 'cdn' filename : hourly-work.html auto_open : True image : Null image_filename : plot_image # image_width: 800 # image_height: 600 config : Null include_mathjax : 'cdn' auto_play : True animation_opts : Null handle_errors : exit # or raise verbosity : Each of these can be overridden at runtime. For example, hourly commit.clock=in vis=null report.timesheet=False This will update the WorkLog.md file and commit a clock-in message without visualizing or printing the timesheet. Note hourly-in is just syntactic sugar for hourly commit.clock=in vis=null report.timesheet=False . But if we want to override hourly's defaults without typing them in each time, we can specify an hourly.yaml file in our git repo. Hourly will look for this file (via the config_override option) and override its default configuration. Bug Your project's config_override will even override command line arguments! An example of a custom override file is found in the top-level of the hourly repo: repo : errant_clocks : - d9ec537b36475b565df6b28d0cab6edc3a89f2da ignore : 'pro bono' work_log : header_depth : 3 commit : identity : - email vis : frequency : '1 d' plotly : # plotly keywords plot : output_type : div auto_open : false filename : docs/hourly-work.html compensation : - name : Asher Pembroke email : apembroke@gmail.com wage : pi : 1.0 A common use case would be permanently overriding the filename of the work_log you are committing against, to avoid merge conflicts if multiple developers are working on the same project. Visualization # The git repo for hourly has a custom configuration that allows us to embed the work hours as a graph in the mkdocs site. If we run hourly-report from its own git repo, the graph div gets stored in docs/hourly-work.html . The graph is embedded using the markdown-include extension in mkdocs.yml . Then we add the following in our site page: {! docs/hourly-work.html !} Which embeds the graph below: if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});} window.PlotlyConfig = {MathJaxConfig: 'local'}; window.PLOTLYENV=window.PLOTLYENV || {}; if (document.getElementById(\"c2bd69b2-a42c-4ec6-82cf-b89c12ab1817\")) { Plotly.newPlot( 'c2bd69b2-a42c-4ec6-82cf-b89c12ab1817', [{\"mode\": \"lines\", \"name\": \"apembroke@gmail.com\", \"stackgroup\": \"one\", \"text\": [\"0 days 00:41:23\", \"0 days 03:01:34\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:11:47\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 02:30:41\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 01:07:44\", \"0 days 00:38:32\", \"0 days 03:14:29\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:37:48\", \"0 days 00:11:02\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:43:36\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 01:31:59\", \"0 days 01:29:44\", \"0 days 00:00:00\", \"0 days 02:08:37\", \"0 days 00:15:11\", \"0 days 01:03:35\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 01:20:41\", \"0 days 01:15:31\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:17:04\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 01:10:39\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 01:35:20\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 01:23:10\", \"0 days 00:26:04\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 01:55:34\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:51:40\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 01:45:23\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 02:00:20\", \"0 days 00:30:49\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 02:05:35\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 01:23:50\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 04:15:13\", \"0 days 03:05:52\", \"0 days 00:40:01\", \"0 days 01:26:30\", \"0 days 04:11:44\", \"0 days 04:19:05\", \"0 days 07:35:23\", \"0 days 03:56:11\", \"0 days 01:48:07\", \"0 days 05:06:37\", \"0 days 06:06:55\", \"0 days 03:18:40\", \"0 days 01:35:44\", \"0 days 00:00:00\", \"0 days 02:34:10\", \"0 days 02:07:15\", \"0 days 01:51:19\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:02:36\", \"0 days 00:00:00\", \"0 days 00:14:07\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:23\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 01:35:57\"], \"type\": \"scatter\", \"x\": [\"2018-10-19T00:00:00-04:00\", \"2018-10-20T00:00:00-04:00\", \"2018-10-21T00:00:00-04:00\", \"2018-10-22T00:00:00-04:00\", \"2018-10-23T00:00:00-04:00\", \"2018-10-24T00:00:00-04:00\", \"2018-10-25T00:00:00-04:00\", \"2018-10-26T00:00:00-04:00\", \"2018-10-27T00:00:00-04:00\", \"2018-10-28T00:00:00-04:00\", \"2018-10-29T00:00:00-04:00\", \"2018-10-30T00:00:00-04:00\", \"2018-10-31T00:00:00-04:00\", \"2018-11-01T00:00:00-04:00\", \"2018-11-02T00:00:00-04:00\", \"2018-11-03T00:00:00-04:00\", \"2018-11-04T00:00:00-04:00\", \"2018-11-05T00:00:00-05:00\", \"2018-11-06T00:00:00-05:00\", \"2018-11-07T00:00:00-05:00\", \"2018-11-08T00:00:00-05:00\", \"2018-11-09T00:00:00-05:00\", \"2018-11-10T00:00:00-05:00\", \"2018-11-11T00:00:00-05:00\", \"2018-11-12T00:00:00-05:00\", \"2018-11-13T00:00:00-05:00\", \"2018-11-14T00:00:00-05:00\", \"2018-11-15T00:00:00-05:00\", \"2018-11-16T00:00:00-05:00\", \"2018-11-17T00:00:00-05:00\", \"2018-11-18T00:00:00-05:00\", \"2018-11-19T00:00:00-05:00\", \"2018-11-20T00:00:00-05:00\", \"2018-11-21T00:00:00-05:00\", \"2018-11-22T00:00:00-05:00\", \"2018-11-23T00:00:00-05:00\", \"2018-11-24T00:00:00-05:00\", \"2018-11-25T00:00:00-05:00\", \"2018-11-26T00:00:00-05:00\", \"2018-11-27T00:00:00-05:00\", \"2018-11-28T00:00:00-05:00\", \"2018-11-29T00:00:00-05:00\", \"2018-11-30T00:00:00-05:00\", \"2018-12-01T00:00:00-05:00\", \"2018-12-02T00:00:00-05:00\", \"2018-12-03T00:00:00-05:00\", \"2018-12-04T00:00:00-05:00\", \"2018-12-05T00:00:00-05:00\", \"2018-12-06T00:00:00-05:00\", \"2018-12-07T00:00:00-05:00\", \"2018-12-08T00:00:00-05:00\", \"2018-12-09T00:00:00-05:00\", \"2018-12-10T00:00:00-05:00\", \"2018-12-11T00:00:00-05:00\", \"2018-12-12T00:00:00-05:00\", \"2018-12-13T00:00:00-05:00\", \"2018-12-14T00:00:00-05:00\", \"2018-12-15T00:00:00-05:00\", \"2018-12-16T00:00:00-05:00\", \"2018-12-17T00:00:00-05:00\", \"2018-12-18T00:00:00-05:00\", \"2018-12-19T00:00:00-05:00\", \"2018-12-20T00:00:00-05:00\", \"2018-12-21T00:00:00-05:00\", \"2018-12-22T00:00:00-05:00\", \"2018-12-23T00:00:00-05:00\", \"2018-12-24T00:00:00-05:00\", \"2018-12-25T00:00:00-05:00\", \"2018-12-26T00:00:00-05:00\", \"2018-12-27T00:00:00-05:00\", \"2018-12-28T00:00:00-05:00\", \"2018-12-29T00:00:00-05:00\", \"2018-12-30T00:00:00-05:00\", \"2018-12-31T00:00:00-05:00\", \"2019-01-01T00:00:00-05:00\", \"2019-01-02T00:00:00-05:00\", \"2019-01-03T00:00:00-05:00\", \"2019-01-04T00:00:00-05:00\", \"2019-01-05T00:00:00-05:00\", \"2019-01-06T00:00:00-05:00\", \"2019-01-07T00:00:00-05:00\", \"2019-01-08T00:00:00-05:00\", \"2019-01-09T00:00:00-05:00\", \"2019-01-10T00:00:00-05:00\", \"2019-01-11T00:00:00-05:00\", \"2019-01-12T00:00:00-05:00\", \"2019-01-13T00:00:00-05:00\", \"2019-01-14T00:00:00-05:00\", \"2019-01-15T00:00:00-05:00\", \"2019-01-16T00:00:00-05:00\", \"2019-01-17T00:00:00-05:00\", \"2019-01-18T00:00:00-05:00\", \"2019-01-19T00:00:00-05:00\", \"2019-01-20T00:00:00-05:00\", \"2019-01-21T00:00:00-05:00\", \"2019-01-22T00:00:00-05:00\", \"2019-01-23T00:00:00-05:00\", \"2019-01-24T00:00:00-05:00\", \"2019-01-25T00:00:00-05:00\", \"2019-01-26T00:00:00-05:00\", \"2019-01-27T00:00:00-05:00\", \"2019-01-28T00:00:00-05:00\", \"2019-01-29T00:00:00-05:00\", \"2019-01-30T00:00:00-05:00\", \"2019-01-31T00:00:00-05:00\", \"2019-02-01T00:00:00-05:00\", \"2019-02-02T00:00:00-05:00\", \"2019-02-03T00:00:00-05:00\", \"2019-02-04T00:00:00-05:00\", \"2019-02-05T00:00:00-05:00\", \"2019-02-06T00:00:00-05:00\", \"2019-02-07T00:00:00-05:00\", \"2019-02-08T00:00:00-05:00\", \"2019-02-09T00:00:00-05:00\", \"2019-02-10T00:00:00-05:00\", \"2019-02-11T00:00:00-05:00\", \"2019-02-12T00:00:00-05:00\", \"2019-02-13T00:00:00-05:00\", \"2019-02-14T00:00:00-05:00\", \"2019-02-15T00:00:00-05:00\", \"2019-02-16T00:00:00-05:00\", \"2019-02-17T00:00:00-05:00\", \"2019-02-18T00:00:00-05:00\", \"2019-02-19T00:00:00-05:00\", \"2019-02-20T00:00:00-05:00\", \"2019-02-21T00:00:00-05:00\", \"2019-02-22T00:00:00-05:00\", \"2019-02-23T00:00:00-05:00\", \"2019-02-24T00:00:00-05:00\", \"2019-02-25T00:00:00-05:00\", \"2019-02-26T00:00:00-05:00\", \"2019-02-27T00:00:00-05:00\", \"2019-02-28T00:00:00-05:00\", \"2019-03-01T00:00:00-05:00\", \"2019-03-02T00:00:00-05:00\", \"2019-03-03T00:00:00-05:00\", \"2019-03-04T00:00:00-05:00\", \"2019-03-05T00:00:00-05:00\", \"2019-03-06T00:00:00-05:00\", \"2019-03-07T00:00:00-05:00\", \"2019-03-08T00:00:00-05:00\", \"2019-03-09T00:00:00-05:00\", \"2019-03-10T00:00:00-05:00\", \"2019-03-11T00:00:00-04:00\", \"2019-03-12T00:00:00-04:00\", \"2019-03-13T00:00:00-04:00\", \"2019-03-14T00:00:00-04:00\", \"2019-03-15T00:00:00-04:00\", \"2019-03-16T00:00:00-04:00\", \"2019-03-17T00:00:00-04:00\", \"2019-03-18T00:00:00-04:00\", \"2019-03-19T00:00:00-04:00\", \"2019-03-20T00:00:00-04:00\", \"2019-03-21T00:00:00-04:00\", \"2019-03-22T00:00:00-04:00\", \"2019-03-23T00:00:00-04:00\", \"2019-03-24T00:00:00-04:00\", \"2019-03-25T00:00:00-04:00\", \"2019-03-26T00:00:00-04:00\", \"2019-03-27T00:00:00-04:00\", \"2019-03-28T00:00:00-04:00\", \"2019-03-29T00:00:00-04:00\", \"2019-03-30T00:00:00-04:00\", \"2019-03-31T00:00:00-04:00\", \"2019-04-01T00:00:00-04:00\", \"2019-04-02T00:00:00-04:00\", \"2019-04-03T00:00:00-04:00\", \"2019-04-04T00:00:00-04:00\", \"2019-04-05T00:00:00-04:00\", \"2019-04-06T00:00:00-04:00\", \"2019-04-07T00:00:00-04:00\", \"2019-04-08T00:00:00-04:00\", \"2019-04-09T00:00:00-04:00\", \"2019-04-10T00:00:00-04:00\", \"2019-04-11T00:00:00-04:00\", \"2019-04-12T00:00:00-04:00\", \"2019-04-13T00:00:00-04:00\", \"2019-04-14T00:00:00-04:00\", \"2019-04-15T00:00:00-04:00\", \"2019-04-16T00:00:00-04:00\", \"2019-04-17T00:00:00-04:00\", \"2019-04-18T00:00:00-04:00\", \"2019-04-19T00:00:00-04:00\", \"2019-04-20T00:00:00-04:00\", \"2019-04-21T00:00:00-04:00\", \"2019-04-22T00:00:00-04:00\", \"2019-04-23T00:00:00-04:00\", \"2019-04-24T00:00:00-04:00\", \"2019-04-25T00:00:00-04:00\", \"2019-04-26T00:00:00-04:00\", \"2019-04-27T00:00:00-04:00\", \"2019-04-28T00:00:00-04:00\", \"2019-04-29T00:00:00-04:00\", \"2019-04-30T00:00:00-04:00\", \"2019-05-01T00:00:00-04:00\", \"2019-05-02T00:00:00-04:00\", \"2019-05-03T00:00:00-04:00\", \"2019-05-04T00:00:00-04:00\", \"2019-05-05T00:00:00-04:00\", \"2019-05-06T00:00:00-04:00\", \"2019-05-07T00:00:00-04:00\", \"2019-05-08T00:00:00-04:00\", \"2019-05-09T00:00:00-04:00\", \"2019-05-10T00:00:00-04:00\", \"2019-05-11T00:00:00-04:00\", \"2019-05-12T00:00:00-04:00\", \"2019-05-13T00:00:00-04:00\", \"2019-05-14T00:00:00-04:00\", \"2019-05-15T00:00:00-04:00\", \"2019-05-16T00:00:00-04:00\", \"2019-05-17T00:00:00-04:00\", \"2019-05-18T00:00:00-04:00\", \"2019-05-19T00:00:00-04:00\", \"2019-05-20T00:00:00-04:00\", \"2019-05-21T00:00:00-04:00\", \"2019-05-22T00:00:00-04:00\", \"2019-05-23T00:00:00-04:00\", \"2019-05-24T00:00:00-04:00\", \"2019-05-25T00:00:00-04:00\", \"2019-05-26T00:00:00-04:00\", \"2019-05-27T00:00:00-04:00\", \"2019-05-28T00:00:00-04:00\", \"2019-05-29T00:00:00-04:00\", \"2019-05-30T00:00:00-04:00\", \"2019-05-31T00:00:00-04:00\", \"2019-06-01T00:00:00-04:00\", \"2019-06-02T00:00:00-04:00\", \"2019-06-03T00:00:00-04:00\", \"2019-06-04T00:00:00-04:00\", \"2019-06-05T00:00:00-04:00\", \"2019-06-06T00:00:00-04:00\", \"2019-06-07T00:00:00-04:00\", \"2019-06-08T00:00:00-04:00\", \"2019-06-09T00:00:00-04:00\", \"2019-06-10T00:00:00-04:00\", \"2019-06-11T00:00:00-04:00\", \"2019-06-12T00:00:00-04:00\", \"2019-06-13T00:00:00-04:00\", \"2019-06-14T00:00:00-04:00\", \"2019-06-15T00:00:00-04:00\", \"2019-06-16T00:00:00-04:00\", \"2019-06-17T00:00:00-04:00\", \"2019-06-18T00:00:00-04:00\", \"2019-06-19T00:00:00-04:00\", \"2019-06-20T00:00:00-04:00\", \"2019-06-21T00:00:00-04:00\", \"2019-06-22T00:00:00-04:00\", \"2019-06-23T00:00:00-04:00\", \"2019-06-24T00:00:00-04:00\", \"2019-06-25T00:00:00-04:00\", \"2019-06-26T00:00:00-04:00\", \"2019-06-27T00:00:00-04:00\", \"2019-06-28T00:00:00-04:00\", \"2019-06-29T00:00:00-04:00\", \"2019-06-30T00:00:00-04:00\", \"2019-07-01T00:00:00-04:00\", \"2019-07-02T00:00:00-04:00\", \"2019-07-03T00:00:00-04:00\", \"2019-07-04T00:00:00-04:00\", \"2019-07-05T00:00:00-04:00\", \"2019-07-06T00:00:00-04:00\", \"2019-07-07T00:00:00-04:00\", \"2019-07-08T00:00:00-04:00\", \"2019-07-09T00:00:00-04:00\", \"2019-07-10T00:00:00-04:00\", \"2019-07-11T00:00:00-04:00\", \"2019-07-12T00:00:00-04:00\", \"2019-07-13T00:00:00-04:00\", \"2019-07-14T00:00:00-04:00\", \"2019-07-15T00:00:00-04:00\", \"2019-07-16T00:00:00-04:00\", \"2019-07-17T00:00:00-04:00\", \"2019-07-18T00:00:00-04:00\", \"2019-07-19T00:00:00-04:00\", \"2019-07-20T00:00:00-04:00\", \"2019-07-21T00:00:00-04:00\", \"2019-07-22T00:00:00-04:00\", \"2019-07-23T00:00:00-04:00\", \"2019-07-24T00:00:00-04:00\", \"2019-07-25T00:00:00-04:00\", \"2019-07-26T00:00:00-04:00\", \"2019-07-27T00:00:00-04:00\", \"2019-07-28T00:00:00-04:00\", \"2019-07-29T00:00:00-04:00\", \"2019-07-30T00:00:00-04:00\", \"2019-07-31T00:00:00-04:00\", \"2019-08-01T00:00:00-04:00\", \"2019-08-02T00:00:00-04:00\", \"2019-08-03T00:00:00-04:00\", \"2019-08-04T00:00:00-04:00\", \"2019-08-05T00:00:00-04:00\", \"2019-08-06T00:00:00-04:00\", \"2019-08-07T00:00:00-04:00\", \"2019-08-08T00:00:00-04:00\", \"2019-08-09T00:00:00-04:00\", \"2019-08-10T00:00:00-04:00\", \"2019-08-11T00:00:00-04:00\", \"2019-08-12T00:00:00-04:00\", \"2019-08-13T00:00:00-04:00\", \"2019-08-14T00:00:00-04:00\", \"2019-08-15T00:00:00-04:00\", \"2019-08-16T00:00:00-04:00\", \"2019-08-17T00:00:00-04:00\", \"2019-08-18T00:00:00-04:00\", \"2019-08-19T00:00:00-04:00\", \"2019-08-20T00:00:00-04:00\", \"2019-08-21T00:00:00-04:00\", \"2019-08-22T00:00:00-04:00\", \"2019-08-23T00:00:00-04:00\", \"2019-08-24T00:00:00-04:00\", \"2019-08-25T00:00:00-04:00\", \"2019-08-26T00:00:00-04:00\", \"2019-08-27T00:00:00-04:00\", \"2019-08-28T00:00:00-04:00\", \"2019-08-29T00:00:00-04:00\", \"2019-08-30T00:00:00-04:00\", \"2019-08-31T00:00:00-04:00\", \"2019-09-01T00:00:00-04:00\", \"2019-09-02T00:00:00-04:00\", \"2019-09-03T00:00:00-04:00\", \"2019-09-04T00:00:00-04:00\", \"2019-09-05T00:00:00-04:00\", \"2019-09-06T00:00:00-04:00\", \"2019-09-07T00:00:00-04:00\", \"2019-09-08T00:00:00-04:00\", \"2019-09-09T00:00:00-04:00\", \"2019-09-10T00:00:00-04:00\", \"2019-09-11T00:00:00-04:00\", \"2019-09-12T00:00:00-04:00\", \"2019-09-13T00:00:00-04:00\", \"2019-09-14T00:00:00-04:00\", \"2019-09-15T00:00:00-04:00\", \"2019-09-16T00:00:00-04:00\", \"2019-09-17T00:00:00-04:00\", \"2019-09-18T00:00:00-04:00\", \"2019-09-19T00:00:00-04:00\", \"2019-09-20T00:00:00-04:00\", \"2019-09-21T00:00:00-04:00\", \"2019-09-22T00:00:00-04:00\", \"2019-09-23T00:00:00-04:00\", \"2019-09-24T00:00:00-04:00\", \"2019-09-25T00:00:00-04:00\", \"2019-09-26T00:00:00-04:00\", \"2019-09-27T00:00:00-04:00\", \"2019-09-28T00:00:00-04:00\", \"2019-09-29T00:00:00-04:00\", \"2019-09-30T00:00:00-04:00\", \"2019-10-01T00:00:00-04:00\", \"2019-10-02T00:00:00-04:00\", \"2019-10-03T00:00:00-04:00\", \"2019-10-04T00:00:00-04:00\", \"2019-10-05T00:00:00-04:00\", \"2019-10-06T00:00:00-04:00\", \"2019-10-07T00:00:00-04:00\", \"2019-10-08T00:00:00-04:00\", \"2019-10-09T00:00:00-04:00\", \"2019-10-10T00:00:00-04:00\", \"2019-10-11T00:00:00-04:00\", \"2019-10-12T00:00:00-04:00\", \"2019-10-13T00:00:00-04:00\", \"2019-10-14T00:00:00-04:00\", \"2019-10-15T00:00:00-04:00\", \"2019-10-16T00:00:00-04:00\", \"2019-10-17T00:00:00-04:00\", \"2019-10-18T00:00:00-04:00\", \"2019-10-19T00:00:00-04:00\", \"2019-10-20T00:00:00-04:00\", \"2019-10-21T00:00:00-04:00\", \"2019-10-22T00:00:00-04:00\", \"2019-10-23T00:00:00-04:00\", \"2019-10-24T00:00:00-04:00\", \"2019-10-25T00:00:00-04:00\", \"2019-10-26T00:00:00-04:00\", \"2019-10-27T00:00:00-04:00\", \"2019-10-28T00:00:00-04:00\", \"2019-10-29T00:00:00-04:00\", \"2019-10-30T00:00:00-04:00\", \"2019-10-31T00:00:00-04:00\", \"2019-11-01T00:00:00-04:00\", \"2019-11-02T00:00:00-04:00\", \"2019-11-03T00:00:00-04:00\", \"2019-11-04T00:00:00-05:00\", \"2019-11-05T00:00:00-05:00\", \"2019-11-06T00:00:00-05:00\", \"2019-11-07T00:00:00-05:00\", \"2019-11-08T00:00:00-05:00\", \"2019-11-09T00:00:00-05:00\", \"2019-11-10T00:00:00-05:00\", \"2019-11-11T00:00:00-05:00\", \"2019-11-12T00:00:00-05:00\", \"2019-11-13T00:00:00-05:00\", \"2019-11-14T00:00:00-05:00\", \"2019-11-15T00:00:00-05:00\", \"2019-11-16T00:00:00-05:00\", \"2019-11-17T00:00:00-05:00\", \"2019-11-18T00:00:00-05:00\", \"2019-11-19T00:00:00-05:00\", \"2019-11-20T00:00:00-05:00\", \"2019-11-21T00:00:00-05:00\", \"2019-11-22T00:00:00-05:00\", \"2019-11-23T00:00:00-05:00\", \"2019-11-24T00:00:00-05:00\", \"2019-11-25T00:00:00-05:00\", \"2019-11-26T00:00:00-05:00\", \"2019-11-27T00:00:00-05:00\", \"2019-11-28T00:00:00-05:00\", \"2019-11-29T00:00:00-05:00\", \"2019-11-30T00:00:00-05:00\", \"2019-12-01T00:00:00-05:00\", \"2019-12-02T00:00:00-05:00\", \"2019-12-03T00:00:00-05:00\", \"2019-12-04T00:00:00-05:00\", \"2019-12-05T00:00:00-05:00\", \"2019-12-06T00:00:00-05:00\", \"2019-12-07T00:00:00-05:00\", \"2019-12-08T00:00:00-05:00\", \"2019-12-09T00:00:00-05:00\", \"2019-12-10T00:00:00-05:00\", \"2019-12-11T00:00:00-05:00\", \"2019-12-12T00:00:00-05:00\", \"2019-12-13T00:00:00-05:00\", \"2019-12-14T00:00:00-05:00\", \"2019-12-15T00:00:00-05:00\", \"2019-12-16T00:00:00-05:00\", \"2019-12-17T00:00:00-05:00\", \"2019-12-18T00:00:00-05:00\", \"2019-12-19T00:00:00-05:00\", \"2019-12-20T00:00:00-05:00\", \"2019-12-21T00:00:00-05:00\", \"2019-12-22T00:00:00-05:00\", \"2019-12-23T00:00:00-05:00\", \"2019-12-24T00:00:00-05:00\", \"2019-12-25T00:00:00-05:00\", \"2019-12-26T00:00:00-05:00\", \"2019-12-27T00:00:00-05:00\", \"2019-12-28T00:00:00-05:00\", \"2019-12-29T00:00:00-05:00\", \"2019-12-30T00:00:00-05:00\", \"2019-12-31T00:00:00-05:00\", \"2020-01-01T00:00:00-05:00\", \"2020-01-02T00:00:00-05:00\", \"2020-01-03T00:00:00-05:00\", \"2020-01-04T00:00:00-05:00\", \"2020-01-05T00:00:00-05:00\", \"2020-01-06T00:00:00-05:00\", \"2020-01-07T00:00:00-05:00\", \"2020-01-08T00:00:00-05:00\", \"2020-01-09T00:00:00-05:00\", \"2020-01-10T00:00:00-05:00\", \"2020-01-11T00:00:00-05:00\", \"2020-01-12T00:00:00-05:00\", \"2020-01-13T00:00:00-05:00\", \"2020-01-14T00:00:00-05:00\", \"2020-01-15T00:00:00-05:00\", \"2020-01-16T00:00:00-05:00\", \"2020-01-17T00:00:00-05:00\", \"2020-01-18T00:00:00-05:00\", \"2020-01-19T00:00:00-05:00\", \"2020-01-20T00:00:00-05:00\", \"2020-01-21T00:00:00-05:00\", \"2020-01-22T00:00:00-05:00\", \"2020-01-23T00:00:00-05:00\", \"2020-01-24T00:00:00-05:00\", \"2020-01-25T00:00:00-05:00\", \"2020-01-26T00:00:00-05:00\", \"2020-01-27T00:00:00-05:00\", \"2020-01-28T00:00:00-05:00\", \"2020-01-29T00:00:00-05:00\", \"2020-01-30T00:00:00-05:00\", \"2020-01-31T00:00:00-05:00\", \"2020-02-01T00:00:00-05:00\", \"2020-02-02T00:00:00-05:00\", \"2020-02-03T00:00:00-05:00\", \"2020-02-04T00:00:00-05:00\", \"2020-02-05T00:00:00-05:00\", \"2020-02-06T00:00:00-05:00\", \"2020-02-07T00:00:00-05:00\", \"2020-02-08T00:00:00-05:00\", \"2020-02-09T00:00:00-05:00\", \"2020-02-10T00:00:00-05:00\", \"2020-02-11T00:00:00-05:00\", \"2020-02-12T00:00:00-05:00\", \"2020-02-13T00:00:00-05:00\", \"2020-02-14T00:00:00-05:00\", \"2020-02-15T00:00:00-05:00\", \"2020-02-16T00:00:00-05:00\", \"2020-02-17T00:00:00-05:00\", \"2020-02-18T00:00:00-05:00\", \"2020-02-19T00:00:00-05:00\", \"2020-02-20T00:00:00-05:00\", \"2020-02-21T00:00:00-05:00\", \"2020-02-22T00:00:00-05:00\", \"2020-02-23T00:00:00-05:00\", \"2020-02-24T00:00:00-05:00\", \"2020-02-25T00:00:00-05:00\", \"2020-02-26T00:00:00-05:00\", \"2020-02-27T00:00:00-05:00\", \"2020-02-28T00:00:00-05:00\", \"2020-02-29T00:00:00-05:00\", \"2020-03-01T00:00:00-05:00\", \"2020-03-02T00:00:00-05:00\", \"2020-03-03T00:00:00-05:00\", \"2020-03-04T00:00:00-05:00\", \"2020-03-05T00:00:00-05:00\", \"2020-03-06T00:00:00-05:00\", \"2020-03-07T00:00:00-05:00\", \"2020-03-08T00:00:00-05:00\", \"2020-03-09T00:00:00-04:00\", \"2020-03-10T00:00:00-04:00\", \"2020-03-11T00:00:00-04:00\", \"2020-03-12T00:00:00-04:00\", \"2020-03-13T00:00:00-04:00\", \"2020-03-14T00:00:00-04:00\"], \"y\": [0.6897222222222222, 3.026111111111111, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1963888888888889, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.511388888888889, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1288888888888888, 0.6422222222222222, 3.241388888888889, 0.0, 0.0, 0.63, 0.18388888888888888, 0.0, 0.0, 0.0, 0.7266666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.5330555555555556, 1.4955555555555555, 0.0, 2.143611111111111, 0.25305555555555553, 1.0597222222222222, 0.0, 0.0, 1.3447222222222222, 1.2586111111111111, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.28444444444444444, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.5888888888888888, 0.0, 0.0, 0.0, 0.0, 0.0, 1.386111111111111, 0.43444444444444447, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.926111111111111, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.8611111111111112, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.756388888888889, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0055555555555555, 0.5136111111111111, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0930555555555554, 0.0, 0.0, 1.3972222222222221, 0.0, 0.0, 4.253611111111111, 3.097777777777778, 0.6669444444444445, 1.4416666666666667, 4.195555555555556, 4.3180555555555555, 7.589722222222222, 3.9363888888888887, 1.8019444444444443, 5.110277777777778, 6.115277777777778, 3.311111111111111, 1.5955555555555556, 0.0, 2.5694444444444446, 2.120833333333333, 1.8552777777777778, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.043333333333333335, 0.0, 0.23527777777777778, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006388888888888889, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.5991666666666666]}], {\"hovermode\": \"x\", \"margin\": {\"pad\": 0}, \"template\": {\"data\": {\"bar\": [{\"error_x\": {\"color\": \"#2a3f5f\"}, \"error_y\": {\"color\": \"#2a3f5f\"}, \"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"bar\"}], \"barpolar\": [{\"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"barpolar\"}], \"carpet\": [{\"aaxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"baxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"type\": \"carpet\"}], \"choropleth\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"choropleth\"}], \"contour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"contour\"}], \"contourcarpet\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"contourcarpet\"}], \"heatmap\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmap\"}], \"heatmapgl\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmapgl\"}], \"histogram\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"histogram\"}], \"histogram2d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2d\"}], \"histogram2dcontour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2dcontour\"}], \"mesh3d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"mesh3d\"}], \"parcoords\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"parcoords\"}], \"pie\": [{\"automargin\": true, \"type\": \"pie\"}], \"scatter\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter\"}], \"scatter3d\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter3d\"}], \"scattercarpet\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattercarpet\"}], \"scattergeo\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergeo\"}], \"scattergl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergl\"}], \"scattermapbox\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattermapbox\"}], \"scatterpolar\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolar\"}], \"scatterpolargl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolargl\"}], \"scatterternary\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterternary\"}], \"surface\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"surface\"}], \"table\": [{\"cells\": {\"fill\": {\"color\": \"#EBF0F8\"}, \"line\": {\"color\": \"white\"}}, \"header\": {\"fill\": {\"color\": \"#C8D4E3\"}, \"line\": {\"color\": \"white\"}}, \"type\": \"table\"}]}, \"layout\": {\"annotationdefaults\": {\"arrowcolor\": \"#2a3f5f\", \"arrowhead\": 0, \"arrowwidth\": 1}, \"coloraxis\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"colorscale\": {\"diverging\": [[0, \"#8e0152\"], [0.1, \"#c51b7d\"], [0.2, \"#de77ae\"], [0.3, \"#f1b6da\"], [0.4, \"#fde0ef\"], [0.5, \"#f7f7f7\"], [0.6, \"#e6f5d0\"], [0.7, \"#b8e186\"], [0.8, \"#7fbc41\"], [0.9, \"#4d9221\"], [1, \"#276419\"]], \"sequential\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"sequentialminus\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]]}, \"colorway\": [\"#636efa\", \"#EF553B\", \"#00cc96\", \"#ab63fa\", \"#FFA15A\", \"#19d3f3\", \"#FF6692\", \"#B6E880\", \"#FF97FF\", \"#FECB52\"], \"font\": {\"color\": \"#2a3f5f\"}, \"geo\": {\"bgcolor\": \"white\", \"lakecolor\": \"white\", \"landcolor\": \"#E5ECF6\", \"showlakes\": true, \"showland\": true, \"subunitcolor\": \"white\"}, \"hoverlabel\": {\"align\": \"left\"}, \"hovermode\": \"closest\", \"mapbox\": {\"style\": \"light\"}, \"paper_bgcolor\": \"white\", \"plot_bgcolor\": \"#E5ECF6\", \"polar\": {\"angularaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"radialaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"scene\": {\"xaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"yaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"zaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}}, \"shapedefaults\": {\"line\": {\"color\": \"#2a3f5f\"}}, \"ternary\": {\"aaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"baxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"caxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"title\": {\"x\": 0.05}, \"xaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}, \"yaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}}}, \"title\": {\"text\": \"total hours commited: 93.35\"}, \"yaxis\": {\"title\": {\"text\": \"hours per 1 d\"}}}, {\"responsive\": true} ) };","title":"Home"},{"location":"index.html#hourly","text":"Hourly is a command-line time tracking tool for git projects. Hourly parses your commit messages for clock-in and clock-out keywords to precisely estimate work hours. Designed for developers and project managers, hourly makes it easy to see how and where you spend your time. When configured with Stripe or BTCPay, hourly can generate invoices for your specified wage.","title":"Hourly"},{"location":"index.html#usage","text":"","title":"Usage"},{"location":"index.html#work-sessions","text":"To clock in: hourly-in The above command updates the header of your work log ( WorkLog.md by default) and commits it with the message \"clock-in\". Stage any changes to your code base. When you are ready to commit: hourly commit.message=\"my commit message\" Hourly updates the work log with your commit message. Feel free to use the work log to provide additional context. When you are finished committing other work for this session, you may clock out: hourly-out Again, hourly updates the work log and commits it with the message \"clock-out\" along with any other staged files. Read more about configuring your work log .","title":"Work sessions"},{"location":"index.html#timesheets","text":"When you are ready to generate a timesheet for your repo, run hourly from your git directory: hourly-report Hourly parses all the commit messages for clock in/out keywords and uses git's timestamps to determine how long each session lasted. For example, here's what happens when you run hourly on the hourly repo itself : hourly-report repo.start_date=\"2018-10-21\" repo.end_date=\"2019-3-10\" repo.ignore=\"pro bono\" pay period: 2018-10-28 13:44:48-04:00 -> 2019-02-25 12:49:51-05:00 ignoring pro bono TimeIn LogIn TimeOut LogOut TimeDelta Hours 0 2018-10-28 13:44:48-04:00 clock in 2018-10-28 13:56:35-04:00 clock out 00:11:47 0.196389 1 2019-02-25 10:19:10-05:00 clock in T-1hr 2019-02-25 12:49:51-05:00 clock out T-5m 02:30:41 2.511389 0 days 02:42:28, 2.71 hours worked To save the timesheet as a csv file, include an ouput prefix: hourly-report repo.start_date=\"2018-10-21\" repo.end_date=\"2019-3-10\" repo.ignore=\"pro bono\" report.filename=Pembroke pay period: 2018-10-28 13:44:48-04:00 -> 2019-02-25 12:49:51-05:00 ignoring pro bono TimeIn LogIn TimeOut LogOut TimeDelta Hours 0 2018-10-28 13:44:48-04:00 clock in 2018-10-28 13:56:35-04:00 clock out 00:11:47 0.196389 1 2019-02-25 10:19:10-05:00 clock in T-1hr 2019-02-25 12:49:51-05:00 clock out T-5m 02:30:41 2.511389 0 days 02:42:28, 2.71 hours worked writing to file Pembroke-20181028-134448_to_20190225-124951.csv Visit the Tutorial for a detailed walk-through of how hourly generates timesheets.","title":"Timesheets"},{"location":"index.html#invoicing","text":"To generate an invoice using stripe: hourly-report invoice=stripe repo.start_date=\"Jan 1, 2020\" stripe.customer.email=myclient@momandpop.com The above command generates a time sheet for this repo, calculates earnings, prepares a stripe invoice, and asks you to confirm details. After confirmation, an email will be sent from your Stripe account to myclient@momandpop.com. The btcpay invoicing is similar: hourly-report invoice=btcpay repo.start_date=\"Jan 1, 2020\" After confirmation, hourly tells your btcpay server to generate an invoice and displays the corresponding payment url. Note that BTCPay can be configured for lightning, so streaming payments are possible! Visit the Payments section for more info.","title":"Invoicing"},{"location":"index.html#getting-started","text":"Hourly is hosted on github under the Apache 2.0 license https://github.com/asherp/hourly","title":"Getting Started"},{"location":"index.html#install","text":"pip install hourly --upgrade","title":"Install"},{"location":"index.html#requirements","text":"pandas gitpython plotly hydra stripe (optional) btcpay-python (optional) You can get these dependencies like this: pip install pandas gitpython plotly pip install hydra-core --upgrade For invoicing: pip install btcpay-python pip install stripe For hourly's docs: pip install mkdocs mkdocs-material markdown-include mknotebooks","title":"Requirements"},{"location":"index.html#tests","text":"For integration tests, hourly may be tested against the hourly repo. Unit tests are based on pytest suite with pytest-cov pip install pytest pytest-cov To run the tests, navigate to the base of this repo, then py.test tests.py --cov=hourly","title":"Tests"},{"location":"index.html#configuration","text":"Hourly uses Hydra for customized configuration. The full options are given by hourly's help command: hourly --help A simple hour tracker for git projects This application helps users clock in and out of git repos, as well as generate timesheets for invoicing. Configure hourly to ignore commits by keyword or hashes == Configuration groups == Compose your configuration from those groups (group=option) == Config == Override anything in the config (foo.bar=value) commit: clock: null identity: - name - email message: '' tminus: null compensation: [] config_override: hourly.yaml invoice: null payment: null repo: case_sensitive: false end_date: null errant_clocks: [] gitdir: . ignore: null match_logs: false start_date: null report: currency: '' filename: null pandas: display: max_columns: 10 max_colwidth: 45 max_rows: null width: 600 timesheet: true wage: null work: false vis: frequency: 1 d plotly: figure: margin: pad: 0 plot: animation_opts: null auto_open: true auto_play: true config: null filename: hourly-work.html image: null image_filename: plot_image include_mathjax: cdn include_plotlyjs: cdn link_text: Export to plot.ly output_type: file show_link: false validate: true work_log: bullet: '*' filename: WorkLog.md header_depth: 1 Powered by Hydra (https://hydra.cc) Use --hydra-help to view Hydra specific help Hourly's default configuration including comments can be seen here. config_override : hourly.yaml init : false repo : gitdir : . start_date : null end_date : null errant_clocks : [] # list of commit hashes to skip case_sensitive : False # should commit message filters be case-sensitive ignore : null # ignore work containing string, ie 'pro bono' match_logs : False # should all clock-ins be paired with clock-outs report : timesheet : false # print timesheet work : false # print work log filename : '???' # csv file to save report to pandas : display : max_rows : null max_columns : 10 max_colwidth : 45 width : 600 commit : clock : '???' # 'in' will update WorkLog.md and commit with message \"clock-in\" tminus : null # '15m' will prepend 'T-15m' to commit message (ignored if clock is null) message : '' # 'my message' will append 'my message' to commit message identity : # how to identify contributors - name - email compensation : [] # sets wages and currency per developer work_log : filename : WorkLog.md header_depth : 1 # determines markdown header size bullet : '*' vis : # set to null to prevent plotting frequency : '1 d' # start small - experienced users can override plotly : # plotly keywords figure : hovermode : 'x' margin : pad : 0 plot : show_link : False link_text : 'Export to plot.ly' validate : True output_type : file include_plotlyjs : 'cdn' filename : hourly-work.html auto_open : True image : Null image_filename : plot_image # image_width: 800 # image_height: 600 config : Null include_mathjax : 'cdn' auto_play : True animation_opts : Null handle_errors : exit # or raise verbosity : Each of these can be overridden at runtime. For example, hourly commit.clock=in vis=null report.timesheet=False This will update the WorkLog.md file and commit a clock-in message without visualizing or printing the timesheet. Note hourly-in is just syntactic sugar for hourly commit.clock=in vis=null report.timesheet=False . But if we want to override hourly's defaults without typing them in each time, we can specify an hourly.yaml file in our git repo. Hourly will look for this file (via the config_override option) and override its default configuration. Bug Your project's config_override will even override command line arguments! An example of a custom override file is found in the top-level of the hourly repo: repo : errant_clocks : - d9ec537b36475b565df6b28d0cab6edc3a89f2da ignore : 'pro bono' work_log : header_depth : 3 commit : identity : - email vis : frequency : '1 d' plotly : # plotly keywords plot : output_type : div auto_open : false filename : docs/hourly-work.html compensation : - name : Asher Pembroke email : apembroke@gmail.com wage : pi : 1.0 A common use case would be permanently overriding the filename of the work_log you are committing against, to avoid merge conflicts if multiple developers are working on the same project.","title":"Configuration"},{"location":"index.html#visualization","text":"The git repo for hourly has a custom configuration that allows us to embed the work hours as a graph in the mkdocs site. If we run hourly-report from its own git repo, the graph div gets stored in docs/hourly-work.html . The graph is embedded using the markdown-include extension in mkdocs.yml . Then we add the following in our site page: {! docs/hourly-work.html !} Which embeds the graph below: if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});} window.PlotlyConfig = {MathJaxConfig: 'local'}; window.PLOTLYENV=window.PLOTLYENV || {}; if (document.getElementById(\"c2bd69b2-a42c-4ec6-82cf-b89c12ab1817\")) { Plotly.newPlot( 'c2bd69b2-a42c-4ec6-82cf-b89c12ab1817', [{\"mode\": \"lines\", \"name\": \"apembroke@gmail.com\", \"stackgroup\": \"one\", \"text\": [\"0 days 00:41:23\", \"0 days 03:01:34\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:11:47\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 02:30:41\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 01:07:44\", \"0 days 00:38:32\", \"0 days 03:14:29\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:37:48\", \"0 days 00:11:02\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:43:36\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 01:31:59\", \"0 days 01:29:44\", \"0 days 00:00:00\", \"0 days 02:08:37\", \"0 days 00:15:11\", \"0 days 01:03:35\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 01:20:41\", \"0 days 01:15:31\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:17:04\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 01:10:39\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 01:35:20\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 01:23:10\", \"0 days 00:26:04\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 01:55:34\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:51:40\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 01:45:23\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 02:00:20\", \"0 days 00:30:49\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 02:05:35\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 01:23:50\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 04:15:13\", \"0 days 03:05:52\", \"0 days 00:40:01\", \"0 days 01:26:30\", \"0 days 04:11:44\", \"0 days 04:19:05\", \"0 days 07:35:23\", \"0 days 03:56:11\", \"0 days 01:48:07\", \"0 days 05:06:37\", \"0 days 06:06:55\", \"0 days 03:18:40\", \"0 days 01:35:44\", \"0 days 00:00:00\", \"0 days 02:34:10\", \"0 days 02:07:15\", \"0 days 01:51:19\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:02:36\", \"0 days 00:00:00\", \"0 days 00:14:07\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:23\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 01:35:57\"], \"type\": \"scatter\", \"x\": [\"2018-10-19T00:00:00-04:00\", \"2018-10-20T00:00:00-04:00\", \"2018-10-21T00:00:00-04:00\", \"2018-10-22T00:00:00-04:00\", \"2018-10-23T00:00:00-04:00\", \"2018-10-24T00:00:00-04:00\", \"2018-10-25T00:00:00-04:00\", \"2018-10-26T00:00:00-04:00\", \"2018-10-27T00:00:00-04:00\", \"2018-10-28T00:00:00-04:00\", \"2018-10-29T00:00:00-04:00\", \"2018-10-30T00:00:00-04:00\", \"2018-10-31T00:00:00-04:00\", \"2018-11-01T00:00:00-04:00\", \"2018-11-02T00:00:00-04:00\", \"2018-11-03T00:00:00-04:00\", \"2018-11-04T00:00:00-04:00\", \"2018-11-05T00:00:00-05:00\", \"2018-11-06T00:00:00-05:00\", \"2018-11-07T00:00:00-05:00\", \"2018-11-08T00:00:00-05:00\", \"2018-11-09T00:00:00-05:00\", \"2018-11-10T00:00:00-05:00\", \"2018-11-11T00:00:00-05:00\", \"2018-11-12T00:00:00-05:00\", \"2018-11-13T00:00:00-05:00\", \"2018-11-14T00:00:00-05:00\", \"2018-11-15T00:00:00-05:00\", \"2018-11-16T00:00:00-05:00\", \"2018-11-17T00:00:00-05:00\", \"2018-11-18T00:00:00-05:00\", \"2018-11-19T00:00:00-05:00\", \"2018-11-20T00:00:00-05:00\", \"2018-11-21T00:00:00-05:00\", \"2018-11-22T00:00:00-05:00\", \"2018-11-23T00:00:00-05:00\", \"2018-11-24T00:00:00-05:00\", \"2018-11-25T00:00:00-05:00\", \"2018-11-26T00:00:00-05:00\", \"2018-11-27T00:00:00-05:00\", \"2018-11-28T00:00:00-05:00\", \"2018-11-29T00:00:00-05:00\", \"2018-11-30T00:00:00-05:00\", \"2018-12-01T00:00:00-05:00\", \"2018-12-02T00:00:00-05:00\", \"2018-12-03T00:00:00-05:00\", \"2018-12-04T00:00:00-05:00\", \"2018-12-05T00:00:00-05:00\", \"2018-12-06T00:00:00-05:00\", \"2018-12-07T00:00:00-05:00\", \"2018-12-08T00:00:00-05:00\", \"2018-12-09T00:00:00-05:00\", \"2018-12-10T00:00:00-05:00\", \"2018-12-11T00:00:00-05:00\", \"2018-12-12T00:00:00-05:00\", \"2018-12-13T00:00:00-05:00\", \"2018-12-14T00:00:00-05:00\", \"2018-12-15T00:00:00-05:00\", \"2018-12-16T00:00:00-05:00\", \"2018-12-17T00:00:00-05:00\", \"2018-12-18T00:00:00-05:00\", \"2018-12-19T00:00:00-05:00\", \"2018-12-20T00:00:00-05:00\", \"2018-12-21T00:00:00-05:00\", \"2018-12-22T00:00:00-05:00\", \"2018-12-23T00:00:00-05:00\", \"2018-12-24T00:00:00-05:00\", \"2018-12-25T00:00:00-05:00\", \"2018-12-26T00:00:00-05:00\", \"2018-12-27T00:00:00-05:00\", \"2018-12-28T00:00:00-05:00\", \"2018-12-29T00:00:00-05:00\", \"2018-12-30T00:00:00-05:00\", \"2018-12-31T00:00:00-05:00\", \"2019-01-01T00:00:00-05:00\", \"2019-01-02T00:00:00-05:00\", \"2019-01-03T00:00:00-05:00\", \"2019-01-04T00:00:00-05:00\", \"2019-01-05T00:00:00-05:00\", \"2019-01-06T00:00:00-05:00\", \"2019-01-07T00:00:00-05:00\", \"2019-01-08T00:00:00-05:00\", \"2019-01-09T00:00:00-05:00\", \"2019-01-10T00:00:00-05:00\", \"2019-01-11T00:00:00-05:00\", \"2019-01-12T00:00:00-05:00\", \"2019-01-13T00:00:00-05:00\", \"2019-01-14T00:00:00-05:00\", \"2019-01-15T00:00:00-05:00\", \"2019-01-16T00:00:00-05:00\", \"2019-01-17T00:00:00-05:00\", \"2019-01-18T00:00:00-05:00\", \"2019-01-19T00:00:00-05:00\", \"2019-01-20T00:00:00-05:00\", \"2019-01-21T00:00:00-05:00\", \"2019-01-22T00:00:00-05:00\", \"2019-01-23T00:00:00-05:00\", \"2019-01-24T00:00:00-05:00\", \"2019-01-25T00:00:00-05:00\", \"2019-01-26T00:00:00-05:00\", \"2019-01-27T00:00:00-05:00\", \"2019-01-28T00:00:00-05:00\", \"2019-01-29T00:00:00-05:00\", \"2019-01-30T00:00:00-05:00\", \"2019-01-31T00:00:00-05:00\", \"2019-02-01T00:00:00-05:00\", \"2019-02-02T00:00:00-05:00\", \"2019-02-03T00:00:00-05:00\", \"2019-02-04T00:00:00-05:00\", \"2019-02-05T00:00:00-05:00\", \"2019-02-06T00:00:00-05:00\", \"2019-02-07T00:00:00-05:00\", \"2019-02-08T00:00:00-05:00\", \"2019-02-09T00:00:00-05:00\", \"2019-02-10T00:00:00-05:00\", \"2019-02-11T00:00:00-05:00\", \"2019-02-12T00:00:00-05:00\", \"2019-02-13T00:00:00-05:00\", \"2019-02-14T00:00:00-05:00\", \"2019-02-15T00:00:00-05:00\", \"2019-02-16T00:00:00-05:00\", \"2019-02-17T00:00:00-05:00\", \"2019-02-18T00:00:00-05:00\", \"2019-02-19T00:00:00-05:00\", \"2019-02-20T00:00:00-05:00\", \"2019-02-21T00:00:00-05:00\", \"2019-02-22T00:00:00-05:00\", \"2019-02-23T00:00:00-05:00\", \"2019-02-24T00:00:00-05:00\", \"2019-02-25T00:00:00-05:00\", \"2019-02-26T00:00:00-05:00\", \"2019-02-27T00:00:00-05:00\", \"2019-02-28T00:00:00-05:00\", \"2019-03-01T00:00:00-05:00\", \"2019-03-02T00:00:00-05:00\", \"2019-03-03T00:00:00-05:00\", \"2019-03-04T00:00:00-05:00\", \"2019-03-05T00:00:00-05:00\", \"2019-03-06T00:00:00-05:00\", \"2019-03-07T00:00:00-05:00\", \"2019-03-08T00:00:00-05:00\", \"2019-03-09T00:00:00-05:00\", \"2019-03-10T00:00:00-05:00\", \"2019-03-11T00:00:00-04:00\", \"2019-03-12T00:00:00-04:00\", \"2019-03-13T00:00:00-04:00\", \"2019-03-14T00:00:00-04:00\", \"2019-03-15T00:00:00-04:00\", \"2019-03-16T00:00:00-04:00\", \"2019-03-17T00:00:00-04:00\", \"2019-03-18T00:00:00-04:00\", \"2019-03-19T00:00:00-04:00\", \"2019-03-20T00:00:00-04:00\", \"2019-03-21T00:00:00-04:00\", \"2019-03-22T00:00:00-04:00\", \"2019-03-23T00:00:00-04:00\", \"2019-03-24T00:00:00-04:00\", \"2019-03-25T00:00:00-04:00\", \"2019-03-26T00:00:00-04:00\", \"2019-03-27T00:00:00-04:00\", \"2019-03-28T00:00:00-04:00\", \"2019-03-29T00:00:00-04:00\", \"2019-03-30T00:00:00-04:00\", \"2019-03-31T00:00:00-04:00\", \"2019-04-01T00:00:00-04:00\", \"2019-04-02T00:00:00-04:00\", \"2019-04-03T00:00:00-04:00\", \"2019-04-04T00:00:00-04:00\", \"2019-04-05T00:00:00-04:00\", \"2019-04-06T00:00:00-04:00\", \"2019-04-07T00:00:00-04:00\", \"2019-04-08T00:00:00-04:00\", \"2019-04-09T00:00:00-04:00\", \"2019-04-10T00:00:00-04:00\", \"2019-04-11T00:00:00-04:00\", \"2019-04-12T00:00:00-04:00\", \"2019-04-13T00:00:00-04:00\", \"2019-04-14T00:00:00-04:00\", \"2019-04-15T00:00:00-04:00\", \"2019-04-16T00:00:00-04:00\", \"2019-04-17T00:00:00-04:00\", \"2019-04-18T00:00:00-04:00\", \"2019-04-19T00:00:00-04:00\", \"2019-04-20T00:00:00-04:00\", \"2019-04-21T00:00:00-04:00\", \"2019-04-22T00:00:00-04:00\", \"2019-04-23T00:00:00-04:00\", \"2019-04-24T00:00:00-04:00\", \"2019-04-25T00:00:00-04:00\", \"2019-04-26T00:00:00-04:00\", \"2019-04-27T00:00:00-04:00\", \"2019-04-28T00:00:00-04:00\", \"2019-04-29T00:00:00-04:00\", \"2019-04-30T00:00:00-04:00\", \"2019-05-01T00:00:00-04:00\", \"2019-05-02T00:00:00-04:00\", \"2019-05-03T00:00:00-04:00\", \"2019-05-04T00:00:00-04:00\", \"2019-05-05T00:00:00-04:00\", \"2019-05-06T00:00:00-04:00\", \"2019-05-07T00:00:00-04:00\", \"2019-05-08T00:00:00-04:00\", \"2019-05-09T00:00:00-04:00\", \"2019-05-10T00:00:00-04:00\", \"2019-05-11T00:00:00-04:00\", \"2019-05-12T00:00:00-04:00\", \"2019-05-13T00:00:00-04:00\", \"2019-05-14T00:00:00-04:00\", \"2019-05-15T00:00:00-04:00\", \"2019-05-16T00:00:00-04:00\", \"2019-05-17T00:00:00-04:00\", \"2019-05-18T00:00:00-04:00\", \"2019-05-19T00:00:00-04:00\", \"2019-05-20T00:00:00-04:00\", \"2019-05-21T00:00:00-04:00\", \"2019-05-22T00:00:00-04:00\", \"2019-05-23T00:00:00-04:00\", \"2019-05-24T00:00:00-04:00\", \"2019-05-25T00:00:00-04:00\", \"2019-05-26T00:00:00-04:00\", \"2019-05-27T00:00:00-04:00\", \"2019-05-28T00:00:00-04:00\", \"2019-05-29T00:00:00-04:00\", \"2019-05-30T00:00:00-04:00\", \"2019-05-31T00:00:00-04:00\", \"2019-06-01T00:00:00-04:00\", \"2019-06-02T00:00:00-04:00\", \"2019-06-03T00:00:00-04:00\", \"2019-06-04T00:00:00-04:00\", \"2019-06-05T00:00:00-04:00\", \"2019-06-06T00:00:00-04:00\", \"2019-06-07T00:00:00-04:00\", \"2019-06-08T00:00:00-04:00\", \"2019-06-09T00:00:00-04:00\", \"2019-06-10T00:00:00-04:00\", \"2019-06-11T00:00:00-04:00\", \"2019-06-12T00:00:00-04:00\", \"2019-06-13T00:00:00-04:00\", \"2019-06-14T00:00:00-04:00\", \"2019-06-15T00:00:00-04:00\", \"2019-06-16T00:00:00-04:00\", \"2019-06-17T00:00:00-04:00\", \"2019-06-18T00:00:00-04:00\", \"2019-06-19T00:00:00-04:00\", \"2019-06-20T00:00:00-04:00\", \"2019-06-21T00:00:00-04:00\", \"2019-06-22T00:00:00-04:00\", \"2019-06-23T00:00:00-04:00\", \"2019-06-24T00:00:00-04:00\", \"2019-06-25T00:00:00-04:00\", \"2019-06-26T00:00:00-04:00\", \"2019-06-27T00:00:00-04:00\", \"2019-06-28T00:00:00-04:00\", \"2019-06-29T00:00:00-04:00\", \"2019-06-30T00:00:00-04:00\", \"2019-07-01T00:00:00-04:00\", \"2019-07-02T00:00:00-04:00\", \"2019-07-03T00:00:00-04:00\", \"2019-07-04T00:00:00-04:00\", \"2019-07-05T00:00:00-04:00\", \"2019-07-06T00:00:00-04:00\", \"2019-07-07T00:00:00-04:00\", \"2019-07-08T00:00:00-04:00\", \"2019-07-09T00:00:00-04:00\", \"2019-07-10T00:00:00-04:00\", \"2019-07-11T00:00:00-04:00\", \"2019-07-12T00:00:00-04:00\", \"2019-07-13T00:00:00-04:00\", \"2019-07-14T00:00:00-04:00\", \"2019-07-15T00:00:00-04:00\", \"2019-07-16T00:00:00-04:00\", \"2019-07-17T00:00:00-04:00\", \"2019-07-18T00:00:00-04:00\", \"2019-07-19T00:00:00-04:00\", \"2019-07-20T00:00:00-04:00\", \"2019-07-21T00:00:00-04:00\", \"2019-07-22T00:00:00-04:00\", \"2019-07-23T00:00:00-04:00\", \"2019-07-24T00:00:00-04:00\", \"2019-07-25T00:00:00-04:00\", \"2019-07-26T00:00:00-04:00\", \"2019-07-27T00:00:00-04:00\", \"2019-07-28T00:00:00-04:00\", \"2019-07-29T00:00:00-04:00\", \"2019-07-30T00:00:00-04:00\", \"2019-07-31T00:00:00-04:00\", \"2019-08-01T00:00:00-04:00\", \"2019-08-02T00:00:00-04:00\", \"2019-08-03T00:00:00-04:00\", \"2019-08-04T00:00:00-04:00\", \"2019-08-05T00:00:00-04:00\", \"2019-08-06T00:00:00-04:00\", \"2019-08-07T00:00:00-04:00\", \"2019-08-08T00:00:00-04:00\", \"2019-08-09T00:00:00-04:00\", \"2019-08-10T00:00:00-04:00\", \"2019-08-11T00:00:00-04:00\", \"2019-08-12T00:00:00-04:00\", \"2019-08-13T00:00:00-04:00\", \"2019-08-14T00:00:00-04:00\", \"2019-08-15T00:00:00-04:00\", \"2019-08-16T00:00:00-04:00\", \"2019-08-17T00:00:00-04:00\", \"2019-08-18T00:00:00-04:00\", \"2019-08-19T00:00:00-04:00\", \"2019-08-20T00:00:00-04:00\", \"2019-08-21T00:00:00-04:00\", \"2019-08-22T00:00:00-04:00\", \"2019-08-23T00:00:00-04:00\", \"2019-08-24T00:00:00-04:00\", \"2019-08-25T00:00:00-04:00\", \"2019-08-26T00:00:00-04:00\", \"2019-08-27T00:00:00-04:00\", \"2019-08-28T00:00:00-04:00\", \"2019-08-29T00:00:00-04:00\", \"2019-08-30T00:00:00-04:00\", \"2019-08-31T00:00:00-04:00\", \"2019-09-01T00:00:00-04:00\", \"2019-09-02T00:00:00-04:00\", \"2019-09-03T00:00:00-04:00\", \"2019-09-04T00:00:00-04:00\", \"2019-09-05T00:00:00-04:00\", \"2019-09-06T00:00:00-04:00\", \"2019-09-07T00:00:00-04:00\", \"2019-09-08T00:00:00-04:00\", \"2019-09-09T00:00:00-04:00\", \"2019-09-10T00:00:00-04:00\", \"2019-09-11T00:00:00-04:00\", \"2019-09-12T00:00:00-04:00\", \"2019-09-13T00:00:00-04:00\", \"2019-09-14T00:00:00-04:00\", \"2019-09-15T00:00:00-04:00\", \"2019-09-16T00:00:00-04:00\", \"2019-09-17T00:00:00-04:00\", \"2019-09-18T00:00:00-04:00\", \"2019-09-19T00:00:00-04:00\", \"2019-09-20T00:00:00-04:00\", \"2019-09-21T00:00:00-04:00\", \"2019-09-22T00:00:00-04:00\", \"2019-09-23T00:00:00-04:00\", \"2019-09-24T00:00:00-04:00\", \"2019-09-25T00:00:00-04:00\", \"2019-09-26T00:00:00-04:00\", \"2019-09-27T00:00:00-04:00\", \"2019-09-28T00:00:00-04:00\", \"2019-09-29T00:00:00-04:00\", \"2019-09-30T00:00:00-04:00\", \"2019-10-01T00:00:00-04:00\", \"2019-10-02T00:00:00-04:00\", \"2019-10-03T00:00:00-04:00\", \"2019-10-04T00:00:00-04:00\", \"2019-10-05T00:00:00-04:00\", \"2019-10-06T00:00:00-04:00\", \"2019-10-07T00:00:00-04:00\", \"2019-10-08T00:00:00-04:00\", \"2019-10-09T00:00:00-04:00\", \"2019-10-10T00:00:00-04:00\", \"2019-10-11T00:00:00-04:00\", \"2019-10-12T00:00:00-04:00\", \"2019-10-13T00:00:00-04:00\", \"2019-10-14T00:00:00-04:00\", \"2019-10-15T00:00:00-04:00\", \"2019-10-16T00:00:00-04:00\", \"2019-10-17T00:00:00-04:00\", \"2019-10-18T00:00:00-04:00\", \"2019-10-19T00:00:00-04:00\", \"2019-10-20T00:00:00-04:00\", \"2019-10-21T00:00:00-04:00\", \"2019-10-22T00:00:00-04:00\", \"2019-10-23T00:00:00-04:00\", \"2019-10-24T00:00:00-04:00\", \"2019-10-25T00:00:00-04:00\", \"2019-10-26T00:00:00-04:00\", \"2019-10-27T00:00:00-04:00\", \"2019-10-28T00:00:00-04:00\", \"2019-10-29T00:00:00-04:00\", \"2019-10-30T00:00:00-04:00\", \"2019-10-31T00:00:00-04:00\", \"2019-11-01T00:00:00-04:00\", \"2019-11-02T00:00:00-04:00\", \"2019-11-03T00:00:00-04:00\", \"2019-11-04T00:00:00-05:00\", \"2019-11-05T00:00:00-05:00\", \"2019-11-06T00:00:00-05:00\", \"2019-11-07T00:00:00-05:00\", \"2019-11-08T00:00:00-05:00\", \"2019-11-09T00:00:00-05:00\", \"2019-11-10T00:00:00-05:00\", \"2019-11-11T00:00:00-05:00\", \"2019-11-12T00:00:00-05:00\", \"2019-11-13T00:00:00-05:00\", \"2019-11-14T00:00:00-05:00\", \"2019-11-15T00:00:00-05:00\", \"2019-11-16T00:00:00-05:00\", \"2019-11-17T00:00:00-05:00\", \"2019-11-18T00:00:00-05:00\", \"2019-11-19T00:00:00-05:00\", \"2019-11-20T00:00:00-05:00\", \"2019-11-21T00:00:00-05:00\", \"2019-11-22T00:00:00-05:00\", \"2019-11-23T00:00:00-05:00\", \"2019-11-24T00:00:00-05:00\", \"2019-11-25T00:00:00-05:00\", \"2019-11-26T00:00:00-05:00\", \"2019-11-27T00:00:00-05:00\", \"2019-11-28T00:00:00-05:00\", \"2019-11-29T00:00:00-05:00\", \"2019-11-30T00:00:00-05:00\", \"2019-12-01T00:00:00-05:00\", \"2019-12-02T00:00:00-05:00\", \"2019-12-03T00:00:00-05:00\", \"2019-12-04T00:00:00-05:00\", \"2019-12-05T00:00:00-05:00\", \"2019-12-06T00:00:00-05:00\", \"2019-12-07T00:00:00-05:00\", \"2019-12-08T00:00:00-05:00\", \"2019-12-09T00:00:00-05:00\", \"2019-12-10T00:00:00-05:00\", \"2019-12-11T00:00:00-05:00\", \"2019-12-12T00:00:00-05:00\", \"2019-12-13T00:00:00-05:00\", \"2019-12-14T00:00:00-05:00\", \"2019-12-15T00:00:00-05:00\", \"2019-12-16T00:00:00-05:00\", \"2019-12-17T00:00:00-05:00\", \"2019-12-18T00:00:00-05:00\", \"2019-12-19T00:00:00-05:00\", \"2019-12-20T00:00:00-05:00\", \"2019-12-21T00:00:00-05:00\", \"2019-12-22T00:00:00-05:00\", \"2019-12-23T00:00:00-05:00\", \"2019-12-24T00:00:00-05:00\", \"2019-12-25T00:00:00-05:00\", \"2019-12-26T00:00:00-05:00\", \"2019-12-27T00:00:00-05:00\", \"2019-12-28T00:00:00-05:00\", \"2019-12-29T00:00:00-05:00\", \"2019-12-30T00:00:00-05:00\", \"2019-12-31T00:00:00-05:00\", \"2020-01-01T00:00:00-05:00\", \"2020-01-02T00:00:00-05:00\", \"2020-01-03T00:00:00-05:00\", \"2020-01-04T00:00:00-05:00\", \"2020-01-05T00:00:00-05:00\", \"2020-01-06T00:00:00-05:00\", \"2020-01-07T00:00:00-05:00\", \"2020-01-08T00:00:00-05:00\", \"2020-01-09T00:00:00-05:00\", \"2020-01-10T00:00:00-05:00\", \"2020-01-11T00:00:00-05:00\", \"2020-01-12T00:00:00-05:00\", \"2020-01-13T00:00:00-05:00\", \"2020-01-14T00:00:00-05:00\", \"2020-01-15T00:00:00-05:00\", \"2020-01-16T00:00:00-05:00\", \"2020-01-17T00:00:00-05:00\", \"2020-01-18T00:00:00-05:00\", \"2020-01-19T00:00:00-05:00\", \"2020-01-20T00:00:00-05:00\", \"2020-01-21T00:00:00-05:00\", \"2020-01-22T00:00:00-05:00\", \"2020-01-23T00:00:00-05:00\", \"2020-01-24T00:00:00-05:00\", \"2020-01-25T00:00:00-05:00\", \"2020-01-26T00:00:00-05:00\", \"2020-01-27T00:00:00-05:00\", \"2020-01-28T00:00:00-05:00\", \"2020-01-29T00:00:00-05:00\", \"2020-01-30T00:00:00-05:00\", \"2020-01-31T00:00:00-05:00\", \"2020-02-01T00:00:00-05:00\", \"2020-02-02T00:00:00-05:00\", \"2020-02-03T00:00:00-05:00\", \"2020-02-04T00:00:00-05:00\", \"2020-02-05T00:00:00-05:00\", \"2020-02-06T00:00:00-05:00\", \"2020-02-07T00:00:00-05:00\", \"2020-02-08T00:00:00-05:00\", \"2020-02-09T00:00:00-05:00\", \"2020-02-10T00:00:00-05:00\", \"2020-02-11T00:00:00-05:00\", \"2020-02-12T00:00:00-05:00\", \"2020-02-13T00:00:00-05:00\", \"2020-02-14T00:00:00-05:00\", \"2020-02-15T00:00:00-05:00\", \"2020-02-16T00:00:00-05:00\", \"2020-02-17T00:00:00-05:00\", \"2020-02-18T00:00:00-05:00\", \"2020-02-19T00:00:00-05:00\", \"2020-02-20T00:00:00-05:00\", \"2020-02-21T00:00:00-05:00\", \"2020-02-22T00:00:00-05:00\", \"2020-02-23T00:00:00-05:00\", \"2020-02-24T00:00:00-05:00\", \"2020-02-25T00:00:00-05:00\", \"2020-02-26T00:00:00-05:00\", \"2020-02-27T00:00:00-05:00\", \"2020-02-28T00:00:00-05:00\", \"2020-02-29T00:00:00-05:00\", \"2020-03-01T00:00:00-05:00\", \"2020-03-02T00:00:00-05:00\", \"2020-03-03T00:00:00-05:00\", \"2020-03-04T00:00:00-05:00\", \"2020-03-05T00:00:00-05:00\", \"2020-03-06T00:00:00-05:00\", \"2020-03-07T00:00:00-05:00\", \"2020-03-08T00:00:00-05:00\", \"2020-03-09T00:00:00-04:00\", \"2020-03-10T00:00:00-04:00\", \"2020-03-11T00:00:00-04:00\", \"2020-03-12T00:00:00-04:00\", \"2020-03-13T00:00:00-04:00\", \"2020-03-14T00:00:00-04:00\"], \"y\": [0.6897222222222222, 3.026111111111111, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1963888888888889, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.511388888888889, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1288888888888888, 0.6422222222222222, 3.241388888888889, 0.0, 0.0, 0.63, 0.18388888888888888, 0.0, 0.0, 0.0, 0.7266666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.5330555555555556, 1.4955555555555555, 0.0, 2.143611111111111, 0.25305555555555553, 1.0597222222222222, 0.0, 0.0, 1.3447222222222222, 1.2586111111111111, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.28444444444444444, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.5888888888888888, 0.0, 0.0, 0.0, 0.0, 0.0, 1.386111111111111, 0.43444444444444447, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.926111111111111, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.8611111111111112, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.756388888888889, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0055555555555555, 0.5136111111111111, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0930555555555554, 0.0, 0.0, 1.3972222222222221, 0.0, 0.0, 4.253611111111111, 3.097777777777778, 0.6669444444444445, 1.4416666666666667, 4.195555555555556, 4.3180555555555555, 7.589722222222222, 3.9363888888888887, 1.8019444444444443, 5.110277777777778, 6.115277777777778, 3.311111111111111, 1.5955555555555556, 0.0, 2.5694444444444446, 2.120833333333333, 1.8552777777777778, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.043333333333333335, 0.0, 0.23527777777777778, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006388888888888889, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.5991666666666666]}], {\"hovermode\": \"x\", \"margin\": {\"pad\": 0}, \"template\": {\"data\": {\"bar\": [{\"error_x\": {\"color\": \"#2a3f5f\"}, \"error_y\": {\"color\": \"#2a3f5f\"}, \"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"bar\"}], \"barpolar\": [{\"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"barpolar\"}], \"carpet\": [{\"aaxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"baxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"type\": \"carpet\"}], \"choropleth\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"choropleth\"}], \"contour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"contour\"}], \"contourcarpet\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"contourcarpet\"}], \"heatmap\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmap\"}], \"heatmapgl\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmapgl\"}], \"histogram\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"histogram\"}], \"histogram2d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2d\"}], \"histogram2dcontour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2dcontour\"}], \"mesh3d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"mesh3d\"}], \"parcoords\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"parcoords\"}], \"pie\": [{\"automargin\": true, \"type\": \"pie\"}], \"scatter\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter\"}], \"scatter3d\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter3d\"}], \"scattercarpet\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattercarpet\"}], \"scattergeo\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergeo\"}], \"scattergl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergl\"}], \"scattermapbox\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattermapbox\"}], \"scatterpolar\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolar\"}], \"scatterpolargl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolargl\"}], \"scatterternary\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterternary\"}], \"surface\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"surface\"}], \"table\": [{\"cells\": {\"fill\": {\"color\": \"#EBF0F8\"}, \"line\": {\"color\": \"white\"}}, \"header\": {\"fill\": {\"color\": \"#C8D4E3\"}, \"line\": {\"color\": \"white\"}}, \"type\": \"table\"}]}, \"layout\": {\"annotationdefaults\": {\"arrowcolor\": \"#2a3f5f\", \"arrowhead\": 0, \"arrowwidth\": 1}, \"coloraxis\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"colorscale\": {\"diverging\": [[0, \"#8e0152\"], [0.1, \"#c51b7d\"], [0.2, \"#de77ae\"], [0.3, \"#f1b6da\"], [0.4, \"#fde0ef\"], [0.5, \"#f7f7f7\"], [0.6, \"#e6f5d0\"], [0.7, \"#b8e186\"], [0.8, \"#7fbc41\"], [0.9, \"#4d9221\"], [1, \"#276419\"]], \"sequential\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"sequentialminus\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]]}, \"colorway\": [\"#636efa\", \"#EF553B\", \"#00cc96\", \"#ab63fa\", \"#FFA15A\", \"#19d3f3\", \"#FF6692\", \"#B6E880\", \"#FF97FF\", \"#FECB52\"], \"font\": {\"color\": \"#2a3f5f\"}, \"geo\": {\"bgcolor\": \"white\", \"lakecolor\": \"white\", \"landcolor\": \"#E5ECF6\", \"showlakes\": true, \"showland\": true, \"subunitcolor\": \"white\"}, \"hoverlabel\": {\"align\": \"left\"}, \"hovermode\": \"closest\", \"mapbox\": {\"style\": \"light\"}, \"paper_bgcolor\": \"white\", \"plot_bgcolor\": \"#E5ECF6\", \"polar\": {\"angularaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"radialaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"scene\": {\"xaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"yaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"zaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}}, \"shapedefaults\": {\"line\": {\"color\": \"#2a3f5f\"}}, \"ternary\": {\"aaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"baxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"caxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"title\": {\"x\": 0.05}, \"xaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}, \"yaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}}}, \"title\": {\"text\": \"total hours commited: 93.35\"}, \"yaxis\": {\"title\": {\"text\": \"hours per 1 d\"}}}, {\"responsive\": true} ) };","title":"Visualization"},{"location":"Compensation.html","text":"Compensation # Hourly can be configured to assign developers' compensation on an indvidual basis: compensation : - name : Satoshi Nakamoto email : satoshi@vistomail.com wage : 75 currency : BTC pubkey : <pubkey> Note Hourly does not yet support public key signatures, but developers could include a signature in invoice.itemDesc This has some interesting consequences, depending on who authors the configuration! Market signaling through compensation # compensation details can be made public by committing hourly.yaml to the master branch of your git repo. This implies that the listed developers may issue invoices for that repo and might be compensated according to the specified wage. So, if a developer is in high demand, there could be a bidding war between projects to attract that developer's attention. Conversely, setting your own compensation is an indication of the rates you're offering (and in what currencies). This represents the supply side of a fully decentralized labor market, where \"order matching\" could be done through email! Market signaling through time # Suppose there is no compensation set in the project's hourly.yaml (or you are not a listed developer). There is still a benefit to using hourly: your contributions to open source projects can be measured in hours , thereby demonstrating the value of your time. Note Developers could still issue invoices for any amount, but there is no expectation that maintainers would pay (at least not publicly).","title":"Compensation"},{"location":"Compensation.html#compensation","text":"Hourly can be configured to assign developers' compensation on an indvidual basis: compensation : - name : Satoshi Nakamoto email : satoshi@vistomail.com wage : 75 currency : BTC pubkey : <pubkey> Note Hourly does not yet support public key signatures, but developers could include a signature in invoice.itemDesc This has some interesting consequences, depending on who authors the configuration!","title":"Compensation"},{"location":"Compensation.html#market-signaling-through-compensation","text":"compensation details can be made public by committing hourly.yaml to the master branch of your git repo. This implies that the listed developers may issue invoices for that repo and might be compensated according to the specified wage. So, if a developer is in high demand, there could be a bidding war between projects to attract that developer's attention. Conversely, setting your own compensation is an indication of the rates you're offering (and in what currencies). This represents the supply side of a fully decentralized labor market, where \"order matching\" could be done through email!","title":"Market signaling through compensation"},{"location":"Compensation.html#market-signaling-through-time","text":"Suppose there is no compensation set in the project's hourly.yaml (or you are not a listed developer). There is still a benefit to using hourly: your contributions to open source projects can be measured in hours , thereby demonstrating the value of your time. Note Developers could still issue invoices for any amount, but there is no expectation that maintainers would pay (at least not publicly).","title":"Market signaling through time"},{"location":"FAQ.html","text":"Frequently Asked Questions # Why do I need hourly to clock-in/out instead of git commit -m 'clock-in'? # That's actually how work on hourly began - I started adding clock-in/out to my git messages and figured I would eventually generate timesheets based on that. However, doing it manually is a hastle and mistakes will be made! When you use hourly-in , hourly first checks that you are not already clocked in (by checking the current git users's commit history). If you are already clocked in, hourly will tell you when you last clocked in and exit before a problematic commit is generated. This works similarly when you clock out. What happens if I forgot to clock-in/out for the day? # Everyone makes mistakes. If you forgot to clock out 12 hours and 30 minutes ago, then just clock out now: hourly-out commit.tminus=12h30m . This will generate the following commit message: clock-out: T-12h30m Later on, when hourly generates a timesheet, it will automatically adjust the clock-out time to be 12.5 hours into the past. Why can't I clock-in/out sometime in the future? # While it's easy to forget to do something, it's hard to predict when something will happen. I couldn't think of a reason to support such a feature, so I haven't. Can't I just pretend to have worked when I really did nothing? # Hourly assumes honesty, so it doesn't know if you're being productive. However, hourly also makes it easy to see what code you committed while you were clocked in. Even if you don't commit code, it's a good idea to update the work log with details on how you spend your time. With hourly, honesty is the best policy. My organization won't let me install any crypto-related software. Can I still use hourly? # Yes! btcpay-python is the only crypto-related package, and it's only imported when you issue a BTCPay invoice. How does Hourly handle branching? Will Hourly mess with my git-flow? # By default, Hourly's operations are only applied to branch you have checked out. However, we plan to support multi-branch and multi-repo operations!","title":"FAQ"},{"location":"FAQ.html#frequently-asked-questions","text":"","title":"Frequently Asked Questions"},{"location":"FAQ.html#why-do-i-need-hourly-to-clock-inout-instead-of-git-commit-m-clock-in","text":"That's actually how work on hourly began - I started adding clock-in/out to my git messages and figured I would eventually generate timesheets based on that. However, doing it manually is a hastle and mistakes will be made! When you use hourly-in , hourly first checks that you are not already clocked in (by checking the current git users's commit history). If you are already clocked in, hourly will tell you when you last clocked in and exit before a problematic commit is generated. This works similarly when you clock out.","title":"Why do I need hourly to clock-in/out instead of git commit -m 'clock-in'?"},{"location":"FAQ.html#what-happens-if-i-forgot-to-clock-inout-for-the-day","text":"Everyone makes mistakes. If you forgot to clock out 12 hours and 30 minutes ago, then just clock out now: hourly-out commit.tminus=12h30m . This will generate the following commit message: clock-out: T-12h30m Later on, when hourly generates a timesheet, it will automatically adjust the clock-out time to be 12.5 hours into the past.","title":"What happens if I forgot to clock-in/out for the day?"},{"location":"FAQ.html#why-cant-i-clock-inout-sometime-in-the-future","text":"While it's easy to forget to do something, it's hard to predict when something will happen. I couldn't think of a reason to support such a feature, so I haven't.","title":"Why can't I clock-in/out sometime in the future?"},{"location":"FAQ.html#cant-i-just-pretend-to-have-worked-when-i-really-did-nothing","text":"Hourly assumes honesty, so it doesn't know if you're being productive. However, hourly also makes it easy to see what code you committed while you were clocked in. Even if you don't commit code, it's a good idea to update the work log with details on how you spend your time. With hourly, honesty is the best policy.","title":"Can't I just pretend to have worked when I really did nothing?"},{"location":"FAQ.html#my-organization-wont-let-me-install-any-crypto-related-software-can-i-still-use-hourly","text":"Yes! btcpay-python is the only crypto-related package, and it's only imported when you issue a BTCPay invoice.","title":"My organization won't let me install any crypto-related software. Can I still use hourly?"},{"location":"FAQ.html#how-does-hourly-handle-branching-will-hourly-mess-with-my-git-flow","text":"By default, Hourly's operations are only applied to branch you have checked out. However, we plan to support multi-branch and multi-repo operations!","title":"How does Hourly handle branching? Will Hourly mess with my git-flow?"},{"location":"Payments.html","text":"Payments # With hourly, issuing invoices is a breeze. To issue a stripe invoice: hourly-report invoice=stripe stripe.customer.email=myclient@momandpop.com See the Instructions for configuring hourly for Stripe . To issue a BTCPay invoice connected to your BTCPay Server: hourly-report invoice=btcpay See the Instructions for configuring hourly with a BTCPay server . Currently, only BTCPay and Stripe are supported. If you are interested in adding support for other invoicing platforms, issue a pull request. If you want to sponsor development for an hourly feature, contact Asher . Stripe # Stripe is a popular global payment processing platform for credit cards. They have an invoice API that allows hourly to issue invoices on your behalf in a single command: hourly-report invoice=stripe stripe.customer.email=my.client@momandpop.com Stripe Setup # Step 1 - install the stripe python api: # pip install --upgrade stripe Step 2 - Create a stripe account # You will need an account at Stripe . Be sure to follow the steps for a developer looking to handle one-time payments. You should also set up your invoice template settings . Step 3 - Set environment variables # From the Stripe dashboard : copy the Secret key and set it as an environment variable STRIPE_API_SECRET_KEY You can also paste in the Secret key later as a command-line argument argument to hourly: stripe.secret_key=<your stripe secret key> Warning You will probably want to use your test_ API keys first! Hourly Configuration # Hourly provides the following default configuration for stripe invoices: invoice : # see https://stripe.com/docs/billing/invoices/create-invoice#python stripe : secret_key : ${env:STRIPE_API_SECRET_KEY} customer : name : null email : null description : null customer_id : null # skips customer creation if set invoice_item : customer : # overridden by customer_id amount : # overrides earnings currency : # overrides compensation currency description : # overrides <hours worked> from repo.start_date to repo.end_date invoice : customer : # overridden by customer_id collection_method : send_invoice days_until_due : 30 auto_advance : True # auto-finalize this draft after ~1 hour. footer : Time sheet generated by hourly send_invoice : true # sends invoice to customer.email immediately return_status : false logging : 40 # https://docs.python.org/3/library/logging.html#logging-level The following fields are subsets of stripe's own API, which has additional fields you can use: invoice_item customer invoice Any of the defaults can be overridden, either at command line or by your project's configuration override . However, stripe.customer.email is a required field. Generating Stripe invoices # To generate a stripe invoice for your repo, you will need to specify an email address. Hourly will prepare an invoice and ask for confirmation. Here is an example of what that looks like when I run hourly on the hourly repo: hourly-report invoice=stripe repo.start_date=\"Jan 1, 2020\" stripe.customer.email=apembroke+hourly@gmail.com\" 1 days 04:02:14, 28.04 hours worked 2803.72 USD Generating stripe invoice for Asher Pembroke creating new customer new customer_id: cus_GVy3BWS792lu4D customer: description: null email: apembroke+hourly@gmail.com name: null customer_id: cus_GVy3BWS792lu4D invoice: auto_advance: false collection_method: send_invoice customer: cus_GVy3BWS792lu4D days_until_due: 30 footer: Time sheet generated by hourly invoice_item: amount: 280373 currency: usd customer: cus_GVy3BWS792lu4D description: 28.04 hours worked from 2020-01-03T18:44:04-05:00 to 2020-01-09T02:04:18-05:00 logging: 40 return_status: false secret_key: ${env:STRIPE_API_SECRET_KEY} send_invoice: true Is this correct? (yes/n): yes Success! Invoice will be sent to apembroke+hourly@gmail.com Invoice may be paid at https://pay.stripe.com/invoice/<---- redacted -----> View your invoice at https://dashboard.stripe.com Note I have redacted actual payment URL The recipient should get an email from stripe to pay by credit card. You can test credit card payment using one of their testing cards . Meanwhile, visiting the url should show you a page like this: BTCPay # Background # BTCPay is a decentralized payment processing platform for accepting cryptocurrency. With BTCpay integration, you can issue invoices and receive crypto payments with maximum privacy and minimal cost. You can use a third-party provider or host it yourself - the only difference will be the domain name used to create the local client. Setup # First you will need to register and create a store on a BTCPay server . There are a few free ones listed on btcpayserver.org , but please use caution when choosing a free service, as there are privacy trade-offs to consider. For maximum privacy and security, host one yourself. Once you've chosen a server, connect a bitcoin wallet to your new store. This can be done in your store's general settings, under Derivation Scheme , where you provide your wallet's xpubkey - BTCPay Server uses this key to generate a unique payment address for every invoice issued. Warning A legitimate BTCPay Server should only ask for your wallet's xpubkey and NEVER YOUR PRIVATE KEY Info BTCPay also supports Lightning invoices, which allows for instant settlement. This involves some tradeoffs in security and availability. Then you will need to install the btcpay-python client pip install btcpay-python Pairing with BTCPay server # Follow these pairing instructions from the kind BTCPay developers. Note These instructions correspond to \"The manual way\" - we want to be able to create a btcpay client on-demand without storing it in a database. I'm essentially repeating their instructions below: Step 1 - Get a pairing code # On your BTCPay server, browse to Stores > Store settings > Access tokens > Create new token Fill in the form: Label: Public key: leave blank Click save and then copy the 7 digit pairing_code from the success page Step 2 - Generate a private key # This can be done with the following code: from btcpay import crypto privkey = crypto . generate_privkey () with open ( 'btcpayserver.pem' , 'w' ) as pem : pem . write ( privkey ) Here we store the private key in a PEM file. By default, hourly will look for btcpayserver.pem in the top level of your git repo, but you can use a different name. Warning Do not add the pem file to your git repo! List it in your .gitignore so you don't do so by accident. Step 3 - Create a client # Create a client using host url of your btcpayserver (e.g. https://btc.exitpay.org) and private key: client = BTCPayClient ( host = host_url , pem = privkey ) Store your server's host url in the environment variable BTCPAYSERVER_HOST . Step 4 - Generate a pairing token # using the pairing code from Step 1 token = client . pair_client ( pairing_code ) merchant_token = token [ 'merchant' ] Save the merchant_token as an environment variable BTCPAYSERVER_MERCHANT Step 5 - Recreate the client # Whenever you like: client = BTCPayClient ( host = host_store , pem = privkey , tokens = token , ) Step 6 - Generate a test invoice # Assuming you have completed the steps to connect a wallet to your btcpayserver, you should be able to run the following code to generate an invoice. new_invoice = client . create_invoice ({ \"price\" : 20 , \"currency\" : \"USD\" }) print ( new_invoice [ 'url' ]) This should give you a payment url you can email to your client/employer. Depending on how you set up your BTCPay Server, the invoice will only be valid for a short period of time (default is 15 minutes). There is a trade-off here: a short time period mitigates the risk of currency fluctuation, but requires that the client/employer must act quickly to pay the invoice. Hourly configuration # Hourly creates a BTCPayClient through the following configuration: # for invoice spec, see https://bitpay.com/api/#rest-api-resources-invoices invoice : btcpay : host : ${env:BTCPAYSERVER_HOST} tokens : merchant : ${env:BTCPAYSERVER_MERCHANT} pem : btcpayserver.pem # file holding btcpayserver private key return_status : false invoice : currency : null # will be honored if set price : null # will be honored if set, else determined by wage orderId : null fullNotifications : True extendedNotifications : True transactionSpeed : medium notificationURL : null # https://mywebhook.com notificationEmail : null # myemail@email.com redirectURL : null # https://yourredirecturl.com buyer : email : null # fox.mulder@trustno.one name : null # Fox Mulder phone : null # 555-123-456 address1 : null # 2630 Hegal Place address2 : null # Apt 42 locality : null # Alexandria region : # VA postalCode : # 23242 country : # US notify : True itemDesc : null # will be honored if set, else hourly will provide This allows hourly to access your environment variables and the pem file you created above. Any of these parameters can be overridden when you run hourly. Here are some examples. hourly-report invoice=btcpay btcpay.pem=<private key> hourly-report invoice=btcpay btcpay.pem=/path/to/other/btcpayserver.pem hourly-report invoice=btcpay btcpay.host=https://myprivateserver.com Hourly Invoicing # If you configured hourly with BTCPay, you can generate an invoice for your git repo in a given date range. Here is what that looks like when applied to the hourly repo: hourly-report invoice=btcpay payment=btcpay repo.start_date=\"Jan 1, 2020\" repo.end_date=\"Jan 6, 2020\" Processing timesheet for Asher Pembroke pay period: 2020-01-03 18:44:04-05:00 -> 2020-01-05 18:34:41-05:00 ignoring pro bono TimeIn LogIn email TimeOut LogOut email TimeDelta Hours 0 2020-01-03 18:44:04-05:00 clock-in apembroke@gmail.com 2020-01-03 20:31:57-05:00 clock-out apembroke@gmail.com 01:47:53 1.798056 1 2020-01-03 20:45:54-05:00 clock-in apembroke@gmail.com 2020-01-03 22:40:56-05:00 clock-out apembroke@gmail.com 01:55:02 1.917222 2 2020-01-04 13:16:11-05:00 clock-in apembroke@gmail.com 2020-01-04 14:01:43-05:00 clock-out apembroke@gmail.com 00:45:32 0.758889 3 2020-01-04 14:55:18-05:00 clock-in apembroke@gmail.com 2020-01-04 16:35:04-05:00 clock-out apembroke@gmail.com 01:39:46 1.662778 4 2020-01-04 19:56:53-05:00 clock-in apembroke@gmail.com 2020-01-04 21:06:20-05:00 clock-out apembroke@gmail.com 01:09:27 1.157500 5 2020-01-04 23:59:21-05:00 clock-in apembroke@gmail.com 2020-01-05 03:59:59-05:00 clock-out apembroke@gmail.com 04:00:38 4.010556 6 2020-01-05 16:32:33-05:00 clock-in apembroke@gmail.com 2020-01-05 17:03:22-05:00 clock-out apembroke@gmail.com 00:30:49 0.513611 7 2020-01-05 17:29:01-05:00 clock-in apembroke@gmail.com 2020-01-05 18:34:41-05:00 clock-out apembroke@gmail.com 01:05:40 1.094444 0 days 12:54:47, 12.91 hours worked 1291.31 USD generating invoice for current user Asher Pembroke buyer: address1: null address2: null country: null email: null locality: null name: null notify: true phone: null postalCode: null region: null currency: USD extendedNotifications: true fullNotifications: true itemDesc: 12.91 hours worked from 2020-01-03T18:44:04-05:00 to 2020-01-05T18:34:41-05:00 notificationEmail: null notificationURL: null orderId: null price: 1291.3055555555554 redirectURL: null transactionSpeed: medium Is this correct? (yes/n)yes Success! Your invoice may be paid here: https://btc.exitpay.org/invoice?id=MoSbFujB7AwcrvfMN21gGC Navigate to the payment url provided:","title":"Invoicing"},{"location":"Payments.html#payments","text":"With hourly, issuing invoices is a breeze. To issue a stripe invoice: hourly-report invoice=stripe stripe.customer.email=myclient@momandpop.com See the Instructions for configuring hourly for Stripe . To issue a BTCPay invoice connected to your BTCPay Server: hourly-report invoice=btcpay See the Instructions for configuring hourly with a BTCPay server . Currently, only BTCPay and Stripe are supported. If you are interested in adding support for other invoicing platforms, issue a pull request. If you want to sponsor development for an hourly feature, contact Asher .","title":"Payments"},{"location":"Payments.html#stripe","text":"Stripe is a popular global payment processing platform for credit cards. They have an invoice API that allows hourly to issue invoices on your behalf in a single command: hourly-report invoice=stripe stripe.customer.email=my.client@momandpop.com","title":"Stripe"},{"location":"Payments.html#stripe-setup","text":"","title":"Stripe Setup"},{"location":"Payments.html#step-1-install-the-stripe-python-api","text":"pip install --upgrade stripe","title":"Step 1 - install the stripe python api:"},{"location":"Payments.html#step-2-create-a-stripe-account","text":"You will need an account at Stripe . Be sure to follow the steps for a developer looking to handle one-time payments. You should also set up your invoice template settings .","title":"Step 2 - Create a stripe account"},{"location":"Payments.html#step-3-set-environment-variables","text":"From the Stripe dashboard : copy the Secret key and set it as an environment variable STRIPE_API_SECRET_KEY You can also paste in the Secret key later as a command-line argument argument to hourly: stripe.secret_key=<your stripe secret key> Warning You will probably want to use your test_ API keys first!","title":"Step 3 - Set environment variables"},{"location":"Payments.html#hourly-configuration","text":"Hourly provides the following default configuration for stripe invoices: invoice : # see https://stripe.com/docs/billing/invoices/create-invoice#python stripe : secret_key : ${env:STRIPE_API_SECRET_KEY} customer : name : null email : null description : null customer_id : null # skips customer creation if set invoice_item : customer : # overridden by customer_id amount : # overrides earnings currency : # overrides compensation currency description : # overrides <hours worked> from repo.start_date to repo.end_date invoice : customer : # overridden by customer_id collection_method : send_invoice days_until_due : 30 auto_advance : True # auto-finalize this draft after ~1 hour. footer : Time sheet generated by hourly send_invoice : true # sends invoice to customer.email immediately return_status : false logging : 40 # https://docs.python.org/3/library/logging.html#logging-level The following fields are subsets of stripe's own API, which has additional fields you can use: invoice_item customer invoice Any of the defaults can be overridden, either at command line or by your project's configuration override . However, stripe.customer.email is a required field.","title":"Hourly Configuration"},{"location":"Payments.html#generating-stripe-invoices","text":"To generate a stripe invoice for your repo, you will need to specify an email address. Hourly will prepare an invoice and ask for confirmation. Here is an example of what that looks like when I run hourly on the hourly repo: hourly-report invoice=stripe repo.start_date=\"Jan 1, 2020\" stripe.customer.email=apembroke+hourly@gmail.com\" 1 days 04:02:14, 28.04 hours worked 2803.72 USD Generating stripe invoice for Asher Pembroke creating new customer new customer_id: cus_GVy3BWS792lu4D customer: description: null email: apembroke+hourly@gmail.com name: null customer_id: cus_GVy3BWS792lu4D invoice: auto_advance: false collection_method: send_invoice customer: cus_GVy3BWS792lu4D days_until_due: 30 footer: Time sheet generated by hourly invoice_item: amount: 280373 currency: usd customer: cus_GVy3BWS792lu4D description: 28.04 hours worked from 2020-01-03T18:44:04-05:00 to 2020-01-09T02:04:18-05:00 logging: 40 return_status: false secret_key: ${env:STRIPE_API_SECRET_KEY} send_invoice: true Is this correct? (yes/n): yes Success! Invoice will be sent to apembroke+hourly@gmail.com Invoice may be paid at https://pay.stripe.com/invoice/<---- redacted -----> View your invoice at https://dashboard.stripe.com Note I have redacted actual payment URL The recipient should get an email from stripe to pay by credit card. You can test credit card payment using one of their testing cards . Meanwhile, visiting the url should show you a page like this:","title":"Generating Stripe invoices"},{"location":"Payments.html#btcpay","text":"","title":"BTCPay"},{"location":"Payments.html#background","text":"BTCPay is a decentralized payment processing platform for accepting cryptocurrency. With BTCpay integration, you can issue invoices and receive crypto payments with maximum privacy and minimal cost. You can use a third-party provider or host it yourself - the only difference will be the domain name used to create the local client.","title":"Background"},{"location":"Payments.html#setup","text":"First you will need to register and create a store on a BTCPay server . There are a few free ones listed on btcpayserver.org , but please use caution when choosing a free service, as there are privacy trade-offs to consider. For maximum privacy and security, host one yourself. Once you've chosen a server, connect a bitcoin wallet to your new store. This can be done in your store's general settings, under Derivation Scheme , where you provide your wallet's xpubkey - BTCPay Server uses this key to generate a unique payment address for every invoice issued. Warning A legitimate BTCPay Server should only ask for your wallet's xpubkey and NEVER YOUR PRIVATE KEY Info BTCPay also supports Lightning invoices, which allows for instant settlement. This involves some tradeoffs in security and availability. Then you will need to install the btcpay-python client pip install btcpay-python","title":"Setup"},{"location":"Payments.html#pairing-with-btcpay-server","text":"Follow these pairing instructions from the kind BTCPay developers. Note These instructions correspond to \"The manual way\" - we want to be able to create a btcpay client on-demand without storing it in a database. I'm essentially repeating their instructions below:","title":"Pairing with BTCPay server"},{"location":"Payments.html#step-1-get-a-pairing-code","text":"On your BTCPay server, browse to Stores > Store settings > Access tokens > Create new token Fill in the form: Label: Public key: leave blank Click save and then copy the 7 digit pairing_code from the success page","title":"Step 1 - Get a pairing code"},{"location":"Payments.html#step-2-generate-a-private-key","text":"This can be done with the following code: from btcpay import crypto privkey = crypto . generate_privkey () with open ( 'btcpayserver.pem' , 'w' ) as pem : pem . write ( privkey ) Here we store the private key in a PEM file. By default, hourly will look for btcpayserver.pem in the top level of your git repo, but you can use a different name. Warning Do not add the pem file to your git repo! List it in your .gitignore so you don't do so by accident.","title":"Step 2 - Generate a private key"},{"location":"Payments.html#step-3-create-a-client","text":"Create a client using host url of your btcpayserver (e.g. https://btc.exitpay.org) and private key: client = BTCPayClient ( host = host_url , pem = privkey ) Store your server's host url in the environment variable BTCPAYSERVER_HOST .","title":"Step 3 - Create a client"},{"location":"Payments.html#step-4-generate-a-pairing-token","text":"using the pairing code from Step 1 token = client . pair_client ( pairing_code ) merchant_token = token [ 'merchant' ] Save the merchant_token as an environment variable BTCPAYSERVER_MERCHANT","title":"Step 4 - Generate a pairing token"},{"location":"Payments.html#step-5-recreate-the-client","text":"Whenever you like: client = BTCPayClient ( host = host_store , pem = privkey , tokens = token , )","title":"Step 5 - Recreate the client"},{"location":"Payments.html#step-6-generate-a-test-invoice","text":"Assuming you have completed the steps to connect a wallet to your btcpayserver, you should be able to run the following code to generate an invoice. new_invoice = client . create_invoice ({ \"price\" : 20 , \"currency\" : \"USD\" }) print ( new_invoice [ 'url' ]) This should give you a payment url you can email to your client/employer. Depending on how you set up your BTCPay Server, the invoice will only be valid for a short period of time (default is 15 minutes). There is a trade-off here: a short time period mitigates the risk of currency fluctuation, but requires that the client/employer must act quickly to pay the invoice.","title":"Step 6 - Generate a test invoice"},{"location":"Payments.html#hourly-configuration_1","text":"Hourly creates a BTCPayClient through the following configuration: # for invoice spec, see https://bitpay.com/api/#rest-api-resources-invoices invoice : btcpay : host : ${env:BTCPAYSERVER_HOST} tokens : merchant : ${env:BTCPAYSERVER_MERCHANT} pem : btcpayserver.pem # file holding btcpayserver private key return_status : false invoice : currency : null # will be honored if set price : null # will be honored if set, else determined by wage orderId : null fullNotifications : True extendedNotifications : True transactionSpeed : medium notificationURL : null # https://mywebhook.com notificationEmail : null # myemail@email.com redirectURL : null # https://yourredirecturl.com buyer : email : null # fox.mulder@trustno.one name : null # Fox Mulder phone : null # 555-123-456 address1 : null # 2630 Hegal Place address2 : null # Apt 42 locality : null # Alexandria region : # VA postalCode : # 23242 country : # US notify : True itemDesc : null # will be honored if set, else hourly will provide This allows hourly to access your environment variables and the pem file you created above. Any of these parameters can be overridden when you run hourly. Here are some examples. hourly-report invoice=btcpay btcpay.pem=<private key> hourly-report invoice=btcpay btcpay.pem=/path/to/other/btcpayserver.pem hourly-report invoice=btcpay btcpay.host=https://myprivateserver.com","title":"Hourly configuration"},{"location":"Payments.html#hourly-invoicing","text":"If you configured hourly with BTCPay, you can generate an invoice for your git repo in a given date range. Here is what that looks like when applied to the hourly repo: hourly-report invoice=btcpay payment=btcpay repo.start_date=\"Jan 1, 2020\" repo.end_date=\"Jan 6, 2020\" Processing timesheet for Asher Pembroke pay period: 2020-01-03 18:44:04-05:00 -> 2020-01-05 18:34:41-05:00 ignoring pro bono TimeIn LogIn email TimeOut LogOut email TimeDelta Hours 0 2020-01-03 18:44:04-05:00 clock-in apembroke@gmail.com 2020-01-03 20:31:57-05:00 clock-out apembroke@gmail.com 01:47:53 1.798056 1 2020-01-03 20:45:54-05:00 clock-in apembroke@gmail.com 2020-01-03 22:40:56-05:00 clock-out apembroke@gmail.com 01:55:02 1.917222 2 2020-01-04 13:16:11-05:00 clock-in apembroke@gmail.com 2020-01-04 14:01:43-05:00 clock-out apembroke@gmail.com 00:45:32 0.758889 3 2020-01-04 14:55:18-05:00 clock-in apembroke@gmail.com 2020-01-04 16:35:04-05:00 clock-out apembroke@gmail.com 01:39:46 1.662778 4 2020-01-04 19:56:53-05:00 clock-in apembroke@gmail.com 2020-01-04 21:06:20-05:00 clock-out apembroke@gmail.com 01:09:27 1.157500 5 2020-01-04 23:59:21-05:00 clock-in apembroke@gmail.com 2020-01-05 03:59:59-05:00 clock-out apembroke@gmail.com 04:00:38 4.010556 6 2020-01-05 16:32:33-05:00 clock-in apembroke@gmail.com 2020-01-05 17:03:22-05:00 clock-out apembroke@gmail.com 00:30:49 0.513611 7 2020-01-05 17:29:01-05:00 clock-in apembroke@gmail.com 2020-01-05 18:34:41-05:00 clock-out apembroke@gmail.com 01:05:40 1.094444 0 days 12:54:47, 12.91 hours worked 1291.31 USD generating invoice for current user Asher Pembroke buyer: address1: null address2: null country: null email: null locality: null name: null notify: true phone: null postalCode: null region: null currency: USD extendedNotifications: true fullNotifications: true itemDesc: 12.91 hours worked from 2020-01-03T18:44:04-05:00 to 2020-01-05T18:34:41-05:00 notificationEmail: null notificationURL: null orderId: null price: 1291.3055555555554 redirectURL: null transactionSpeed: medium Is this correct? (yes/n)yes Success! Your invoice may be paid here: https://btc.exitpay.org/invoice?id=MoSbFujB7AwcrvfMN21gGC Navigate to the payment url provided:","title":"Hourly Invoicing"},{"location":"WorkLog.html","text":"WorkLog.md # The hourly command line utility will update the top-level WorkLog.md file when you clock in/out of a project, inserting a clock in/out header with the current time stamp at the top of the file. This file may be edited to add details about the current work session. The WorkLog.md file serves a dual purpose: It provides a human-readable account of work session details It ensures there is always a file to commit against This way work sessions can be documented even if there are no committed code changes. Collaborative Development # While simple and convenient for solo projects, there may be merge conflicts if multiple people are updating the same WorkLog. There are at least two ways to work around this: Use the work_log.filename option to specify an alternate log file (e.g. MyWorkLog.md ) in which to store your session details. Delete your WorkLog.md before merging. Hourly can still generate a timesheet even if the WorkLog.md is missing. Note Git keeps the history of your branch's WorkLog after deletion. Recover with git log --all --full-history -- \"**/WorkLog.*\" MkDocs # Currently, the WorkLog is assumed to be in the top level directory of the git project. In order to include work commits in your site's documentation, create a docs/WorkLog.md file containing the following line: {! WorkLog.md !} Then update mkdocs.yaml : nav : - WorkLog.md : WorkLog.md markdown_extensions : - markdown_include.include For example, we can use this method to insert this site's work session details below. Hourly's WorkLog # if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});} window.PlotlyConfig = {MathJaxConfig: 'local'}; window.PLOTLYENV=window.PLOTLYENV || {}; if (document.getElementById(\"c2bd69b2-a42c-4ec6-82cf-b89c12ab1817\")) { Plotly.newPlot( 'c2bd69b2-a42c-4ec6-82cf-b89c12ab1817', [{\"mode\": \"lines\", \"name\": \"apembroke@gmail.com\", \"stackgroup\": \"one\", \"text\": [\"0 days 00:41:23\", \"0 days 03:01:34\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:11:47\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 02:30:41\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 01:07:44\", \"0 days 00:38:32\", \"0 days 03:14:29\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:37:48\", \"0 days 00:11:02\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:43:36\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 01:31:59\", \"0 days 01:29:44\", \"0 days 00:00:00\", \"0 days 02:08:37\", \"0 days 00:15:11\", \"0 days 01:03:35\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 01:20:41\", \"0 days 01:15:31\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:17:04\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 01:10:39\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 01:35:20\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 01:23:10\", \"0 days 00:26:04\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 01:55:34\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:51:40\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 01:45:23\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 02:00:20\", \"0 days 00:30:49\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 02:05:35\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 01:23:50\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 04:15:13\", \"0 days 03:05:52\", \"0 days 00:40:01\", \"0 days 01:26:30\", \"0 days 04:11:44\", \"0 days 04:19:05\", \"0 days 07:35:23\", \"0 days 03:56:11\", \"0 days 01:48:07\", \"0 days 05:06:37\", \"0 days 06:06:55\", \"0 days 03:18:40\", \"0 days 01:35:44\", \"0 days 00:00:00\", \"0 days 02:34:10\", \"0 days 02:07:15\", \"0 days 01:51:19\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:02:36\", \"0 days 00:00:00\", \"0 days 00:14:07\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:23\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 01:35:57\"], \"type\": \"scatter\", \"x\": [\"2018-10-19T00:00:00-04:00\", \"2018-10-20T00:00:00-04:00\", \"2018-10-21T00:00:00-04:00\", \"2018-10-22T00:00:00-04:00\", \"2018-10-23T00:00:00-04:00\", \"2018-10-24T00:00:00-04:00\", \"2018-10-25T00:00:00-04:00\", \"2018-10-26T00:00:00-04:00\", \"2018-10-27T00:00:00-04:00\", \"2018-10-28T00:00:00-04:00\", \"2018-10-29T00:00:00-04:00\", \"2018-10-30T00:00:00-04:00\", \"2018-10-31T00:00:00-04:00\", \"2018-11-01T00:00:00-04:00\", \"2018-11-02T00:00:00-04:00\", \"2018-11-03T00:00:00-04:00\", \"2018-11-04T00:00:00-04:00\", \"2018-11-05T00:00:00-05:00\", \"2018-11-06T00:00:00-05:00\", \"2018-11-07T00:00:00-05:00\", \"2018-11-08T00:00:00-05:00\", \"2018-11-09T00:00:00-05:00\", \"2018-11-10T00:00:00-05:00\", \"2018-11-11T00:00:00-05:00\", \"2018-11-12T00:00:00-05:00\", \"2018-11-13T00:00:00-05:00\", \"2018-11-14T00:00:00-05:00\", \"2018-11-15T00:00:00-05:00\", \"2018-11-16T00:00:00-05:00\", \"2018-11-17T00:00:00-05:00\", \"2018-11-18T00:00:00-05:00\", \"2018-11-19T00:00:00-05:00\", \"2018-11-20T00:00:00-05:00\", \"2018-11-21T00:00:00-05:00\", \"2018-11-22T00:00:00-05:00\", \"2018-11-23T00:00:00-05:00\", \"2018-11-24T00:00:00-05:00\", \"2018-11-25T00:00:00-05:00\", \"2018-11-26T00:00:00-05:00\", \"2018-11-27T00:00:00-05:00\", \"2018-11-28T00:00:00-05:00\", \"2018-11-29T00:00:00-05:00\", \"2018-11-30T00:00:00-05:00\", \"2018-12-01T00:00:00-05:00\", \"2018-12-02T00:00:00-05:00\", \"2018-12-03T00:00:00-05:00\", \"2018-12-04T00:00:00-05:00\", \"2018-12-05T00:00:00-05:00\", \"2018-12-06T00:00:00-05:00\", \"2018-12-07T00:00:00-05:00\", \"2018-12-08T00:00:00-05:00\", \"2018-12-09T00:00:00-05:00\", \"2018-12-10T00:00:00-05:00\", \"2018-12-11T00:00:00-05:00\", \"2018-12-12T00:00:00-05:00\", \"2018-12-13T00:00:00-05:00\", \"2018-12-14T00:00:00-05:00\", \"2018-12-15T00:00:00-05:00\", \"2018-12-16T00:00:00-05:00\", \"2018-12-17T00:00:00-05:00\", \"2018-12-18T00:00:00-05:00\", \"2018-12-19T00:00:00-05:00\", \"2018-12-20T00:00:00-05:00\", \"2018-12-21T00:00:00-05:00\", \"2018-12-22T00:00:00-05:00\", \"2018-12-23T00:00:00-05:00\", \"2018-12-24T00:00:00-05:00\", \"2018-12-25T00:00:00-05:00\", \"2018-12-26T00:00:00-05:00\", \"2018-12-27T00:00:00-05:00\", \"2018-12-28T00:00:00-05:00\", \"2018-12-29T00:00:00-05:00\", \"2018-12-30T00:00:00-05:00\", \"2018-12-31T00:00:00-05:00\", \"2019-01-01T00:00:00-05:00\", \"2019-01-02T00:00:00-05:00\", \"2019-01-03T00:00:00-05:00\", \"2019-01-04T00:00:00-05:00\", \"2019-01-05T00:00:00-05:00\", \"2019-01-06T00:00:00-05:00\", \"2019-01-07T00:00:00-05:00\", \"2019-01-08T00:00:00-05:00\", \"2019-01-09T00:00:00-05:00\", \"2019-01-10T00:00:00-05:00\", \"2019-01-11T00:00:00-05:00\", \"2019-01-12T00:00:00-05:00\", \"2019-01-13T00:00:00-05:00\", \"2019-01-14T00:00:00-05:00\", \"2019-01-15T00:00:00-05:00\", \"2019-01-16T00:00:00-05:00\", \"2019-01-17T00:00:00-05:00\", \"2019-01-18T00:00:00-05:00\", \"2019-01-19T00:00:00-05:00\", \"2019-01-20T00:00:00-05:00\", \"2019-01-21T00:00:00-05:00\", \"2019-01-22T00:00:00-05:00\", \"2019-01-23T00:00:00-05:00\", \"2019-01-24T00:00:00-05:00\", \"2019-01-25T00:00:00-05:00\", \"2019-01-26T00:00:00-05:00\", \"2019-01-27T00:00:00-05:00\", \"2019-01-28T00:00:00-05:00\", \"2019-01-29T00:00:00-05:00\", \"2019-01-30T00:00:00-05:00\", \"2019-01-31T00:00:00-05:00\", \"2019-02-01T00:00:00-05:00\", \"2019-02-02T00:00:00-05:00\", \"2019-02-03T00:00:00-05:00\", \"2019-02-04T00:00:00-05:00\", \"2019-02-05T00:00:00-05:00\", \"2019-02-06T00:00:00-05:00\", \"2019-02-07T00:00:00-05:00\", \"2019-02-08T00:00:00-05:00\", \"2019-02-09T00:00:00-05:00\", \"2019-02-10T00:00:00-05:00\", \"2019-02-11T00:00:00-05:00\", \"2019-02-12T00:00:00-05:00\", \"2019-02-13T00:00:00-05:00\", \"2019-02-14T00:00:00-05:00\", \"2019-02-15T00:00:00-05:00\", \"2019-02-16T00:00:00-05:00\", \"2019-02-17T00:00:00-05:00\", \"2019-02-18T00:00:00-05:00\", \"2019-02-19T00:00:00-05:00\", \"2019-02-20T00:00:00-05:00\", \"2019-02-21T00:00:00-05:00\", \"2019-02-22T00:00:00-05:00\", \"2019-02-23T00:00:00-05:00\", \"2019-02-24T00:00:00-05:00\", \"2019-02-25T00:00:00-05:00\", \"2019-02-26T00:00:00-05:00\", \"2019-02-27T00:00:00-05:00\", \"2019-02-28T00:00:00-05:00\", \"2019-03-01T00:00:00-05:00\", \"2019-03-02T00:00:00-05:00\", \"2019-03-03T00:00:00-05:00\", \"2019-03-04T00:00:00-05:00\", \"2019-03-05T00:00:00-05:00\", \"2019-03-06T00:00:00-05:00\", \"2019-03-07T00:00:00-05:00\", \"2019-03-08T00:00:00-05:00\", \"2019-03-09T00:00:00-05:00\", \"2019-03-10T00:00:00-05:00\", \"2019-03-11T00:00:00-04:00\", \"2019-03-12T00:00:00-04:00\", \"2019-03-13T00:00:00-04:00\", \"2019-03-14T00:00:00-04:00\", \"2019-03-15T00:00:00-04:00\", \"2019-03-16T00:00:00-04:00\", \"2019-03-17T00:00:00-04:00\", \"2019-03-18T00:00:00-04:00\", \"2019-03-19T00:00:00-04:00\", \"2019-03-20T00:00:00-04:00\", \"2019-03-21T00:00:00-04:00\", \"2019-03-22T00:00:00-04:00\", \"2019-03-23T00:00:00-04:00\", \"2019-03-24T00:00:00-04:00\", \"2019-03-25T00:00:00-04:00\", \"2019-03-26T00:00:00-04:00\", \"2019-03-27T00:00:00-04:00\", \"2019-03-28T00:00:00-04:00\", \"2019-03-29T00:00:00-04:00\", \"2019-03-30T00:00:00-04:00\", \"2019-03-31T00:00:00-04:00\", \"2019-04-01T00:00:00-04:00\", \"2019-04-02T00:00:00-04:00\", \"2019-04-03T00:00:00-04:00\", \"2019-04-04T00:00:00-04:00\", \"2019-04-05T00:00:00-04:00\", \"2019-04-06T00:00:00-04:00\", \"2019-04-07T00:00:00-04:00\", \"2019-04-08T00:00:00-04:00\", \"2019-04-09T00:00:00-04:00\", \"2019-04-10T00:00:00-04:00\", \"2019-04-11T00:00:00-04:00\", \"2019-04-12T00:00:00-04:00\", \"2019-04-13T00:00:00-04:00\", \"2019-04-14T00:00:00-04:00\", \"2019-04-15T00:00:00-04:00\", \"2019-04-16T00:00:00-04:00\", \"2019-04-17T00:00:00-04:00\", \"2019-04-18T00:00:00-04:00\", \"2019-04-19T00:00:00-04:00\", \"2019-04-20T00:00:00-04:00\", \"2019-04-21T00:00:00-04:00\", \"2019-04-22T00:00:00-04:00\", \"2019-04-23T00:00:00-04:00\", \"2019-04-24T00:00:00-04:00\", \"2019-04-25T00:00:00-04:00\", \"2019-04-26T00:00:00-04:00\", \"2019-04-27T00:00:00-04:00\", \"2019-04-28T00:00:00-04:00\", \"2019-04-29T00:00:00-04:00\", \"2019-04-30T00:00:00-04:00\", \"2019-05-01T00:00:00-04:00\", \"2019-05-02T00:00:00-04:00\", \"2019-05-03T00:00:00-04:00\", \"2019-05-04T00:00:00-04:00\", \"2019-05-05T00:00:00-04:00\", \"2019-05-06T00:00:00-04:00\", \"2019-05-07T00:00:00-04:00\", \"2019-05-08T00:00:00-04:00\", \"2019-05-09T00:00:00-04:00\", \"2019-05-10T00:00:00-04:00\", \"2019-05-11T00:00:00-04:00\", \"2019-05-12T00:00:00-04:00\", \"2019-05-13T00:00:00-04:00\", \"2019-05-14T00:00:00-04:00\", \"2019-05-15T00:00:00-04:00\", \"2019-05-16T00:00:00-04:00\", \"2019-05-17T00:00:00-04:00\", \"2019-05-18T00:00:00-04:00\", \"2019-05-19T00:00:00-04:00\", \"2019-05-20T00:00:00-04:00\", \"2019-05-21T00:00:00-04:00\", \"2019-05-22T00:00:00-04:00\", \"2019-05-23T00:00:00-04:00\", \"2019-05-24T00:00:00-04:00\", \"2019-05-25T00:00:00-04:00\", \"2019-05-26T00:00:00-04:00\", \"2019-05-27T00:00:00-04:00\", \"2019-05-28T00:00:00-04:00\", \"2019-05-29T00:00:00-04:00\", \"2019-05-30T00:00:00-04:00\", \"2019-05-31T00:00:00-04:00\", \"2019-06-01T00:00:00-04:00\", \"2019-06-02T00:00:00-04:00\", \"2019-06-03T00:00:00-04:00\", \"2019-06-04T00:00:00-04:00\", \"2019-06-05T00:00:00-04:00\", \"2019-06-06T00:00:00-04:00\", \"2019-06-07T00:00:00-04:00\", \"2019-06-08T00:00:00-04:00\", \"2019-06-09T00:00:00-04:00\", \"2019-06-10T00:00:00-04:00\", \"2019-06-11T00:00:00-04:00\", \"2019-06-12T00:00:00-04:00\", \"2019-06-13T00:00:00-04:00\", \"2019-06-14T00:00:00-04:00\", \"2019-06-15T00:00:00-04:00\", \"2019-06-16T00:00:00-04:00\", \"2019-06-17T00:00:00-04:00\", \"2019-06-18T00:00:00-04:00\", \"2019-06-19T00:00:00-04:00\", \"2019-06-20T00:00:00-04:00\", \"2019-06-21T00:00:00-04:00\", \"2019-06-22T00:00:00-04:00\", \"2019-06-23T00:00:00-04:00\", \"2019-06-24T00:00:00-04:00\", \"2019-06-25T00:00:00-04:00\", \"2019-06-26T00:00:00-04:00\", \"2019-06-27T00:00:00-04:00\", \"2019-06-28T00:00:00-04:00\", \"2019-06-29T00:00:00-04:00\", \"2019-06-30T00:00:00-04:00\", \"2019-07-01T00:00:00-04:00\", \"2019-07-02T00:00:00-04:00\", \"2019-07-03T00:00:00-04:00\", \"2019-07-04T00:00:00-04:00\", \"2019-07-05T00:00:00-04:00\", \"2019-07-06T00:00:00-04:00\", \"2019-07-07T00:00:00-04:00\", \"2019-07-08T00:00:00-04:00\", \"2019-07-09T00:00:00-04:00\", \"2019-07-10T00:00:00-04:00\", \"2019-07-11T00:00:00-04:00\", \"2019-07-12T00:00:00-04:00\", \"2019-07-13T00:00:00-04:00\", \"2019-07-14T00:00:00-04:00\", \"2019-07-15T00:00:00-04:00\", \"2019-07-16T00:00:00-04:00\", \"2019-07-17T00:00:00-04:00\", \"2019-07-18T00:00:00-04:00\", \"2019-07-19T00:00:00-04:00\", \"2019-07-20T00:00:00-04:00\", \"2019-07-21T00:00:00-04:00\", \"2019-07-22T00:00:00-04:00\", \"2019-07-23T00:00:00-04:00\", \"2019-07-24T00:00:00-04:00\", \"2019-07-25T00:00:00-04:00\", \"2019-07-26T00:00:00-04:00\", \"2019-07-27T00:00:00-04:00\", \"2019-07-28T00:00:00-04:00\", \"2019-07-29T00:00:00-04:00\", \"2019-07-30T00:00:00-04:00\", \"2019-07-31T00:00:00-04:00\", \"2019-08-01T00:00:00-04:00\", \"2019-08-02T00:00:00-04:00\", \"2019-08-03T00:00:00-04:00\", \"2019-08-04T00:00:00-04:00\", \"2019-08-05T00:00:00-04:00\", \"2019-08-06T00:00:00-04:00\", \"2019-08-07T00:00:00-04:00\", \"2019-08-08T00:00:00-04:00\", \"2019-08-09T00:00:00-04:00\", \"2019-08-10T00:00:00-04:00\", \"2019-08-11T00:00:00-04:00\", \"2019-08-12T00:00:00-04:00\", \"2019-08-13T00:00:00-04:00\", \"2019-08-14T00:00:00-04:00\", \"2019-08-15T00:00:00-04:00\", \"2019-08-16T00:00:00-04:00\", \"2019-08-17T00:00:00-04:00\", \"2019-08-18T00:00:00-04:00\", \"2019-08-19T00:00:00-04:00\", \"2019-08-20T00:00:00-04:00\", \"2019-08-21T00:00:00-04:00\", \"2019-08-22T00:00:00-04:00\", \"2019-08-23T00:00:00-04:00\", \"2019-08-24T00:00:00-04:00\", \"2019-08-25T00:00:00-04:00\", \"2019-08-26T00:00:00-04:00\", \"2019-08-27T00:00:00-04:00\", \"2019-08-28T00:00:00-04:00\", \"2019-08-29T00:00:00-04:00\", \"2019-08-30T00:00:00-04:00\", \"2019-08-31T00:00:00-04:00\", \"2019-09-01T00:00:00-04:00\", \"2019-09-02T00:00:00-04:00\", \"2019-09-03T00:00:00-04:00\", \"2019-09-04T00:00:00-04:00\", \"2019-09-05T00:00:00-04:00\", \"2019-09-06T00:00:00-04:00\", \"2019-09-07T00:00:00-04:00\", \"2019-09-08T00:00:00-04:00\", \"2019-09-09T00:00:00-04:00\", \"2019-09-10T00:00:00-04:00\", \"2019-09-11T00:00:00-04:00\", \"2019-09-12T00:00:00-04:00\", \"2019-09-13T00:00:00-04:00\", \"2019-09-14T00:00:00-04:00\", \"2019-09-15T00:00:00-04:00\", \"2019-09-16T00:00:00-04:00\", \"2019-09-17T00:00:00-04:00\", \"2019-09-18T00:00:00-04:00\", \"2019-09-19T00:00:00-04:00\", \"2019-09-20T00:00:00-04:00\", \"2019-09-21T00:00:00-04:00\", \"2019-09-22T00:00:00-04:00\", \"2019-09-23T00:00:00-04:00\", \"2019-09-24T00:00:00-04:00\", \"2019-09-25T00:00:00-04:00\", \"2019-09-26T00:00:00-04:00\", \"2019-09-27T00:00:00-04:00\", \"2019-09-28T00:00:00-04:00\", \"2019-09-29T00:00:00-04:00\", \"2019-09-30T00:00:00-04:00\", \"2019-10-01T00:00:00-04:00\", \"2019-10-02T00:00:00-04:00\", \"2019-10-03T00:00:00-04:00\", \"2019-10-04T00:00:00-04:00\", \"2019-10-05T00:00:00-04:00\", \"2019-10-06T00:00:00-04:00\", \"2019-10-07T00:00:00-04:00\", \"2019-10-08T00:00:00-04:00\", \"2019-10-09T00:00:00-04:00\", \"2019-10-10T00:00:00-04:00\", \"2019-10-11T00:00:00-04:00\", \"2019-10-12T00:00:00-04:00\", \"2019-10-13T00:00:00-04:00\", \"2019-10-14T00:00:00-04:00\", \"2019-10-15T00:00:00-04:00\", \"2019-10-16T00:00:00-04:00\", \"2019-10-17T00:00:00-04:00\", \"2019-10-18T00:00:00-04:00\", \"2019-10-19T00:00:00-04:00\", \"2019-10-20T00:00:00-04:00\", \"2019-10-21T00:00:00-04:00\", \"2019-10-22T00:00:00-04:00\", \"2019-10-23T00:00:00-04:00\", \"2019-10-24T00:00:00-04:00\", \"2019-10-25T00:00:00-04:00\", \"2019-10-26T00:00:00-04:00\", \"2019-10-27T00:00:00-04:00\", \"2019-10-28T00:00:00-04:00\", \"2019-10-29T00:00:00-04:00\", \"2019-10-30T00:00:00-04:00\", \"2019-10-31T00:00:00-04:00\", \"2019-11-01T00:00:00-04:00\", \"2019-11-02T00:00:00-04:00\", \"2019-11-03T00:00:00-04:00\", \"2019-11-04T00:00:00-05:00\", \"2019-11-05T00:00:00-05:00\", \"2019-11-06T00:00:00-05:00\", \"2019-11-07T00:00:00-05:00\", \"2019-11-08T00:00:00-05:00\", \"2019-11-09T00:00:00-05:00\", \"2019-11-10T00:00:00-05:00\", \"2019-11-11T00:00:00-05:00\", \"2019-11-12T00:00:00-05:00\", \"2019-11-13T00:00:00-05:00\", \"2019-11-14T00:00:00-05:00\", \"2019-11-15T00:00:00-05:00\", \"2019-11-16T00:00:00-05:00\", \"2019-11-17T00:00:00-05:00\", \"2019-11-18T00:00:00-05:00\", \"2019-11-19T00:00:00-05:00\", \"2019-11-20T00:00:00-05:00\", \"2019-11-21T00:00:00-05:00\", \"2019-11-22T00:00:00-05:00\", \"2019-11-23T00:00:00-05:00\", \"2019-11-24T00:00:00-05:00\", \"2019-11-25T00:00:00-05:00\", \"2019-11-26T00:00:00-05:00\", \"2019-11-27T00:00:00-05:00\", \"2019-11-28T00:00:00-05:00\", \"2019-11-29T00:00:00-05:00\", \"2019-11-30T00:00:00-05:00\", \"2019-12-01T00:00:00-05:00\", \"2019-12-02T00:00:00-05:00\", \"2019-12-03T00:00:00-05:00\", \"2019-12-04T00:00:00-05:00\", \"2019-12-05T00:00:00-05:00\", \"2019-12-06T00:00:00-05:00\", \"2019-12-07T00:00:00-05:00\", \"2019-12-08T00:00:00-05:00\", \"2019-12-09T00:00:00-05:00\", \"2019-12-10T00:00:00-05:00\", \"2019-12-11T00:00:00-05:00\", \"2019-12-12T00:00:00-05:00\", \"2019-12-13T00:00:00-05:00\", \"2019-12-14T00:00:00-05:00\", \"2019-12-15T00:00:00-05:00\", \"2019-12-16T00:00:00-05:00\", \"2019-12-17T00:00:00-05:00\", \"2019-12-18T00:00:00-05:00\", \"2019-12-19T00:00:00-05:00\", \"2019-12-20T00:00:00-05:00\", \"2019-12-21T00:00:00-05:00\", \"2019-12-22T00:00:00-05:00\", \"2019-12-23T00:00:00-05:00\", \"2019-12-24T00:00:00-05:00\", \"2019-12-25T00:00:00-05:00\", \"2019-12-26T00:00:00-05:00\", \"2019-12-27T00:00:00-05:00\", \"2019-12-28T00:00:00-05:00\", \"2019-12-29T00:00:00-05:00\", \"2019-12-30T00:00:00-05:00\", \"2019-12-31T00:00:00-05:00\", \"2020-01-01T00:00:00-05:00\", \"2020-01-02T00:00:00-05:00\", \"2020-01-03T00:00:00-05:00\", \"2020-01-04T00:00:00-05:00\", \"2020-01-05T00:00:00-05:00\", \"2020-01-06T00:00:00-05:00\", \"2020-01-07T00:00:00-05:00\", \"2020-01-08T00:00:00-05:00\", \"2020-01-09T00:00:00-05:00\", \"2020-01-10T00:00:00-05:00\", \"2020-01-11T00:00:00-05:00\", \"2020-01-12T00:00:00-05:00\", \"2020-01-13T00:00:00-05:00\", \"2020-01-14T00:00:00-05:00\", \"2020-01-15T00:00:00-05:00\", \"2020-01-16T00:00:00-05:00\", \"2020-01-17T00:00:00-05:00\", \"2020-01-18T00:00:00-05:00\", \"2020-01-19T00:00:00-05:00\", \"2020-01-20T00:00:00-05:00\", \"2020-01-21T00:00:00-05:00\", \"2020-01-22T00:00:00-05:00\", \"2020-01-23T00:00:00-05:00\", \"2020-01-24T00:00:00-05:00\", \"2020-01-25T00:00:00-05:00\", \"2020-01-26T00:00:00-05:00\", \"2020-01-27T00:00:00-05:00\", \"2020-01-28T00:00:00-05:00\", \"2020-01-29T00:00:00-05:00\", \"2020-01-30T00:00:00-05:00\", \"2020-01-31T00:00:00-05:00\", \"2020-02-01T00:00:00-05:00\", \"2020-02-02T00:00:00-05:00\", \"2020-02-03T00:00:00-05:00\", \"2020-02-04T00:00:00-05:00\", \"2020-02-05T00:00:00-05:00\", \"2020-02-06T00:00:00-05:00\", \"2020-02-07T00:00:00-05:00\", \"2020-02-08T00:00:00-05:00\", \"2020-02-09T00:00:00-05:00\", \"2020-02-10T00:00:00-05:00\", \"2020-02-11T00:00:00-05:00\", \"2020-02-12T00:00:00-05:00\", \"2020-02-13T00:00:00-05:00\", \"2020-02-14T00:00:00-05:00\", \"2020-02-15T00:00:00-05:00\", \"2020-02-16T00:00:00-05:00\", \"2020-02-17T00:00:00-05:00\", \"2020-02-18T00:00:00-05:00\", \"2020-02-19T00:00:00-05:00\", \"2020-02-20T00:00:00-05:00\", \"2020-02-21T00:00:00-05:00\", \"2020-02-22T00:00:00-05:00\", \"2020-02-23T00:00:00-05:00\", \"2020-02-24T00:00:00-05:00\", \"2020-02-25T00:00:00-05:00\", \"2020-02-26T00:00:00-05:00\", \"2020-02-27T00:00:00-05:00\", \"2020-02-28T00:00:00-05:00\", \"2020-02-29T00:00:00-05:00\", \"2020-03-01T00:00:00-05:00\", \"2020-03-02T00:00:00-05:00\", \"2020-03-03T00:00:00-05:00\", \"2020-03-04T00:00:00-05:00\", \"2020-03-05T00:00:00-05:00\", \"2020-03-06T00:00:00-05:00\", \"2020-03-07T00:00:00-05:00\", \"2020-03-08T00:00:00-05:00\", \"2020-03-09T00:00:00-04:00\", \"2020-03-10T00:00:00-04:00\", \"2020-03-11T00:00:00-04:00\", \"2020-03-12T00:00:00-04:00\", \"2020-03-13T00:00:00-04:00\", \"2020-03-14T00:00:00-04:00\"], \"y\": [0.6897222222222222, 3.026111111111111, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1963888888888889, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.511388888888889, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1288888888888888, 0.6422222222222222, 3.241388888888889, 0.0, 0.0, 0.63, 0.18388888888888888, 0.0, 0.0, 0.0, 0.7266666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.5330555555555556, 1.4955555555555555, 0.0, 2.143611111111111, 0.25305555555555553, 1.0597222222222222, 0.0, 0.0, 1.3447222222222222, 1.2586111111111111, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.28444444444444444, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.5888888888888888, 0.0, 0.0, 0.0, 0.0, 0.0, 1.386111111111111, 0.43444444444444447, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.926111111111111, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.8611111111111112, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.756388888888889, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0055555555555555, 0.5136111111111111, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0930555555555554, 0.0, 0.0, 1.3972222222222221, 0.0, 0.0, 4.253611111111111, 3.097777777777778, 0.6669444444444445, 1.4416666666666667, 4.195555555555556, 4.3180555555555555, 7.589722222222222, 3.9363888888888887, 1.8019444444444443, 5.110277777777778, 6.115277777777778, 3.311111111111111, 1.5955555555555556, 0.0, 2.5694444444444446, 2.120833333333333, 1.8552777777777778, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.043333333333333335, 0.0, 0.23527777777777778, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006388888888888889, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.5991666666666666]}], {\"hovermode\": \"x\", \"margin\": {\"pad\": 0}, \"template\": {\"data\": {\"bar\": [{\"error_x\": {\"color\": \"#2a3f5f\"}, \"error_y\": {\"color\": \"#2a3f5f\"}, \"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"bar\"}], \"barpolar\": [{\"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"barpolar\"}], \"carpet\": [{\"aaxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"baxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"type\": \"carpet\"}], \"choropleth\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"choropleth\"}], \"contour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"contour\"}], \"contourcarpet\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"contourcarpet\"}], \"heatmap\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmap\"}], \"heatmapgl\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmapgl\"}], \"histogram\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"histogram\"}], \"histogram2d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2d\"}], \"histogram2dcontour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2dcontour\"}], \"mesh3d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"mesh3d\"}], \"parcoords\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"parcoords\"}], \"pie\": [{\"automargin\": true, \"type\": \"pie\"}], \"scatter\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter\"}], \"scatter3d\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter3d\"}], \"scattercarpet\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattercarpet\"}], \"scattergeo\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergeo\"}], \"scattergl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergl\"}], \"scattermapbox\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattermapbox\"}], \"scatterpolar\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolar\"}], \"scatterpolargl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolargl\"}], \"scatterternary\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterternary\"}], \"surface\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"surface\"}], \"table\": [{\"cells\": {\"fill\": {\"color\": \"#EBF0F8\"}, \"line\": {\"color\": \"white\"}}, \"header\": {\"fill\": {\"color\": \"#C8D4E3\"}, \"line\": {\"color\": \"white\"}}, \"type\": \"table\"}]}, \"layout\": {\"annotationdefaults\": {\"arrowcolor\": \"#2a3f5f\", \"arrowhead\": 0, \"arrowwidth\": 1}, \"coloraxis\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"colorscale\": {\"diverging\": [[0, \"#8e0152\"], [0.1, \"#c51b7d\"], [0.2, \"#de77ae\"], [0.3, \"#f1b6da\"], [0.4, \"#fde0ef\"], [0.5, \"#f7f7f7\"], [0.6, \"#e6f5d0\"], [0.7, \"#b8e186\"], [0.8, \"#7fbc41\"], [0.9, \"#4d9221\"], [1, \"#276419\"]], \"sequential\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"sequentialminus\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]]}, \"colorway\": [\"#636efa\", \"#EF553B\", \"#00cc96\", \"#ab63fa\", \"#FFA15A\", \"#19d3f3\", \"#FF6692\", \"#B6E880\", \"#FF97FF\", \"#FECB52\"], \"font\": {\"color\": \"#2a3f5f\"}, \"geo\": {\"bgcolor\": \"white\", \"lakecolor\": \"white\", \"landcolor\": \"#E5ECF6\", \"showlakes\": true, \"showland\": true, \"subunitcolor\": \"white\"}, \"hoverlabel\": {\"align\": \"left\"}, \"hovermode\": \"closest\", \"mapbox\": {\"style\": \"light\"}, \"paper_bgcolor\": \"white\", \"plot_bgcolor\": \"#E5ECF6\", \"polar\": {\"angularaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"radialaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"scene\": {\"xaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"yaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"zaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}}, \"shapedefaults\": {\"line\": {\"color\": \"#2a3f5f\"}}, \"ternary\": {\"aaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"baxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"caxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"title\": {\"x\": 0.05}, \"xaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}, \"yaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}}}, \"title\": {\"text\": \"total hours commited: 93.35\"}, \"yaxis\": {\"title\": {\"text\": \"hours per 1 d\"}}}, {\"responsive\": true} ) }; Individual work sessions for the hourly project are documented below. Note We have used work_log.header_depth=3 option for clocking in/out so that H3 headers are generated 2020-03-14 20:41:54.111416: clock-out # ENH - can run hourly commands from repo subdirectories test subdir version push testing hourly in subdir 2020-03-14 20:32:40.658394: clock-in # Sat Mar 14 19:13:06 2020 -0500: clock-out # had to clock out manually during wip 2020-03-14 18:56:34.870426: clock-in # 2020-03-14 16:25:31.198516: clock-out # hydra does not respect os.chdir ! 2020-03-14 15:15:20.182542: clock-in # fixing yaml includes for docs 2020-01-29 23:59:37.202116: clock-out # fixed bug preventing users from clocking in 2020-01-29 23:45:29.962519: clock-in # 2020-01-28 20:12:53.326321: clock-out # fixed MANIFEST since cli moved into hourly module 2020-01-28 20:10:17.270214: clock-in # fixed ignore bug preventing timesheet generation 0.3.10 changed install path to hourly/cli 2020-01-14 19:02:53.559393: clock-out # 0.3.9 fixed timesheet filename bug 2020-01-14 18:47:30.370225: clock-in # 0.3.8 2020-01-14 18:41:10.382420: clock-out # fixed tminus code clean up switching to 'foo' in cfg.bar 2020-01-14 17:32:53.638696: clock-in # pushing version 2020-01-14 02:30:57.609792: clock-out # fixed bugs in invoice generation 2020-01-14 02:03:18.253023: clock-in # trying to figure out submodules 2020-01-14 00:08:15.447796: clock-out # minor doc changes updated remaining docs to reflect hourly-report changed README to reflect new hourly-report syntax fixed bug in invoice generation created hourly-report cli, cleaned up initialization code cli overrides broke grouping fixed bug where command line args were ignored by config_override turned off time sheet generation by default, updated README usage section 2020-01-13 22:01:00.641375: clock-in # changing maxwidth again 2020-01-12 17:20:03.651580: clock-out # changed earnings calculation to dictionary added verbosity setting, error handling moved invoicing code into their own module 2020-01-12 15:11:08.113248: clock-in # 2020-01-12 09:40:04.640256: clock-out # corrected MANIFEST.in path 2020-01-12 09:37:24.327410: clock-in # removing Dashboard prototyping notebook 2020-01-12 09:06:00.564390: clock-out: T-20m # updated README intro 2020-01-12 08:23:25.178670: clock-in # 2020-01-10 20:26:55.510181: clock-out # 2020-01-10 20:23:24.001918: clock-in # 2020-01-10 10:41:14.079277: clock-out # simplifying btcpay setup updated btcpay config docs 2020-01-10 09:11:40.795394: clock-in # 2020-01-09 23:55:09.691335: clock-out # added work graph to WorkLog docs 2020-01-09 23:52:30.625119: clock-in # 2020-01-09 23:30:09.366730: clock-out # actually added MANIFEST.in this time updating docs 2020-01-09 22:22:01.026039: clock-in # corrected invoice notification docs 2020-01-09 11:00:35.544185: clock-out # added MANIFEST.in got hydra.errors.MissingConfigException on mac 2020-01-09 10:34:21.933690: clock-in # 2020-01-09 09:19:01.967756: clock-out # updated usage examples version update 2020-01-09 09:06:20.553382: clock-in # adding stripe screen shot 2020-01-09 03:23:49.529611: clock-out # added further install instructions 2020-01-09 03:22:04.616199: clock-in # updating graph again.. I should really fix this 2020-01-09 02:59:24.294923: clock-out # fixed up requirements 2020-01-09 02:47:45.455102: clock-in # updated press release to include stripe redirected to Authors notes rather than email updating work graph 2020-01-09 02:35:00.616095: clock-out # 2020-01-09 01:16:48.954647: clock-in # 2020-01-09 01:14:18.157882: clock-out: T-10m # anonymized default stripe customer, changed invoice footer yo quieter logging from stripe api kept invoice config from sharing customer data between repos updated requirements.txt to include hydra fixed bug that raised error when only start or end given 2020-01-08 22:28:20.520139: clock-in # 2020-01-08 03:36:04.021070: clock-out # Got stripe integration! Refactored invoice configuration Simplified invoice command: hourly invoice=btcpay or hourly invoice=stripe 2020-01-08 00:05:07.910803: clock-in # 2020-01-07 19:53:09.572565: clock-out # started stripe integration added FAQ 2020-01-07 17:13:47.825366: clock-in: T-13m # updated compensation docs 2020-01-07 02:01:10.275284: clock-out # attending announcement on bitcoinmeister show added documentation on compensation 2020-01-07 01:08:38.620674: clock-in # pushing updated graph set plot hovermode to compare, updated docs 2020-01-07 00:26:37.876624: clock-out # updated docs - added press release 2020-01-07 00:25:01.659294: clock-in: T-35m # 2020-01-06 23:49:06.433811: clock-out # writing hourly blurb for bitcoin&markets newsletter updated configuration README 2020-01-06 23:03:59.405807: clock-in # Need to send blurb to Ansel by friday, mention upwork, write up what you know about tradeoffs with lightning (costs, availability, etc) Need to add a gui and dockerize minor site fixes adding btcpay invoice screenshot fixed typo in docs, updated version touching up documentation updating work graph for hourly repo 2020-01-06 14:52:28.511302: clock-out # merging with master BUGFIX force exit if btcpay-python not installed 2020-01-06 14:48:34.209232: clock-in: T-10m # 2020-01-06 00:57:44.096012: clock-out # 2020-01-05 23:48:31.655464: clock-in: T-25m # 2020-01-05 23:22:17.765638: clock-out # prompting user for confirmation renamed hourly-config.yaml to hourly.yaml 2020-01-05 21:17:55.844445: clock-in # 2020-01-05 20:58:43.148966: clock-out # documenting grouped config 2020-01-05 20:43:23.467637: clock-in # 2020-01-05 17:34:41.710447: clock-out # refactoring configuration using config groups does it make sense to be able to issue an invoice on behalf of someone else? it's the responsibilty of the employer to make sure the invoice their getting is from the right person 2020-01-05 16:29:01.786457: clock-in # 2020-01-05 16:03:22.389791: clock-out # refactoring 2020-01-05 15:32:33.929020: clock-in # 2020-01-05 02:59:59.550127: clock-out # adding user_id to report.filename got hourly to issue first btcpayserver invoice! 2020-01-04 22:59:21.370595: clock-in # 2020-01-04 20:06:20.516946: clock-out # working with pem files changed default max column to match hash length 2020-01-04 18:56:53.105369: clock-in # 2020-01-04 15:35:04.070440: clock-out # moving invoice into cli setting up environment variable interpolation using OmegaConf.to_container(cfg) cannot load a private key from environment variable on windows should probably use a private key file 2020-01-04 13:55:18.699752: clock-in # 2020-01-04 13:01:43.289508: clock-out # testing first invoice 2020-01-04 12:16:11.802771: clock-in # 2020-01-03 21:40:56.858838: clock-out # lightning payments 2020-01-03 19:45:54.790098: clock-in # 2020-01-03 19:31:57.414479: clock-out # looking at btcpayserver trying exitpay https://btc.exitpay.org/ found exitpay confirmation email in spam folder 2020-01-03 17:44:04.019146: clock-in # updating graph 2020-01-03 14:28:45.356496: clock-out # addressing helpful hydra hints from Omry documentation improvements 2020-01-03 13:52:35.768769: clock-in # 2020-01-02 18:53:49.974457: clock-out # added ability to group timesheets by name or email or both fixed bug where user can accidentally clock in twice if a non-clock message is committed changed report.outfile to report.filename added multiple users to plot removed click app documentation updates 2020-01-02 14:42:06.286717: clock-in # 2020-01-01 13:52:29.717923: clock-out # adding ability to clock in multiple users check which email address is being used to clock in/out. git config user.email can be used to check which email is configured for the current repo can get name or email from author 2020-01-01 12:25:59.286809: clock-in # 2019-12-31 14:54:48.254974: clock-out # 2019-12-31 14:14:47.319391: clock-in # 2019-12-30 15:23:56.531080: clock-out # 2019-12-30 15:22:44.136505: clock-in # 2019-12-30 15:22:18.590328: clock-out # documentation and hydra code push cleaned up output for clock-in and clock-out messages updated documentation site to reflect move to hydra 2019-12-30 12:17:38.426420: clock-in # 2019-12-29 22:28:23.663515: clock-out # switching from click to hydra involves some caveats. I really dislike the practice of deprecation, which often breaks things that didn't need fixing. My goal is to minimize that pain for users of the old app. To that end: keep existing cli while in development to ensure behavior can be replicated create a unique (temporary?) name for new app (e.g. myapp-hydra or myapp-cli) replace common flags with separate cli tools. For instance, myapp -myflag becomes myapp-myflag , where myapp-myflag wraps the interface myapp-cli myflag=true This last one means there is actually one less character to write. added dictConfig_to_dict function to recursively construct nested dict pandas.set_option takes names like display.max_colwidth got hourly-in, hourly-out functional not sure how to make command-line inputs override config_override setting 2019-12-29 19:42:03.967359: clock-in # 2019-12-29 18:02:55.046177: clock-out # developing cli with hydra 2019-12-29 16:34:02.562291: clock-in # 2019-12-26 13:05:03.226272: clock-out # working on refactoring cli with new config adding ability to commit messages without clocking user should not have to directly edit work log 2019-12-26 11:41:13.289307: clock-in # 2019-12-23 13:42:32.292273: clock-out # switching to hydra this changes the cli from hourly -in to hourly commit.clock=in finished up the first iteration of the cli spec! 2019-12-23 12:06:57.928740: clock-in: T-30m # 2019-12-01 13:21:31.816735: clock-out # trying out different plot options looking into configuration setup 2019-12-01 12:50:42.892528: clock-in # 2019-11-30 16:19:45.897554: clock-out # embedding work graph as iframe changing --plot option to specify path/to/work-graph.html 2019-11-30 15:25:51.433329: clock-in # 2019-11-30 15:07:32.727339: clock-out # Testing header depth option 2019-11-30 15:05:34.680440: clock-in # 2019-11-30 14:58:11.651795: clock-out # updating docs added worklog header depth option 2019-11-30 13:53:43.831968: clock-in # 2019-10-23 22:55:48.632734: clock-out # 2019-10-23 21:10:25.808038: clock-in # 2019-09-19 21:47:37.949509: clock-out # Moved time adjustment so it only applies at labor calculation, in clock commits 2019-09-19 21:13:46.261481: clock-in # 2019-09-19 20:43:24.455285: clock-out # pysat contains commits with ROCSAT-1, which breaks time adjustment 2019-09-19 20:33:26.659734: clock-in # 2019-09-19 20:25:52.236443: clock-out # testing on pysat repo 2019-09-19 20:18:01.673816: clock-in # 2019-08-21 01:17:15.009128: clock-out: added plot options # add plot output 2019-08-20 23:21:41.235199: clock-in # 2019-08-14 00:30:48.962283: clock-out # failed to fix utc error when giving only start time 2019-08-14 00:12:41.780463: clock-in: T-7m # 2019-08-14 00:05:12.536012: clock-out # Testing new output for double clock in warning 2019-08-14 00:04:16.778490: clock-in # 2019-08-14 00:04:04.274688: clock-out # 2019-08-14 00:03:57.681741: clock-in: T-1h22m # 2019-08-13 22:40:45.276268: clock-out # bug: negative dt when listing work for one day UTC bug occurs when no end date is specified removed default from wage option Got table into gui 2019-08-13 22:39:42.742055: clock-in # 2019-08-07 23:51:23.947759: clock-out: T-15m # upgrading to python 3.7 cleaned up output for when no labor is available prototyping gui bug when date range covers different UTC offsets, which can occur during travel: 2018-10-28 13:44:48-04:00 clock in c4e95f59dc0c8ce296a40300760ab6880... 2018-10-28 13:56:35-04:00 clock out f5200e718c062e828d436506286fd05e5... 2019-02-25 10:19:10-05:00 clock in T-1hr d7add63b4d2e3e1ca1423296aaed25d9c... 2019-02-25 12:49:51-05:00 clock out T-5m acfb8596317786e38177345aa25310980... 2019-03-10 22:57:58-04:00 clock in 217ad6169fbd10efbb1e497a6cc6e4553... 2019-03-11 00:05:42-04:00 clock out - integrating with read... 297a561d5d7c57ecb641fa841d86dc5a6... 2019-08-07 22:01:03.125488: clock-in # 2019-06-19 19:03:19.375329: clock-out # 2019-06-19 18:11:54.185775: clock-in # 2019-06-19 14:56:37.451578: clock-out: T-5m # Weasyprint looks like the easiest path to generating pdfs Look at their invoice example 2019-06-19 14:32:23.261121: clock-in # 2019-06-13 18:36:23.538048: clock-out # Looking at generating invoices in pdf 2019-06-13 18:19:19.036767: clock-in # 2019-04-17 00:21:48.211640: clock-out # got c-lightning server running in container on windows 10 had to skip the -u id -u parameter, which means it runs as root have to use docker-machine ip to get the appropriate ip for the windows container got a few of the rest api commands to work, then ran into this: Starting bitcoind... waiting for cookie... waiting for RPC... Error: Error: Disk space is low! may need to delete ./data and start again? 2019-04-16 23:06:17.688503: clock-in: researching payments # 2019-04-16 01:21:50.338638: clock-out # Looking into lightning payments https://github.com/ElementsProject/lightning-charge 2019-04-16 00:01:09.069912: clock-in # 2019-04-13 02:43:19.905950: clock-out # Looking into payment automation fixed an errant clock-in/out with hard reset: git reset --hard 590804df784c45051c548eb84e930c1157d6acc1 Where I used the last clock-out commit hash from 2019-04-12 18:04:27.744011 2019-04-13 02:24:44.339725: clock-in: T-45m # 2019-04-12 18:04:27.744011: clock-out # 2019-04-12 17:53:58.904877: clock-in: payment options # 2019-04-12 15:45:54.653421: clock-out # determine why report sometimes shows negative time deltas 2019-04-12 15:41:12.003763: clock-in # 2019-04-11 02:48:43.722703: clock-out # Apr 11, 2019 # Finished in/out flags Apr 8, 2019 # working on in/out flags Apr 7, 2019 # Adding \"hourly in/out\" flags Pushing python 3 version Looking into payment options Mar 15, 2019 # Fixed issue with ignore default Mar 14, 2019 # bug fixing Mar 12, 2019 # scrapping readthedocs in favor of github.io starting command-line interface Mar 11, 2019 # Trying to fix build error Mar 10, 2019 # Added documentation site Started integration with readthedocs Feb 25, 2019 # Added clock adjustments Made match_logs option to raise an error when in/out clocks don't match Oct 20, 2018 # Switched to pd.Timestamp to allow for easier slicing Added timezones Notebook Tutorial runs without errors Oct 28, 2018 # Removed line breaks from repor","title":"WorkLog"},{"location":"WorkLog.html#worklogmd","text":"The hourly command line utility will update the top-level WorkLog.md file when you clock in/out of a project, inserting a clock in/out header with the current time stamp at the top of the file. This file may be edited to add details about the current work session. The WorkLog.md file serves a dual purpose: It provides a human-readable account of work session details It ensures there is always a file to commit against This way work sessions can be documented even if there are no committed code changes.","title":"WorkLog.md"},{"location":"WorkLog.html#collaborative-development","text":"While simple and convenient for solo projects, there may be merge conflicts if multiple people are updating the same WorkLog. There are at least two ways to work around this: Use the work_log.filename option to specify an alternate log file (e.g. MyWorkLog.md ) in which to store your session details. Delete your WorkLog.md before merging. Hourly can still generate a timesheet even if the WorkLog.md is missing. Note Git keeps the history of your branch's WorkLog after deletion. Recover with git log --all --full-history -- \"**/WorkLog.*\"","title":"Collaborative Development"},{"location":"WorkLog.html#mkdocs","text":"Currently, the WorkLog is assumed to be in the top level directory of the git project. In order to include work commits in your site's documentation, create a docs/WorkLog.md file containing the following line: {! WorkLog.md !} Then update mkdocs.yaml : nav : - WorkLog.md : WorkLog.md markdown_extensions : - markdown_include.include For example, we can use this method to insert this site's work session details below.","title":"MkDocs"},{"location":"WorkLog.html#hourlys-worklog","text":"if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});} window.PlotlyConfig = {MathJaxConfig: 'local'}; window.PLOTLYENV=window.PLOTLYENV || {}; if (document.getElementById(\"c2bd69b2-a42c-4ec6-82cf-b89c12ab1817\")) { Plotly.newPlot( 'c2bd69b2-a42c-4ec6-82cf-b89c12ab1817', [{\"mode\": \"lines\", \"name\": \"apembroke@gmail.com\", \"stackgroup\": \"one\", \"text\": [\"0 days 00:41:23\", \"0 days 03:01:34\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:11:47\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 02:30:41\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 01:07:44\", \"0 days 00:38:32\", \"0 days 03:14:29\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:37:48\", \"0 days 00:11:02\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:43:36\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 01:31:59\", \"0 days 01:29:44\", \"0 days 00:00:00\", \"0 days 02:08:37\", \"0 days 00:15:11\", \"0 days 01:03:35\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 01:20:41\", \"0 days 01:15:31\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:17:04\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 01:10:39\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 01:35:20\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 01:23:10\", \"0 days 00:26:04\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 01:55:34\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:51:40\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 01:45:23\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 02:00:20\", \"0 days 00:30:49\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 02:05:35\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 01:23:50\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 04:15:13\", \"0 days 03:05:52\", \"0 days 00:40:01\", \"0 days 01:26:30\", \"0 days 04:11:44\", \"0 days 04:19:05\", \"0 days 07:35:23\", \"0 days 03:56:11\", \"0 days 01:48:07\", \"0 days 05:06:37\", \"0 days 06:06:55\", \"0 days 03:18:40\", \"0 days 01:35:44\", \"0 days 00:00:00\", \"0 days 02:34:10\", \"0 days 02:07:15\", \"0 days 01:51:19\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:02:36\", \"0 days 00:00:00\", \"0 days 00:14:07\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:23\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 00:00:00\", \"0 days 01:35:57\"], \"type\": \"scatter\", \"x\": [\"2018-10-19T00:00:00-04:00\", \"2018-10-20T00:00:00-04:00\", \"2018-10-21T00:00:00-04:00\", \"2018-10-22T00:00:00-04:00\", \"2018-10-23T00:00:00-04:00\", \"2018-10-24T00:00:00-04:00\", \"2018-10-25T00:00:00-04:00\", \"2018-10-26T00:00:00-04:00\", \"2018-10-27T00:00:00-04:00\", \"2018-10-28T00:00:00-04:00\", \"2018-10-29T00:00:00-04:00\", \"2018-10-30T00:00:00-04:00\", \"2018-10-31T00:00:00-04:00\", \"2018-11-01T00:00:00-04:00\", \"2018-11-02T00:00:00-04:00\", \"2018-11-03T00:00:00-04:00\", \"2018-11-04T00:00:00-04:00\", \"2018-11-05T00:00:00-05:00\", \"2018-11-06T00:00:00-05:00\", \"2018-11-07T00:00:00-05:00\", \"2018-11-08T00:00:00-05:00\", \"2018-11-09T00:00:00-05:00\", \"2018-11-10T00:00:00-05:00\", \"2018-11-11T00:00:00-05:00\", \"2018-11-12T00:00:00-05:00\", \"2018-11-13T00:00:00-05:00\", \"2018-11-14T00:00:00-05:00\", \"2018-11-15T00:00:00-05:00\", \"2018-11-16T00:00:00-05:00\", \"2018-11-17T00:00:00-05:00\", \"2018-11-18T00:00:00-05:00\", \"2018-11-19T00:00:00-05:00\", \"2018-11-20T00:00:00-05:00\", \"2018-11-21T00:00:00-05:00\", \"2018-11-22T00:00:00-05:00\", \"2018-11-23T00:00:00-05:00\", \"2018-11-24T00:00:00-05:00\", \"2018-11-25T00:00:00-05:00\", \"2018-11-26T00:00:00-05:00\", \"2018-11-27T00:00:00-05:00\", \"2018-11-28T00:00:00-05:00\", \"2018-11-29T00:00:00-05:00\", \"2018-11-30T00:00:00-05:00\", \"2018-12-01T00:00:00-05:00\", \"2018-12-02T00:00:00-05:00\", \"2018-12-03T00:00:00-05:00\", \"2018-12-04T00:00:00-05:00\", \"2018-12-05T00:00:00-05:00\", \"2018-12-06T00:00:00-05:00\", \"2018-12-07T00:00:00-05:00\", \"2018-12-08T00:00:00-05:00\", \"2018-12-09T00:00:00-05:00\", \"2018-12-10T00:00:00-05:00\", \"2018-12-11T00:00:00-05:00\", \"2018-12-12T00:00:00-05:00\", \"2018-12-13T00:00:00-05:00\", \"2018-12-14T00:00:00-05:00\", \"2018-12-15T00:00:00-05:00\", \"2018-12-16T00:00:00-05:00\", \"2018-12-17T00:00:00-05:00\", \"2018-12-18T00:00:00-05:00\", \"2018-12-19T00:00:00-05:00\", \"2018-12-20T00:00:00-05:00\", \"2018-12-21T00:00:00-05:00\", \"2018-12-22T00:00:00-05:00\", \"2018-12-23T00:00:00-05:00\", \"2018-12-24T00:00:00-05:00\", \"2018-12-25T00:00:00-05:00\", \"2018-12-26T00:00:00-05:00\", \"2018-12-27T00:00:00-05:00\", \"2018-12-28T00:00:00-05:00\", \"2018-12-29T00:00:00-05:00\", \"2018-12-30T00:00:00-05:00\", \"2018-12-31T00:00:00-05:00\", \"2019-01-01T00:00:00-05:00\", \"2019-01-02T00:00:00-05:00\", \"2019-01-03T00:00:00-05:00\", \"2019-01-04T00:00:00-05:00\", \"2019-01-05T00:00:00-05:00\", \"2019-01-06T00:00:00-05:00\", \"2019-01-07T00:00:00-05:00\", \"2019-01-08T00:00:00-05:00\", \"2019-01-09T00:00:00-05:00\", \"2019-01-10T00:00:00-05:00\", \"2019-01-11T00:00:00-05:00\", \"2019-01-12T00:00:00-05:00\", \"2019-01-13T00:00:00-05:00\", \"2019-01-14T00:00:00-05:00\", \"2019-01-15T00:00:00-05:00\", \"2019-01-16T00:00:00-05:00\", \"2019-01-17T00:00:00-05:00\", \"2019-01-18T00:00:00-05:00\", \"2019-01-19T00:00:00-05:00\", \"2019-01-20T00:00:00-05:00\", \"2019-01-21T00:00:00-05:00\", \"2019-01-22T00:00:00-05:00\", \"2019-01-23T00:00:00-05:00\", \"2019-01-24T00:00:00-05:00\", \"2019-01-25T00:00:00-05:00\", \"2019-01-26T00:00:00-05:00\", \"2019-01-27T00:00:00-05:00\", \"2019-01-28T00:00:00-05:00\", \"2019-01-29T00:00:00-05:00\", \"2019-01-30T00:00:00-05:00\", \"2019-01-31T00:00:00-05:00\", \"2019-02-01T00:00:00-05:00\", \"2019-02-02T00:00:00-05:00\", \"2019-02-03T00:00:00-05:00\", \"2019-02-04T00:00:00-05:00\", \"2019-02-05T00:00:00-05:00\", \"2019-02-06T00:00:00-05:00\", \"2019-02-07T00:00:00-05:00\", \"2019-02-08T00:00:00-05:00\", \"2019-02-09T00:00:00-05:00\", \"2019-02-10T00:00:00-05:00\", \"2019-02-11T00:00:00-05:00\", \"2019-02-12T00:00:00-05:00\", \"2019-02-13T00:00:00-05:00\", \"2019-02-14T00:00:00-05:00\", \"2019-02-15T00:00:00-05:00\", \"2019-02-16T00:00:00-05:00\", \"2019-02-17T00:00:00-05:00\", \"2019-02-18T00:00:00-05:00\", \"2019-02-19T00:00:00-05:00\", \"2019-02-20T00:00:00-05:00\", \"2019-02-21T00:00:00-05:00\", \"2019-02-22T00:00:00-05:00\", \"2019-02-23T00:00:00-05:00\", \"2019-02-24T00:00:00-05:00\", \"2019-02-25T00:00:00-05:00\", \"2019-02-26T00:00:00-05:00\", \"2019-02-27T00:00:00-05:00\", \"2019-02-28T00:00:00-05:00\", \"2019-03-01T00:00:00-05:00\", \"2019-03-02T00:00:00-05:00\", \"2019-03-03T00:00:00-05:00\", \"2019-03-04T00:00:00-05:00\", \"2019-03-05T00:00:00-05:00\", \"2019-03-06T00:00:00-05:00\", \"2019-03-07T00:00:00-05:00\", \"2019-03-08T00:00:00-05:00\", \"2019-03-09T00:00:00-05:00\", \"2019-03-10T00:00:00-05:00\", \"2019-03-11T00:00:00-04:00\", \"2019-03-12T00:00:00-04:00\", \"2019-03-13T00:00:00-04:00\", \"2019-03-14T00:00:00-04:00\", \"2019-03-15T00:00:00-04:00\", \"2019-03-16T00:00:00-04:00\", \"2019-03-17T00:00:00-04:00\", \"2019-03-18T00:00:00-04:00\", \"2019-03-19T00:00:00-04:00\", \"2019-03-20T00:00:00-04:00\", \"2019-03-21T00:00:00-04:00\", \"2019-03-22T00:00:00-04:00\", \"2019-03-23T00:00:00-04:00\", \"2019-03-24T00:00:00-04:00\", \"2019-03-25T00:00:00-04:00\", \"2019-03-26T00:00:00-04:00\", \"2019-03-27T00:00:00-04:00\", \"2019-03-28T00:00:00-04:00\", \"2019-03-29T00:00:00-04:00\", \"2019-03-30T00:00:00-04:00\", \"2019-03-31T00:00:00-04:00\", \"2019-04-01T00:00:00-04:00\", \"2019-04-02T00:00:00-04:00\", \"2019-04-03T00:00:00-04:00\", \"2019-04-04T00:00:00-04:00\", \"2019-04-05T00:00:00-04:00\", \"2019-04-06T00:00:00-04:00\", \"2019-04-07T00:00:00-04:00\", \"2019-04-08T00:00:00-04:00\", \"2019-04-09T00:00:00-04:00\", \"2019-04-10T00:00:00-04:00\", \"2019-04-11T00:00:00-04:00\", \"2019-04-12T00:00:00-04:00\", \"2019-04-13T00:00:00-04:00\", \"2019-04-14T00:00:00-04:00\", \"2019-04-15T00:00:00-04:00\", \"2019-04-16T00:00:00-04:00\", \"2019-04-17T00:00:00-04:00\", \"2019-04-18T00:00:00-04:00\", \"2019-04-19T00:00:00-04:00\", \"2019-04-20T00:00:00-04:00\", \"2019-04-21T00:00:00-04:00\", \"2019-04-22T00:00:00-04:00\", \"2019-04-23T00:00:00-04:00\", \"2019-04-24T00:00:00-04:00\", \"2019-04-25T00:00:00-04:00\", \"2019-04-26T00:00:00-04:00\", \"2019-04-27T00:00:00-04:00\", \"2019-04-28T00:00:00-04:00\", \"2019-04-29T00:00:00-04:00\", \"2019-04-30T00:00:00-04:00\", \"2019-05-01T00:00:00-04:00\", \"2019-05-02T00:00:00-04:00\", \"2019-05-03T00:00:00-04:00\", \"2019-05-04T00:00:00-04:00\", \"2019-05-05T00:00:00-04:00\", \"2019-05-06T00:00:00-04:00\", \"2019-05-07T00:00:00-04:00\", \"2019-05-08T00:00:00-04:00\", \"2019-05-09T00:00:00-04:00\", \"2019-05-10T00:00:00-04:00\", \"2019-05-11T00:00:00-04:00\", \"2019-05-12T00:00:00-04:00\", \"2019-05-13T00:00:00-04:00\", \"2019-05-14T00:00:00-04:00\", \"2019-05-15T00:00:00-04:00\", \"2019-05-16T00:00:00-04:00\", \"2019-05-17T00:00:00-04:00\", \"2019-05-18T00:00:00-04:00\", \"2019-05-19T00:00:00-04:00\", \"2019-05-20T00:00:00-04:00\", \"2019-05-21T00:00:00-04:00\", \"2019-05-22T00:00:00-04:00\", \"2019-05-23T00:00:00-04:00\", \"2019-05-24T00:00:00-04:00\", \"2019-05-25T00:00:00-04:00\", \"2019-05-26T00:00:00-04:00\", \"2019-05-27T00:00:00-04:00\", \"2019-05-28T00:00:00-04:00\", \"2019-05-29T00:00:00-04:00\", \"2019-05-30T00:00:00-04:00\", \"2019-05-31T00:00:00-04:00\", \"2019-06-01T00:00:00-04:00\", \"2019-06-02T00:00:00-04:00\", \"2019-06-03T00:00:00-04:00\", \"2019-06-04T00:00:00-04:00\", \"2019-06-05T00:00:00-04:00\", \"2019-06-06T00:00:00-04:00\", \"2019-06-07T00:00:00-04:00\", \"2019-06-08T00:00:00-04:00\", \"2019-06-09T00:00:00-04:00\", \"2019-06-10T00:00:00-04:00\", \"2019-06-11T00:00:00-04:00\", \"2019-06-12T00:00:00-04:00\", \"2019-06-13T00:00:00-04:00\", \"2019-06-14T00:00:00-04:00\", \"2019-06-15T00:00:00-04:00\", \"2019-06-16T00:00:00-04:00\", \"2019-06-17T00:00:00-04:00\", \"2019-06-18T00:00:00-04:00\", \"2019-06-19T00:00:00-04:00\", \"2019-06-20T00:00:00-04:00\", \"2019-06-21T00:00:00-04:00\", \"2019-06-22T00:00:00-04:00\", \"2019-06-23T00:00:00-04:00\", \"2019-06-24T00:00:00-04:00\", \"2019-06-25T00:00:00-04:00\", \"2019-06-26T00:00:00-04:00\", \"2019-06-27T00:00:00-04:00\", \"2019-06-28T00:00:00-04:00\", \"2019-06-29T00:00:00-04:00\", \"2019-06-30T00:00:00-04:00\", \"2019-07-01T00:00:00-04:00\", \"2019-07-02T00:00:00-04:00\", \"2019-07-03T00:00:00-04:00\", \"2019-07-04T00:00:00-04:00\", \"2019-07-05T00:00:00-04:00\", \"2019-07-06T00:00:00-04:00\", \"2019-07-07T00:00:00-04:00\", \"2019-07-08T00:00:00-04:00\", \"2019-07-09T00:00:00-04:00\", \"2019-07-10T00:00:00-04:00\", \"2019-07-11T00:00:00-04:00\", \"2019-07-12T00:00:00-04:00\", \"2019-07-13T00:00:00-04:00\", \"2019-07-14T00:00:00-04:00\", \"2019-07-15T00:00:00-04:00\", \"2019-07-16T00:00:00-04:00\", \"2019-07-17T00:00:00-04:00\", \"2019-07-18T00:00:00-04:00\", \"2019-07-19T00:00:00-04:00\", \"2019-07-20T00:00:00-04:00\", \"2019-07-21T00:00:00-04:00\", \"2019-07-22T00:00:00-04:00\", \"2019-07-23T00:00:00-04:00\", \"2019-07-24T00:00:00-04:00\", \"2019-07-25T00:00:00-04:00\", \"2019-07-26T00:00:00-04:00\", \"2019-07-27T00:00:00-04:00\", \"2019-07-28T00:00:00-04:00\", \"2019-07-29T00:00:00-04:00\", \"2019-07-30T00:00:00-04:00\", \"2019-07-31T00:00:00-04:00\", \"2019-08-01T00:00:00-04:00\", \"2019-08-02T00:00:00-04:00\", \"2019-08-03T00:00:00-04:00\", \"2019-08-04T00:00:00-04:00\", \"2019-08-05T00:00:00-04:00\", \"2019-08-06T00:00:00-04:00\", \"2019-08-07T00:00:00-04:00\", \"2019-08-08T00:00:00-04:00\", \"2019-08-09T00:00:00-04:00\", \"2019-08-10T00:00:00-04:00\", \"2019-08-11T00:00:00-04:00\", \"2019-08-12T00:00:00-04:00\", \"2019-08-13T00:00:00-04:00\", \"2019-08-14T00:00:00-04:00\", \"2019-08-15T00:00:00-04:00\", \"2019-08-16T00:00:00-04:00\", \"2019-08-17T00:00:00-04:00\", \"2019-08-18T00:00:00-04:00\", \"2019-08-19T00:00:00-04:00\", \"2019-08-20T00:00:00-04:00\", \"2019-08-21T00:00:00-04:00\", \"2019-08-22T00:00:00-04:00\", \"2019-08-23T00:00:00-04:00\", \"2019-08-24T00:00:00-04:00\", \"2019-08-25T00:00:00-04:00\", \"2019-08-26T00:00:00-04:00\", \"2019-08-27T00:00:00-04:00\", \"2019-08-28T00:00:00-04:00\", \"2019-08-29T00:00:00-04:00\", \"2019-08-30T00:00:00-04:00\", \"2019-08-31T00:00:00-04:00\", \"2019-09-01T00:00:00-04:00\", \"2019-09-02T00:00:00-04:00\", \"2019-09-03T00:00:00-04:00\", \"2019-09-04T00:00:00-04:00\", \"2019-09-05T00:00:00-04:00\", \"2019-09-06T00:00:00-04:00\", \"2019-09-07T00:00:00-04:00\", \"2019-09-08T00:00:00-04:00\", \"2019-09-09T00:00:00-04:00\", \"2019-09-10T00:00:00-04:00\", \"2019-09-11T00:00:00-04:00\", \"2019-09-12T00:00:00-04:00\", \"2019-09-13T00:00:00-04:00\", \"2019-09-14T00:00:00-04:00\", \"2019-09-15T00:00:00-04:00\", \"2019-09-16T00:00:00-04:00\", \"2019-09-17T00:00:00-04:00\", \"2019-09-18T00:00:00-04:00\", \"2019-09-19T00:00:00-04:00\", \"2019-09-20T00:00:00-04:00\", \"2019-09-21T00:00:00-04:00\", \"2019-09-22T00:00:00-04:00\", \"2019-09-23T00:00:00-04:00\", \"2019-09-24T00:00:00-04:00\", \"2019-09-25T00:00:00-04:00\", \"2019-09-26T00:00:00-04:00\", \"2019-09-27T00:00:00-04:00\", \"2019-09-28T00:00:00-04:00\", \"2019-09-29T00:00:00-04:00\", \"2019-09-30T00:00:00-04:00\", \"2019-10-01T00:00:00-04:00\", \"2019-10-02T00:00:00-04:00\", \"2019-10-03T00:00:00-04:00\", \"2019-10-04T00:00:00-04:00\", \"2019-10-05T00:00:00-04:00\", \"2019-10-06T00:00:00-04:00\", \"2019-10-07T00:00:00-04:00\", \"2019-10-08T00:00:00-04:00\", \"2019-10-09T00:00:00-04:00\", \"2019-10-10T00:00:00-04:00\", \"2019-10-11T00:00:00-04:00\", \"2019-10-12T00:00:00-04:00\", \"2019-10-13T00:00:00-04:00\", \"2019-10-14T00:00:00-04:00\", \"2019-10-15T00:00:00-04:00\", \"2019-10-16T00:00:00-04:00\", \"2019-10-17T00:00:00-04:00\", \"2019-10-18T00:00:00-04:00\", \"2019-10-19T00:00:00-04:00\", \"2019-10-20T00:00:00-04:00\", \"2019-10-21T00:00:00-04:00\", \"2019-10-22T00:00:00-04:00\", \"2019-10-23T00:00:00-04:00\", \"2019-10-24T00:00:00-04:00\", \"2019-10-25T00:00:00-04:00\", \"2019-10-26T00:00:00-04:00\", \"2019-10-27T00:00:00-04:00\", \"2019-10-28T00:00:00-04:00\", \"2019-10-29T00:00:00-04:00\", \"2019-10-30T00:00:00-04:00\", \"2019-10-31T00:00:00-04:00\", \"2019-11-01T00:00:00-04:00\", \"2019-11-02T00:00:00-04:00\", \"2019-11-03T00:00:00-04:00\", \"2019-11-04T00:00:00-05:00\", \"2019-11-05T00:00:00-05:00\", \"2019-11-06T00:00:00-05:00\", \"2019-11-07T00:00:00-05:00\", \"2019-11-08T00:00:00-05:00\", \"2019-11-09T00:00:00-05:00\", \"2019-11-10T00:00:00-05:00\", \"2019-11-11T00:00:00-05:00\", \"2019-11-12T00:00:00-05:00\", \"2019-11-13T00:00:00-05:00\", \"2019-11-14T00:00:00-05:00\", \"2019-11-15T00:00:00-05:00\", \"2019-11-16T00:00:00-05:00\", \"2019-11-17T00:00:00-05:00\", \"2019-11-18T00:00:00-05:00\", \"2019-11-19T00:00:00-05:00\", \"2019-11-20T00:00:00-05:00\", \"2019-11-21T00:00:00-05:00\", \"2019-11-22T00:00:00-05:00\", \"2019-11-23T00:00:00-05:00\", \"2019-11-24T00:00:00-05:00\", \"2019-11-25T00:00:00-05:00\", \"2019-11-26T00:00:00-05:00\", \"2019-11-27T00:00:00-05:00\", \"2019-11-28T00:00:00-05:00\", \"2019-11-29T00:00:00-05:00\", \"2019-11-30T00:00:00-05:00\", \"2019-12-01T00:00:00-05:00\", \"2019-12-02T00:00:00-05:00\", \"2019-12-03T00:00:00-05:00\", \"2019-12-04T00:00:00-05:00\", \"2019-12-05T00:00:00-05:00\", \"2019-12-06T00:00:00-05:00\", \"2019-12-07T00:00:00-05:00\", \"2019-12-08T00:00:00-05:00\", \"2019-12-09T00:00:00-05:00\", \"2019-12-10T00:00:00-05:00\", \"2019-12-11T00:00:00-05:00\", \"2019-12-12T00:00:00-05:00\", \"2019-12-13T00:00:00-05:00\", \"2019-12-14T00:00:00-05:00\", \"2019-12-15T00:00:00-05:00\", \"2019-12-16T00:00:00-05:00\", \"2019-12-17T00:00:00-05:00\", \"2019-12-18T00:00:00-05:00\", \"2019-12-19T00:00:00-05:00\", \"2019-12-20T00:00:00-05:00\", \"2019-12-21T00:00:00-05:00\", \"2019-12-22T00:00:00-05:00\", \"2019-12-23T00:00:00-05:00\", \"2019-12-24T00:00:00-05:00\", \"2019-12-25T00:00:00-05:00\", \"2019-12-26T00:00:00-05:00\", \"2019-12-27T00:00:00-05:00\", \"2019-12-28T00:00:00-05:00\", \"2019-12-29T00:00:00-05:00\", \"2019-12-30T00:00:00-05:00\", \"2019-12-31T00:00:00-05:00\", \"2020-01-01T00:00:00-05:00\", \"2020-01-02T00:00:00-05:00\", \"2020-01-03T00:00:00-05:00\", \"2020-01-04T00:00:00-05:00\", \"2020-01-05T00:00:00-05:00\", \"2020-01-06T00:00:00-05:00\", \"2020-01-07T00:00:00-05:00\", \"2020-01-08T00:00:00-05:00\", \"2020-01-09T00:00:00-05:00\", \"2020-01-10T00:00:00-05:00\", \"2020-01-11T00:00:00-05:00\", \"2020-01-12T00:00:00-05:00\", \"2020-01-13T00:00:00-05:00\", \"2020-01-14T00:00:00-05:00\", \"2020-01-15T00:00:00-05:00\", \"2020-01-16T00:00:00-05:00\", \"2020-01-17T00:00:00-05:00\", \"2020-01-18T00:00:00-05:00\", \"2020-01-19T00:00:00-05:00\", \"2020-01-20T00:00:00-05:00\", \"2020-01-21T00:00:00-05:00\", \"2020-01-22T00:00:00-05:00\", \"2020-01-23T00:00:00-05:00\", \"2020-01-24T00:00:00-05:00\", \"2020-01-25T00:00:00-05:00\", \"2020-01-26T00:00:00-05:00\", \"2020-01-27T00:00:00-05:00\", \"2020-01-28T00:00:00-05:00\", \"2020-01-29T00:00:00-05:00\", \"2020-01-30T00:00:00-05:00\", \"2020-01-31T00:00:00-05:00\", \"2020-02-01T00:00:00-05:00\", \"2020-02-02T00:00:00-05:00\", \"2020-02-03T00:00:00-05:00\", \"2020-02-04T00:00:00-05:00\", \"2020-02-05T00:00:00-05:00\", \"2020-02-06T00:00:00-05:00\", \"2020-02-07T00:00:00-05:00\", \"2020-02-08T00:00:00-05:00\", \"2020-02-09T00:00:00-05:00\", \"2020-02-10T00:00:00-05:00\", \"2020-02-11T00:00:00-05:00\", \"2020-02-12T00:00:00-05:00\", \"2020-02-13T00:00:00-05:00\", \"2020-02-14T00:00:00-05:00\", \"2020-02-15T00:00:00-05:00\", \"2020-02-16T00:00:00-05:00\", \"2020-02-17T00:00:00-05:00\", \"2020-02-18T00:00:00-05:00\", \"2020-02-19T00:00:00-05:00\", \"2020-02-20T00:00:00-05:00\", \"2020-02-21T00:00:00-05:00\", \"2020-02-22T00:00:00-05:00\", \"2020-02-23T00:00:00-05:00\", \"2020-02-24T00:00:00-05:00\", \"2020-02-25T00:00:00-05:00\", \"2020-02-26T00:00:00-05:00\", \"2020-02-27T00:00:00-05:00\", \"2020-02-28T00:00:00-05:00\", \"2020-02-29T00:00:00-05:00\", \"2020-03-01T00:00:00-05:00\", \"2020-03-02T00:00:00-05:00\", \"2020-03-03T00:00:00-05:00\", \"2020-03-04T00:00:00-05:00\", \"2020-03-05T00:00:00-05:00\", \"2020-03-06T00:00:00-05:00\", \"2020-03-07T00:00:00-05:00\", \"2020-03-08T00:00:00-05:00\", \"2020-03-09T00:00:00-04:00\", \"2020-03-10T00:00:00-04:00\", \"2020-03-11T00:00:00-04:00\", \"2020-03-12T00:00:00-04:00\", \"2020-03-13T00:00:00-04:00\", \"2020-03-14T00:00:00-04:00\"], \"y\": [0.6897222222222222, 3.026111111111111, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1963888888888889, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.511388888888889, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1288888888888888, 0.6422222222222222, 3.241388888888889, 0.0, 0.0, 0.63, 0.18388888888888888, 0.0, 0.0, 0.0, 0.7266666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.5330555555555556, 1.4955555555555555, 0.0, 2.143611111111111, 0.25305555555555553, 1.0597222222222222, 0.0, 0.0, 1.3447222222222222, 1.2586111111111111, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.28444444444444444, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.5888888888888888, 0.0, 0.0, 0.0, 0.0, 0.0, 1.386111111111111, 0.43444444444444447, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.926111111111111, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.8611111111111112, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.756388888888889, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0055555555555555, 0.5136111111111111, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0930555555555554, 0.0, 0.0, 1.3972222222222221, 0.0, 0.0, 4.253611111111111, 3.097777777777778, 0.6669444444444445, 1.4416666666666667, 4.195555555555556, 4.3180555555555555, 7.589722222222222, 3.9363888888888887, 1.8019444444444443, 5.110277777777778, 6.115277777777778, 3.311111111111111, 1.5955555555555556, 0.0, 2.5694444444444446, 2.120833333333333, 1.8552777777777778, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.043333333333333335, 0.0, 0.23527777777777778, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006388888888888889, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.5991666666666666]}], {\"hovermode\": \"x\", \"margin\": {\"pad\": 0}, \"template\": {\"data\": {\"bar\": [{\"error_x\": {\"color\": \"#2a3f5f\"}, \"error_y\": {\"color\": \"#2a3f5f\"}, \"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"bar\"}], \"barpolar\": [{\"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"barpolar\"}], \"carpet\": [{\"aaxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"baxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"type\": \"carpet\"}], \"choropleth\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"choropleth\"}], \"contour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"contour\"}], \"contourcarpet\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"contourcarpet\"}], \"heatmap\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmap\"}], \"heatmapgl\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmapgl\"}], \"histogram\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"histogram\"}], \"histogram2d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2d\"}], \"histogram2dcontour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2dcontour\"}], \"mesh3d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"mesh3d\"}], \"parcoords\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"parcoords\"}], \"pie\": [{\"automargin\": true, \"type\": \"pie\"}], \"scatter\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter\"}], \"scatter3d\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter3d\"}], \"scattercarpet\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattercarpet\"}], \"scattergeo\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergeo\"}], \"scattergl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergl\"}], \"scattermapbox\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattermapbox\"}], \"scatterpolar\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolar\"}], \"scatterpolargl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolargl\"}], \"scatterternary\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterternary\"}], \"surface\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"surface\"}], \"table\": [{\"cells\": {\"fill\": {\"color\": \"#EBF0F8\"}, \"line\": {\"color\": \"white\"}}, \"header\": {\"fill\": {\"color\": \"#C8D4E3\"}, \"line\": {\"color\": \"white\"}}, \"type\": \"table\"}]}, \"layout\": {\"annotationdefaults\": {\"arrowcolor\": \"#2a3f5f\", \"arrowhead\": 0, \"arrowwidth\": 1}, \"coloraxis\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"colorscale\": {\"diverging\": [[0, \"#8e0152\"], [0.1, \"#c51b7d\"], [0.2, \"#de77ae\"], [0.3, \"#f1b6da\"], [0.4, \"#fde0ef\"], [0.5, \"#f7f7f7\"], [0.6, \"#e6f5d0\"], [0.7, \"#b8e186\"], [0.8, \"#7fbc41\"], [0.9, \"#4d9221\"], [1, \"#276419\"]], \"sequential\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"sequentialminus\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]]}, \"colorway\": [\"#636efa\", \"#EF553B\", \"#00cc96\", \"#ab63fa\", \"#FFA15A\", \"#19d3f3\", \"#FF6692\", \"#B6E880\", \"#FF97FF\", \"#FECB52\"], \"font\": {\"color\": \"#2a3f5f\"}, \"geo\": {\"bgcolor\": \"white\", \"lakecolor\": \"white\", \"landcolor\": \"#E5ECF6\", \"showlakes\": true, \"showland\": true, \"subunitcolor\": \"white\"}, \"hoverlabel\": {\"align\": \"left\"}, \"hovermode\": \"closest\", \"mapbox\": {\"style\": \"light\"}, \"paper_bgcolor\": \"white\", \"plot_bgcolor\": \"#E5ECF6\", \"polar\": {\"angularaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"radialaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"scene\": {\"xaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"yaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"zaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}}, \"shapedefaults\": {\"line\": {\"color\": \"#2a3f5f\"}}, \"ternary\": {\"aaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"baxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"caxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"title\": {\"x\": 0.05}, \"xaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}, \"yaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}}}, \"title\": {\"text\": \"total hours commited: 93.35\"}, \"yaxis\": {\"title\": {\"text\": \"hours per 1 d\"}}}, {\"responsive\": true} ) }; Individual work sessions for the hourly project are documented below. Note We have used work_log.header_depth=3 option for clocking in/out so that H3 headers are generated","title":"Hourly's WorkLog"},{"location":"WorkLog.html#2020-03-14-204154111416-clock-out","text":"ENH - can run hourly commands from repo subdirectories test subdir version push testing hourly in subdir","title":"2020-03-14 20:41:54.111416: clock-out"},{"location":"WorkLog.html#2020-03-14-203240658394-clock-in","text":"","title":"2020-03-14 20:32:40.658394: clock-in"},{"location":"WorkLog.html#sat-mar-14-191306-2020-0500-clock-out","text":"had to clock out manually during wip","title":"Sat Mar 14 19:13:06 2020 -0500: clock-out"},{"location":"WorkLog.html#2020-03-14-185634870426-clock-in","text":"","title":"2020-03-14 18:56:34.870426: clock-in"},{"location":"WorkLog.html#2020-03-14-162531198516-clock-out","text":"hydra does not respect os.chdir !","title":"2020-03-14 16:25:31.198516: clock-out"},{"location":"WorkLog.html#2020-03-14-151520182542-clock-in","text":"fixing yaml includes for docs","title":"2020-03-14 15:15:20.182542: clock-in"},{"location":"WorkLog.html#2020-01-29-235937202116-clock-out","text":"fixed bug preventing users from clocking in","title":"2020-01-29 23:59:37.202116: clock-out"},{"location":"WorkLog.html#2020-01-29-234529962519-clock-in","text":"","title":"2020-01-29 23:45:29.962519: clock-in"},{"location":"WorkLog.html#2020-01-28-201253326321-clock-out","text":"fixed MANIFEST since cli moved into hourly module","title":"2020-01-28 20:12:53.326321: clock-out"},{"location":"WorkLog.html#2020-01-28-201017270214-clock-in","text":"fixed ignore bug preventing timesheet generation 0.3.10 changed install path to hourly/cli","title":"2020-01-28 20:10:17.270214: clock-in"},{"location":"WorkLog.html#2020-01-14-190253559393-clock-out","text":"0.3.9 fixed timesheet filename bug","title":"2020-01-14 19:02:53.559393: clock-out"},{"location":"WorkLog.html#2020-01-14-184730370225-clock-in","text":"0.3.8","title":"2020-01-14 18:47:30.370225: clock-in"},{"location":"WorkLog.html#2020-01-14-184110382420-clock-out","text":"fixed tminus code clean up switching to 'foo' in cfg.bar","title":"2020-01-14 18:41:10.382420: clock-out"},{"location":"WorkLog.html#2020-01-14-173253638696-clock-in","text":"pushing version","title":"2020-01-14 17:32:53.638696: clock-in"},{"location":"WorkLog.html#2020-01-14-023057609792-clock-out","text":"fixed bugs in invoice generation","title":"2020-01-14 02:30:57.609792: clock-out"},{"location":"WorkLog.html#2020-01-14-020318253023-clock-in","text":"trying to figure out submodules","title":"2020-01-14 02:03:18.253023: clock-in"},{"location":"WorkLog.html#2020-01-14-000815447796-clock-out","text":"minor doc changes updated remaining docs to reflect hourly-report changed README to reflect new hourly-report syntax fixed bug in invoice generation created hourly-report cli, cleaned up initialization code cli overrides broke grouping fixed bug where command line args were ignored by config_override turned off time sheet generation by default, updated README usage section","title":"2020-01-14 00:08:15.447796: clock-out"},{"location":"WorkLog.html#2020-01-13-220100641375-clock-in","text":"changing maxwidth again","title":"2020-01-13 22:01:00.641375: clock-in"},{"location":"WorkLog.html#2020-01-12-172003651580-clock-out","text":"changed earnings calculation to dictionary added verbosity setting, error handling moved invoicing code into their own module","title":"2020-01-12 17:20:03.651580: clock-out"},{"location":"WorkLog.html#2020-01-12-151108113248-clock-in","text":"","title":"2020-01-12 15:11:08.113248: clock-in"},{"location":"WorkLog.html#2020-01-12-094004640256-clock-out","text":"corrected MANIFEST.in path","title":"2020-01-12 09:40:04.640256: clock-out"},{"location":"WorkLog.html#2020-01-12-093724327410-clock-in","text":"removing Dashboard prototyping notebook","title":"2020-01-12 09:37:24.327410: clock-in"},{"location":"WorkLog.html#2020-01-12-090600564390-clock-out-t-20m","text":"updated README intro","title":"2020-01-12 09:06:00.564390: clock-out: T-20m"},{"location":"WorkLog.html#2020-01-12-082325178670-clock-in","text":"","title":"2020-01-12 08:23:25.178670: clock-in"},{"location":"WorkLog.html#2020-01-10-202655510181-clock-out","text":"","title":"2020-01-10 20:26:55.510181: clock-out"},{"location":"WorkLog.html#2020-01-10-202324001918-clock-in","text":"","title":"2020-01-10 20:23:24.001918: clock-in"},{"location":"WorkLog.html#2020-01-10-104114079277-clock-out","text":"simplifying btcpay setup updated btcpay config docs","title":"2020-01-10 10:41:14.079277: clock-out"},{"location":"WorkLog.html#2020-01-10-091140795394-clock-in","text":"","title":"2020-01-10 09:11:40.795394: clock-in"},{"location":"WorkLog.html#2020-01-09-235509691335-clock-out","text":"added work graph to WorkLog docs","title":"2020-01-09 23:55:09.691335: clock-out"},{"location":"WorkLog.html#2020-01-09-235230625119-clock-in","text":"","title":"2020-01-09 23:52:30.625119: clock-in"},{"location":"WorkLog.html#2020-01-09-233009366730-clock-out","text":"actually added MANIFEST.in this time updating docs","title":"2020-01-09 23:30:09.366730: clock-out"},{"location":"WorkLog.html#2020-01-09-222201026039-clock-in","text":"corrected invoice notification docs","title":"2020-01-09 22:22:01.026039: clock-in"},{"location":"WorkLog.html#2020-01-09-110035544185-clock-out","text":"added MANIFEST.in got hydra.errors.MissingConfigException on mac","title":"2020-01-09 11:00:35.544185: clock-out"},{"location":"WorkLog.html#2020-01-09-103421933690-clock-in","text":"","title":"2020-01-09 10:34:21.933690: clock-in"},{"location":"WorkLog.html#2020-01-09-091901967756-clock-out","text":"updated usage examples version update","title":"2020-01-09 09:19:01.967756: clock-out"},{"location":"WorkLog.html#2020-01-09-090620553382-clock-in","text":"adding stripe screen shot","title":"2020-01-09 09:06:20.553382: clock-in"},{"location":"WorkLog.html#2020-01-09-032349529611-clock-out","text":"added further install instructions","title":"2020-01-09 03:23:49.529611: clock-out"},{"location":"WorkLog.html#2020-01-09-032204616199-clock-in","text":"updating graph again.. I should really fix this","title":"2020-01-09 03:22:04.616199: clock-in"},{"location":"WorkLog.html#2020-01-09-025924294923-clock-out","text":"fixed up requirements","title":"2020-01-09 02:59:24.294923: clock-out"},{"location":"WorkLog.html#2020-01-09-024745455102-clock-in","text":"updated press release to include stripe redirected to Authors notes rather than email updating work graph","title":"2020-01-09 02:47:45.455102: clock-in"},{"location":"WorkLog.html#2020-01-09-023500616095-clock-out","text":"","title":"2020-01-09 02:35:00.616095: clock-out"},{"location":"WorkLog.html#2020-01-09-011648954647-clock-in","text":"","title":"2020-01-09 01:16:48.954647: clock-in"},{"location":"WorkLog.html#2020-01-09-011418157882-clock-out-t-10m","text":"anonymized default stripe customer, changed invoice footer yo quieter logging from stripe api kept invoice config from sharing customer data between repos updated requirements.txt to include hydra fixed bug that raised error when only start or end given","title":"2020-01-09 01:14:18.157882: clock-out: T-10m"},{"location":"WorkLog.html#2020-01-08-222820520139-clock-in","text":"","title":"2020-01-08 22:28:20.520139: clock-in"},{"location":"WorkLog.html#2020-01-08-033604021070-clock-out","text":"Got stripe integration! Refactored invoice configuration Simplified invoice command: hourly invoice=btcpay or hourly invoice=stripe","title":"2020-01-08 03:36:04.021070: clock-out"},{"location":"WorkLog.html#2020-01-08-000507910803-clock-in","text":"","title":"2020-01-08 00:05:07.910803: clock-in"},{"location":"WorkLog.html#2020-01-07-195309572565-clock-out","text":"started stripe integration added FAQ","title":"2020-01-07 19:53:09.572565: clock-out"},{"location":"WorkLog.html#2020-01-07-171347825366-clock-in-t-13m","text":"updated compensation docs","title":"2020-01-07 17:13:47.825366: clock-in: T-13m"},{"location":"WorkLog.html#2020-01-07-020110275284-clock-out","text":"attending announcement on bitcoinmeister show added documentation on compensation","title":"2020-01-07 02:01:10.275284: clock-out"},{"location":"WorkLog.html#2020-01-07-010838620674-clock-in","text":"pushing updated graph set plot hovermode to compare, updated docs","title":"2020-01-07 01:08:38.620674: clock-in"},{"location":"WorkLog.html#2020-01-07-002637876624-clock-out","text":"updated docs - added press release","title":"2020-01-07 00:26:37.876624: clock-out"},{"location":"WorkLog.html#2020-01-07-002501659294-clock-in-t-35m","text":"","title":"2020-01-07 00:25:01.659294: clock-in: T-35m"},{"location":"WorkLog.html#2020-01-06-234906433811-clock-out","text":"writing hourly blurb for bitcoin&markets newsletter updated configuration README","title":"2020-01-06 23:49:06.433811: clock-out"},{"location":"WorkLog.html#2020-01-06-230359405807-clock-in","text":"Need to send blurb to Ansel by friday, mention upwork, write up what you know about tradeoffs with lightning (costs, availability, etc) Need to add a gui and dockerize minor site fixes adding btcpay invoice screenshot fixed typo in docs, updated version touching up documentation updating work graph for hourly repo","title":"2020-01-06 23:03:59.405807: clock-in"},{"location":"WorkLog.html#2020-01-06-145228511302-clock-out","text":"merging with master BUGFIX force exit if btcpay-python not installed","title":"2020-01-06 14:52:28.511302: clock-out"},{"location":"WorkLog.html#2020-01-06-144834209232-clock-in-t-10m","text":"","title":"2020-01-06 14:48:34.209232: clock-in: T-10m"},{"location":"WorkLog.html#2020-01-06-005744096012-clock-out","text":"","title":"2020-01-06 00:57:44.096012: clock-out"},{"location":"WorkLog.html#2020-01-05-234831655464-clock-in-t-25m","text":"","title":"2020-01-05 23:48:31.655464: clock-in: T-25m"},{"location":"WorkLog.html#2020-01-05-232217765638-clock-out","text":"prompting user for confirmation renamed hourly-config.yaml to hourly.yaml","title":"2020-01-05 23:22:17.765638: clock-out"},{"location":"WorkLog.html#2020-01-05-211755844445-clock-in","text":"","title":"2020-01-05 21:17:55.844445: clock-in"},{"location":"WorkLog.html#2020-01-05-205843148966-clock-out","text":"documenting grouped config","title":"2020-01-05 20:58:43.148966: clock-out"},{"location":"WorkLog.html#2020-01-05-204323467637-clock-in","text":"","title":"2020-01-05 20:43:23.467637: clock-in"},{"location":"WorkLog.html#2020-01-05-173441710447-clock-out","text":"refactoring configuration using config groups does it make sense to be able to issue an invoice on behalf of someone else? it's the responsibilty of the employer to make sure the invoice their getting is from the right person","title":"2020-01-05 17:34:41.710447: clock-out"},{"location":"WorkLog.html#2020-01-05-162901786457-clock-in","text":"","title":"2020-01-05 16:29:01.786457: clock-in"},{"location":"WorkLog.html#2020-01-05-160322389791-clock-out","text":"refactoring","title":"2020-01-05 16:03:22.389791: clock-out"},{"location":"WorkLog.html#2020-01-05-153233929020-clock-in","text":"","title":"2020-01-05 15:32:33.929020: clock-in"},{"location":"WorkLog.html#2020-01-05-025959550127-clock-out","text":"adding user_id to report.filename got hourly to issue first btcpayserver invoice!","title":"2020-01-05 02:59:59.550127: clock-out"},{"location":"WorkLog.html#2020-01-04-225921370595-clock-in","text":"","title":"2020-01-04 22:59:21.370595: clock-in"},{"location":"WorkLog.html#2020-01-04-200620516946-clock-out","text":"working with pem files changed default max column to match hash length","title":"2020-01-04 20:06:20.516946: clock-out"},{"location":"WorkLog.html#2020-01-04-185653105369-clock-in","text":"","title":"2020-01-04 18:56:53.105369: clock-in"},{"location":"WorkLog.html#2020-01-04-153504070440-clock-out","text":"moving invoice into cli setting up environment variable interpolation using OmegaConf.to_container(cfg) cannot load a private key from environment variable on windows should probably use a private key file","title":"2020-01-04 15:35:04.070440: clock-out"},{"location":"WorkLog.html#2020-01-04-135518699752-clock-in","text":"","title":"2020-01-04 13:55:18.699752: clock-in"},{"location":"WorkLog.html#2020-01-04-130143289508-clock-out","text":"testing first invoice","title":"2020-01-04 13:01:43.289508: clock-out"},{"location":"WorkLog.html#2020-01-04-121611802771-clock-in","text":"","title":"2020-01-04 12:16:11.802771: clock-in"},{"location":"WorkLog.html#2020-01-03-214056858838-clock-out","text":"lightning payments","title":"2020-01-03 21:40:56.858838: clock-out"},{"location":"WorkLog.html#2020-01-03-194554790098-clock-in","text":"","title":"2020-01-03 19:45:54.790098: clock-in"},{"location":"WorkLog.html#2020-01-03-193157414479-clock-out","text":"looking at btcpayserver trying exitpay https://btc.exitpay.org/ found exitpay confirmation email in spam folder","title":"2020-01-03 19:31:57.414479: clock-out"},{"location":"WorkLog.html#2020-01-03-174404019146-clock-in","text":"updating graph","title":"2020-01-03 17:44:04.019146: clock-in"},{"location":"WorkLog.html#2020-01-03-142845356496-clock-out","text":"addressing helpful hydra hints from Omry documentation improvements","title":"2020-01-03 14:28:45.356496: clock-out"},{"location":"WorkLog.html#2020-01-03-135235768769-clock-in","text":"","title":"2020-01-03 13:52:35.768769: clock-in"},{"location":"WorkLog.html#2020-01-02-185349974457-clock-out","text":"added ability to group timesheets by name or email or both fixed bug where user can accidentally clock in twice if a non-clock message is committed changed report.outfile to report.filename added multiple users to plot removed click app documentation updates","title":"2020-01-02 18:53:49.974457: clock-out"},{"location":"WorkLog.html#2020-01-02-144206286717-clock-in","text":"","title":"2020-01-02 14:42:06.286717: clock-in"},{"location":"WorkLog.html#2020-01-01-135229717923-clock-out","text":"adding ability to clock in multiple users check which email address is being used to clock in/out. git config user.email can be used to check which email is configured for the current repo can get name or email from author","title":"2020-01-01 13:52:29.717923: clock-out"},{"location":"WorkLog.html#2020-01-01-122559286809-clock-in","text":"","title":"2020-01-01 12:25:59.286809: clock-in"},{"location":"WorkLog.html#2019-12-31-145448254974-clock-out","text":"","title":"2019-12-31 14:54:48.254974: clock-out"},{"location":"WorkLog.html#2019-12-31-141447319391-clock-in","text":"","title":"2019-12-31 14:14:47.319391: clock-in"},{"location":"WorkLog.html#2019-12-30-152356531080-clock-out","text":"","title":"2019-12-30 15:23:56.531080: clock-out"},{"location":"WorkLog.html#2019-12-30-152244136505-clock-in","text":"","title":"2019-12-30 15:22:44.136505: clock-in"},{"location":"WorkLog.html#2019-12-30-152218590328-clock-out","text":"documentation and hydra code push cleaned up output for clock-in and clock-out messages updated documentation site to reflect move to hydra","title":"2019-12-30 15:22:18.590328: clock-out"},{"location":"WorkLog.html#2019-12-30-121738426420-clock-in","text":"","title":"2019-12-30 12:17:38.426420: clock-in"},{"location":"WorkLog.html#2019-12-29-222823663515-clock-out","text":"switching from click to hydra involves some caveats. I really dislike the practice of deprecation, which often breaks things that didn't need fixing. My goal is to minimize that pain for users of the old app. To that end: keep existing cli while in development to ensure behavior can be replicated create a unique (temporary?) name for new app (e.g. myapp-hydra or myapp-cli) replace common flags with separate cli tools. For instance, myapp -myflag becomes myapp-myflag , where myapp-myflag wraps the interface myapp-cli myflag=true This last one means there is actually one less character to write. added dictConfig_to_dict function to recursively construct nested dict pandas.set_option takes names like display.max_colwidth got hourly-in, hourly-out functional not sure how to make command-line inputs override config_override setting","title":"2019-12-29 22:28:23.663515: clock-out"},{"location":"WorkLog.html#2019-12-29-194203967359-clock-in","text":"","title":"2019-12-29 19:42:03.967359: clock-in"},{"location":"WorkLog.html#2019-12-29-180255046177-clock-out","text":"developing cli with hydra","title":"2019-12-29 18:02:55.046177: clock-out"},{"location":"WorkLog.html#2019-12-29-163402562291-clock-in","text":"","title":"2019-12-29 16:34:02.562291: clock-in"},{"location":"WorkLog.html#2019-12-26-130503226272-clock-out","text":"working on refactoring cli with new config adding ability to commit messages without clocking user should not have to directly edit work log","title":"2019-12-26 13:05:03.226272: clock-out"},{"location":"WorkLog.html#2019-12-26-114113289307-clock-in","text":"","title":"2019-12-26 11:41:13.289307: clock-in"},{"location":"WorkLog.html#2019-12-23-134232292273-clock-out","text":"switching to hydra this changes the cli from hourly -in to hourly commit.clock=in finished up the first iteration of the cli spec!","title":"2019-12-23 13:42:32.292273: clock-out"},{"location":"WorkLog.html#2019-12-23-120657928740-clock-in-t-30m","text":"","title":"2019-12-23 12:06:57.928740: clock-in: T-30m"},{"location":"WorkLog.html#2019-12-01-132131816735-clock-out","text":"trying out different plot options looking into configuration setup","title":"2019-12-01 13:21:31.816735: clock-out"},{"location":"WorkLog.html#2019-12-01-125042892528-clock-in","text":"","title":"2019-12-01 12:50:42.892528: clock-in"},{"location":"WorkLog.html#2019-11-30-161945897554-clock-out","text":"embedding work graph as iframe changing --plot option to specify path/to/work-graph.html","title":"2019-11-30 16:19:45.897554: clock-out"},{"location":"WorkLog.html#2019-11-30-152551433329-clock-in","text":"","title":"2019-11-30 15:25:51.433329: clock-in"},{"location":"WorkLog.html#2019-11-30-150732727339-clock-out","text":"Testing header depth option","title":"2019-11-30 15:07:32.727339: clock-out"},{"location":"WorkLog.html#2019-11-30-150534680440-clock-in","text":"","title":"2019-11-30 15:05:34.680440: clock-in"},{"location":"WorkLog.html#2019-11-30-145811651795-clock-out","text":"updating docs added worklog header depth option","title":"2019-11-30 14:58:11.651795: clock-out"},{"location":"WorkLog.html#2019-11-30-135343831968-clock-in","text":"","title":"2019-11-30 13:53:43.831968: clock-in"},{"location":"WorkLog.html#2019-10-23-225548632734-clock-out","text":"","title":"2019-10-23 22:55:48.632734: clock-out"},{"location":"WorkLog.html#2019-10-23-211025808038-clock-in","text":"","title":"2019-10-23 21:10:25.808038: clock-in"},{"location":"WorkLog.html#2019-09-19-214737949509-clock-out","text":"Moved time adjustment so it only applies at labor calculation, in clock commits","title":"2019-09-19 21:47:37.949509: clock-out"},{"location":"WorkLog.html#2019-09-19-211346261481-clock-in","text":"","title":"2019-09-19 21:13:46.261481: clock-in"},{"location":"WorkLog.html#2019-09-19-204324455285-clock-out","text":"pysat contains commits with ROCSAT-1, which breaks time adjustment","title":"2019-09-19 20:43:24.455285: clock-out"},{"location":"WorkLog.html#2019-09-19-203326659734-clock-in","text":"","title":"2019-09-19 20:33:26.659734: clock-in"},{"location":"WorkLog.html#2019-09-19-202552236443-clock-out","text":"testing on pysat repo","title":"2019-09-19 20:25:52.236443: clock-out"},{"location":"WorkLog.html#2019-09-19-201801673816-clock-in","text":"","title":"2019-09-19 20:18:01.673816: clock-in"},{"location":"WorkLog.html#2019-08-21-011715009128-clock-out-added-plot-options","text":"add plot output","title":"2019-08-21 01:17:15.009128: clock-out: added plot options"},{"location":"WorkLog.html#2019-08-20-232141235199-clock-in","text":"","title":"2019-08-20 23:21:41.235199: clock-in"},{"location":"WorkLog.html#2019-08-14-003048962283-clock-out","text":"failed to fix utc error when giving only start time","title":"2019-08-14 00:30:48.962283: clock-out"},{"location":"WorkLog.html#2019-08-14-001241780463-clock-in-t-7m","text":"","title":"2019-08-14 00:12:41.780463: clock-in: T-7m"},{"location":"WorkLog.html#2019-08-14-000512536012-clock-out","text":"Testing new output for double clock in warning","title":"2019-08-14 00:05:12.536012: clock-out"},{"location":"WorkLog.html#2019-08-14-000416778490-clock-in","text":"","title":"2019-08-14 00:04:16.778490: clock-in"},{"location":"WorkLog.html#2019-08-14-000404274688-clock-out","text":"","title":"2019-08-14 00:04:04.274688: clock-out"},{"location":"WorkLog.html#2019-08-14-000357681741-clock-in-t-1h22m","text":"","title":"2019-08-14 00:03:57.681741: clock-in: T-1h22m"},{"location":"WorkLog.html#2019-08-13-224045276268-clock-out","text":"bug: negative dt when listing work for one day UTC bug occurs when no end date is specified removed default from wage option Got table into gui","title":"2019-08-13 22:40:45.276268: clock-out"},{"location":"WorkLog.html#2019-08-13-223942742055-clock-in","text":"","title":"2019-08-13 22:39:42.742055: clock-in"},{"location":"WorkLog.html#2019-08-07-235123947759-clock-out-t-15m","text":"upgrading to python 3.7 cleaned up output for when no labor is available prototyping gui bug when date range covers different UTC offsets, which can occur during travel: 2018-10-28 13:44:48-04:00 clock in c4e95f59dc0c8ce296a40300760ab6880... 2018-10-28 13:56:35-04:00 clock out f5200e718c062e828d436506286fd05e5... 2019-02-25 10:19:10-05:00 clock in T-1hr d7add63b4d2e3e1ca1423296aaed25d9c... 2019-02-25 12:49:51-05:00 clock out T-5m acfb8596317786e38177345aa25310980... 2019-03-10 22:57:58-04:00 clock in 217ad6169fbd10efbb1e497a6cc6e4553... 2019-03-11 00:05:42-04:00 clock out - integrating with read... 297a561d5d7c57ecb641fa841d86dc5a6...","title":"2019-08-07 23:51:23.947759: clock-out: T-15m"},{"location":"WorkLog.html#2019-08-07-220103125488-clock-in","text":"","title":"2019-08-07 22:01:03.125488: clock-in"},{"location":"WorkLog.html#2019-06-19-190319375329-clock-out","text":"","title":"2019-06-19 19:03:19.375329: clock-out"},{"location":"WorkLog.html#2019-06-19-181154185775-clock-in","text":"","title":"2019-06-19 18:11:54.185775: clock-in"},{"location":"WorkLog.html#2019-06-19-145637451578-clock-out-t-5m","text":"Weasyprint looks like the easiest path to generating pdfs Look at their invoice example","title":"2019-06-19 14:56:37.451578: clock-out: T-5m"},{"location":"WorkLog.html#2019-06-19-143223261121-clock-in","text":"","title":"2019-06-19 14:32:23.261121: clock-in"},{"location":"WorkLog.html#2019-06-13-183623538048-clock-out","text":"Looking at generating invoices in pdf","title":"2019-06-13 18:36:23.538048: clock-out"},{"location":"WorkLog.html#2019-06-13-181919036767-clock-in","text":"","title":"2019-06-13 18:19:19.036767: clock-in"},{"location":"WorkLog.html#2019-04-17-002148211640-clock-out","text":"got c-lightning server running in container on windows 10 had to skip the -u id -u parameter, which means it runs as root have to use docker-machine ip to get the appropriate ip for the windows container got a few of the rest api commands to work, then ran into this: Starting bitcoind... waiting for cookie... waiting for RPC... Error: Error: Disk space is low! may need to delete ./data and start again?","title":"2019-04-17 00:21:48.211640: clock-out"},{"location":"WorkLog.html#2019-04-16-230617688503-clock-in-researching-payments","text":"","title":"2019-04-16 23:06:17.688503: clock-in: researching payments"},{"location":"WorkLog.html#2019-04-16-012150338638-clock-out","text":"Looking into lightning payments https://github.com/ElementsProject/lightning-charge","title":"2019-04-16 01:21:50.338638: clock-out"},{"location":"WorkLog.html#2019-04-16-000109069912-clock-in","text":"","title":"2019-04-16 00:01:09.069912: clock-in"},{"location":"WorkLog.html#2019-04-13-024319905950-clock-out","text":"Looking into payment automation fixed an errant clock-in/out with hard reset: git reset --hard 590804df784c45051c548eb84e930c1157d6acc1 Where I used the last clock-out commit hash from 2019-04-12 18:04:27.744011","title":"2019-04-13 02:43:19.905950: clock-out"},{"location":"WorkLog.html#2019-04-13-022444339725-clock-in-t-45m","text":"","title":"2019-04-13 02:24:44.339725: clock-in: T-45m"},{"location":"WorkLog.html#2019-04-12-180427744011-clock-out","text":"","title":"2019-04-12 18:04:27.744011: clock-out"},{"location":"WorkLog.html#2019-04-12-175358904877-clock-in-payment-options","text":"","title":"2019-04-12 17:53:58.904877: clock-in: payment options"},{"location":"WorkLog.html#2019-04-12-154554653421-clock-out","text":"determine why report sometimes shows negative time deltas","title":"2019-04-12 15:45:54.653421: clock-out"},{"location":"WorkLog.html#2019-04-12-154112003763-clock-in","text":"","title":"2019-04-12 15:41:12.003763: clock-in"},{"location":"WorkLog.html#2019-04-11-024843722703-clock-out","text":"","title":"2019-04-11 02:48:43.722703: clock-out"},{"location":"WorkLog.html#apr-11-2019","text":"Finished in/out flags","title":"Apr 11, 2019"},{"location":"WorkLog.html#apr-8-2019","text":"working on in/out flags","title":"Apr 8, 2019"},{"location":"WorkLog.html#apr-7-2019","text":"Adding \"hourly in/out\" flags Pushing python 3 version Looking into payment options","title":"Apr 7, 2019"},{"location":"WorkLog.html#mar-15-2019","text":"Fixed issue with ignore default","title":"Mar 15, 2019"},{"location":"WorkLog.html#mar-14-2019","text":"bug fixing","title":"Mar 14, 2019"},{"location":"WorkLog.html#mar-12-2019","text":"scrapping readthedocs in favor of github.io starting command-line interface","title":"Mar 12, 2019"},{"location":"WorkLog.html#mar-11-2019","text":"Trying to fix build error","title":"Mar 11, 2019"},{"location":"WorkLog.html#mar-10-2019","text":"Added documentation site Started integration with readthedocs","title":"Mar 10, 2019"},{"location":"WorkLog.html#feb-25-2019","text":"Added clock adjustments Made match_logs option to raise an error when in/out clocks don't match","title":"Feb 25, 2019"},{"location":"WorkLog.html#oct-20-2018","text":"Switched to pd.Timestamp to allow for easier slicing Added timezones Notebook Tutorial runs without errors","title":"Oct 20, 2018"},{"location":"WorkLog.html#oct-28-2018","text":"Removed line breaks from repor","title":"Oct 28, 2018"},{"location":"about.html","text":"Who are you? # I'm Asher, a data scientist from NASA. I've been a full time freelancer since Feb. 2019. Why have you done this? # I created hourly because I needed a free hour tracking tool that would be easy to use and not get in the way of my add/commit/push workflow. Hourly differs from many other tools in the following ways: it's super simple - you commit with a clock-in/out message it doesn't require a database that needs to be managed separately it doesn't spy on you you can be as transparent as you want to be: If you want people to know you're on the clock, just push your clock-in message. Conversely, if you don't want to be bothered, push a clock-out message. These features should make Hourly ideal for freelancers and remote workers. If you need help integrating hourly into your business/workflow, feel free to reach out !","title":"Author's notes"},{"location":"about.html#who-are-you","text":"I'm Asher, a data scientist from NASA. I've been a full time freelancer since Feb. 2019.","title":"Who are you?"},{"location":"about.html#why-have-you-done-this","text":"I created hourly because I needed a free hour tracking tool that would be easy to use and not get in the way of my add/commit/push workflow. Hourly differs from many other tools in the following ways: it's super simple - you commit with a clock-in/out message it doesn't require a database that needs to be managed separately it doesn't spy on you you can be as transparent as you want to be: If you want people to know you're on the clock, just push your clock-in message. Conversely, if you don't want to be bothered, push a clock-out message. These features should make Hourly ideal for freelancers and remote workers. If you need help integrating hourly into your business/workflow, feel free to reach out !","title":"Why have you done this?"},{"location":"btcpayserver.html","text":"BTCPay # Background # BTCPay is a decentralized payment processing platform for accepting cryptocurrency. With BTCpay integration, you can issue invoices and receive crypto payments with maximum privacy and minimal cost. You can use a third-party provider or host it yourself - the only difference will be the domain name used to create the local client. Setup # First you will need to register and create a store on a BTCPay server . There are a few free ones listed on btcpayserver.org , but please use caution when choosing a free service, as there are privacy trade-offs to consider. For maximum privacy and security, host one yourself. Once you've chosen a server, connect a bitcoin wallet to your new store. This can be done in your store's general settings, under Derivation Scheme , where you provide your wallet's xpubkey - BTCPay Server uses this key to generate a unique payment address for every invoice issued. Warning A legitimate BTCPay Server should only ask for your wallet's xpubkey and NEVER YOUR PRIVATE KEY Info BTCPay also supports Lightning invoices, which allows for instant settlement. This involves some tradeoffs in security and availability. Then you will need to install the btcpay-python client pip install btcpay-python Pairing with BTCPay server # Follow these pairing instructions from the kind BTCPay developers. Note These instructions correspond to \"The manual way\" - we want to be able to create a btcpay client on-demand without storing it in a database. I'm essentially repeating their instructions below: Step 1 - Get a pairing code # On your BTCPay server, browse to Stores > Store settings > Access tokens > Create new token Fill in the form: Label: Public key: leave blank Click save and then copy the 7 digit pairing_code from the success page Step 2 - Generate a private key # This can be done with the following code: from btcpay import crypto privkey = crypto . generate_privkey () with open ( 'btcpayserver.pem' , 'w' ) as pem : pem . write ( privkey ) Here we store the private key in a PEM file. By default, hourly will look for btcpayserver.pem in the top level of your git repo, but you can use a different name. Warning Do not add the pem file to your git repo! List it in your .gitignore so you don't do so by accident. Step 3 - Create a client # Create a client using host url of your btcpayserver (e.g. https://btc.exitpay.org) and private key: client = BTCPayClient ( host = host_url , pem = privkey ) Store your server's host url in the environment variable BTCPAYSERVER_HOST . Step 4 - Generate a pairing token # using the pairing code from Step 1 token = client . pair_client ( pairing_code ) merchant_token = token [ 'merchant' ] Save the merchant_token as an environment variable BTCPAYSERVER_MERCHANT Step 5 - Recreate the client # Whenever you like: client = BTCPayClient ( host = host_store , pem = privkey , tokens = token , ) Step 6 - Generate a test invoice # Assuming you have completed the steps to connect a wallet to your btcpayserver, you should be able to run the following code to generate an invoice. new_invoice = client . create_invoice ({ \"price\" : 20 , \"currency\" : \"USD\" }) print ( new_invoice [ 'url' ]) This should give you a payment url you can email to your client/employer. Depending on how you set up your BTCPay Server, the invoice will only be valid for a short period of time (default is 15 minutes). There is a trade-off here: a short time period mitigates the risk of currency fluctuation, but requires that the client/employer must act quickly to pay the invoice. Hourly configuration # Hourly creates a BTCPayClient through the following configuration: # for invoice spec, see https://bitpay.com/api/#rest-api-resources-invoices invoice : btcpay : host : ${env:BTCPAYSERVER_HOST} tokens : merchant : ${env:BTCPAYSERVER_MERCHANT} pem : btcpayserver.pem # file holding btcpayserver private key return_status : false invoice : currency : null # will be honored if set price : null # will be honored if set, else determined by wage orderId : null fullNotifications : True extendedNotifications : True transactionSpeed : medium notificationURL : null # https://mywebhook.com notificationEmail : null # myemail@email.com redirectURL : null # https://yourredirecturl.com buyer : email : null # fox.mulder@trustno.one name : null # Fox Mulder phone : null # 555-123-456 address1 : null # 2630 Hegal Place address2 : null # Apt 42 locality : null # Alexandria region : # VA postalCode : # 23242 country : # US notify : True itemDesc : null # will be honored if set, else hourly will provide This allows hourly to access your environment variables and the pem file you created above. Any of these parameters can be overridden when you run hourly. Here are some examples. hourly-report invoice=btcpay btcpay.pem=<private key> hourly-report invoice=btcpay btcpay.pem=/path/to/other/btcpayserver.pem hourly-report invoice=btcpay btcpay.host=https://myprivateserver.com Hourly Invoicing # If you configured hourly with BTCPay, you can generate an invoice for your git repo in a given date range. Here is what that looks like when applied to the hourly repo: hourly-report invoice=btcpay payment=btcpay repo.start_date=\"Jan 1, 2020\" repo.end_date=\"Jan 6, 2020\" Processing timesheet for Asher Pembroke pay period: 2020-01-03 18:44:04-05:00 -> 2020-01-05 18:34:41-05:00 ignoring pro bono TimeIn LogIn email TimeOut LogOut email TimeDelta Hours 0 2020-01-03 18:44:04-05:00 clock-in apembroke@gmail.com 2020-01-03 20:31:57-05:00 clock-out apembroke@gmail.com 01:47:53 1.798056 1 2020-01-03 20:45:54-05:00 clock-in apembroke@gmail.com 2020-01-03 22:40:56-05:00 clock-out apembroke@gmail.com 01:55:02 1.917222 2 2020-01-04 13:16:11-05:00 clock-in apembroke@gmail.com 2020-01-04 14:01:43-05:00 clock-out apembroke@gmail.com 00:45:32 0.758889 3 2020-01-04 14:55:18-05:00 clock-in apembroke@gmail.com 2020-01-04 16:35:04-05:00 clock-out apembroke@gmail.com 01:39:46 1.662778 4 2020-01-04 19:56:53-05:00 clock-in apembroke@gmail.com 2020-01-04 21:06:20-05:00 clock-out apembroke@gmail.com 01:09:27 1.157500 5 2020-01-04 23:59:21-05:00 clock-in apembroke@gmail.com 2020-01-05 03:59:59-05:00 clock-out apembroke@gmail.com 04:00:38 4.010556 6 2020-01-05 16:32:33-05:00 clock-in apembroke@gmail.com 2020-01-05 17:03:22-05:00 clock-out apembroke@gmail.com 00:30:49 0.513611 7 2020-01-05 17:29:01-05:00 clock-in apembroke@gmail.com 2020-01-05 18:34:41-05:00 clock-out apembroke@gmail.com 01:05:40 1.094444 0 days 12:54:47, 12.91 hours worked 1291.31 USD generating invoice for current user Asher Pembroke buyer: address1: null address2: null country: null email: null locality: null name: null notify: true phone: null postalCode: null region: null currency: USD extendedNotifications: true fullNotifications: true itemDesc: 12.91 hours worked from 2020-01-03T18:44:04-05:00 to 2020-01-05T18:34:41-05:00 notificationEmail: null notificationURL: null orderId: null price: 1291.3055555555554 redirectURL: null transactionSpeed: medium Is this correct? (yes/n)yes Success! Your invoice may be paid here: https://btc.exitpay.org/invoice?id=MoSbFujB7AwcrvfMN21gGC Navigate to the payment url provided:","title":"Btcpayserver"},{"location":"btcpayserver.html#btcpay","text":"","title":"BTCPay"},{"location":"btcpayserver.html#background","text":"BTCPay is a decentralized payment processing platform for accepting cryptocurrency. With BTCpay integration, you can issue invoices and receive crypto payments with maximum privacy and minimal cost. You can use a third-party provider or host it yourself - the only difference will be the domain name used to create the local client.","title":"Background"},{"location":"btcpayserver.html#setup","text":"First you will need to register and create a store on a BTCPay server . There are a few free ones listed on btcpayserver.org , but please use caution when choosing a free service, as there are privacy trade-offs to consider. For maximum privacy and security, host one yourself. Once you've chosen a server, connect a bitcoin wallet to your new store. This can be done in your store's general settings, under Derivation Scheme , where you provide your wallet's xpubkey - BTCPay Server uses this key to generate a unique payment address for every invoice issued. Warning A legitimate BTCPay Server should only ask for your wallet's xpubkey and NEVER YOUR PRIVATE KEY Info BTCPay also supports Lightning invoices, which allows for instant settlement. This involves some tradeoffs in security and availability. Then you will need to install the btcpay-python client pip install btcpay-python","title":"Setup"},{"location":"btcpayserver.html#pairing-with-btcpay-server","text":"Follow these pairing instructions from the kind BTCPay developers. Note These instructions correspond to \"The manual way\" - we want to be able to create a btcpay client on-demand without storing it in a database. I'm essentially repeating their instructions below:","title":"Pairing with BTCPay server"},{"location":"btcpayserver.html#step-1-get-a-pairing-code","text":"On your BTCPay server, browse to Stores > Store settings > Access tokens > Create new token Fill in the form: Label: Public key: leave blank Click save and then copy the 7 digit pairing_code from the success page","title":"Step 1 - Get a pairing code"},{"location":"btcpayserver.html#step-2-generate-a-private-key","text":"This can be done with the following code: from btcpay import crypto privkey = crypto . generate_privkey () with open ( 'btcpayserver.pem' , 'w' ) as pem : pem . write ( privkey ) Here we store the private key in a PEM file. By default, hourly will look for btcpayserver.pem in the top level of your git repo, but you can use a different name. Warning Do not add the pem file to your git repo! List it in your .gitignore so you don't do so by accident.","title":"Step 2 - Generate a private key"},{"location":"btcpayserver.html#step-3-create-a-client","text":"Create a client using host url of your btcpayserver (e.g. https://btc.exitpay.org) and private key: client = BTCPayClient ( host = host_url , pem = privkey ) Store your server's host url in the environment variable BTCPAYSERVER_HOST .","title":"Step 3 - Create a client"},{"location":"btcpayserver.html#step-4-generate-a-pairing-token","text":"using the pairing code from Step 1 token = client . pair_client ( pairing_code ) merchant_token = token [ 'merchant' ] Save the merchant_token as an environment variable BTCPAYSERVER_MERCHANT","title":"Step 4 - Generate a pairing token"},{"location":"btcpayserver.html#step-5-recreate-the-client","text":"Whenever you like: client = BTCPayClient ( host = host_store , pem = privkey , tokens = token , )","title":"Step 5 - Recreate the client"},{"location":"btcpayserver.html#step-6-generate-a-test-invoice","text":"Assuming you have completed the steps to connect a wallet to your btcpayserver, you should be able to run the following code to generate an invoice. new_invoice = client . create_invoice ({ \"price\" : 20 , \"currency\" : \"USD\" }) print ( new_invoice [ 'url' ]) This should give you a payment url you can email to your client/employer. Depending on how you set up your BTCPay Server, the invoice will only be valid for a short period of time (default is 15 minutes). There is a trade-off here: a short time period mitigates the risk of currency fluctuation, but requires that the client/employer must act quickly to pay the invoice.","title":"Step 6 - Generate a test invoice"},{"location":"btcpayserver.html#hourly-configuration","text":"Hourly creates a BTCPayClient through the following configuration: # for invoice spec, see https://bitpay.com/api/#rest-api-resources-invoices invoice : btcpay : host : ${env:BTCPAYSERVER_HOST} tokens : merchant : ${env:BTCPAYSERVER_MERCHANT} pem : btcpayserver.pem # file holding btcpayserver private key return_status : false invoice : currency : null # will be honored if set price : null # will be honored if set, else determined by wage orderId : null fullNotifications : True extendedNotifications : True transactionSpeed : medium notificationURL : null # https://mywebhook.com notificationEmail : null # myemail@email.com redirectURL : null # https://yourredirecturl.com buyer : email : null # fox.mulder@trustno.one name : null # Fox Mulder phone : null # 555-123-456 address1 : null # 2630 Hegal Place address2 : null # Apt 42 locality : null # Alexandria region : # VA postalCode : # 23242 country : # US notify : True itemDesc : null # will be honored if set, else hourly will provide This allows hourly to access your environment variables and the pem file you created above. Any of these parameters can be overridden when you run hourly. Here are some examples. hourly-report invoice=btcpay btcpay.pem=<private key> hourly-report invoice=btcpay btcpay.pem=/path/to/other/btcpayserver.pem hourly-report invoice=btcpay btcpay.host=https://myprivateserver.com","title":"Hourly configuration"},{"location":"btcpayserver.html#hourly-invoicing","text":"If you configured hourly with BTCPay, you can generate an invoice for your git repo in a given date range. Here is what that looks like when applied to the hourly repo: hourly-report invoice=btcpay payment=btcpay repo.start_date=\"Jan 1, 2020\" repo.end_date=\"Jan 6, 2020\" Processing timesheet for Asher Pembroke pay period: 2020-01-03 18:44:04-05:00 -> 2020-01-05 18:34:41-05:00 ignoring pro bono TimeIn LogIn email TimeOut LogOut email TimeDelta Hours 0 2020-01-03 18:44:04-05:00 clock-in apembroke@gmail.com 2020-01-03 20:31:57-05:00 clock-out apembroke@gmail.com 01:47:53 1.798056 1 2020-01-03 20:45:54-05:00 clock-in apembroke@gmail.com 2020-01-03 22:40:56-05:00 clock-out apembroke@gmail.com 01:55:02 1.917222 2 2020-01-04 13:16:11-05:00 clock-in apembroke@gmail.com 2020-01-04 14:01:43-05:00 clock-out apembroke@gmail.com 00:45:32 0.758889 3 2020-01-04 14:55:18-05:00 clock-in apembroke@gmail.com 2020-01-04 16:35:04-05:00 clock-out apembroke@gmail.com 01:39:46 1.662778 4 2020-01-04 19:56:53-05:00 clock-in apembroke@gmail.com 2020-01-04 21:06:20-05:00 clock-out apembroke@gmail.com 01:09:27 1.157500 5 2020-01-04 23:59:21-05:00 clock-in apembroke@gmail.com 2020-01-05 03:59:59-05:00 clock-out apembroke@gmail.com 04:00:38 4.010556 6 2020-01-05 16:32:33-05:00 clock-in apembroke@gmail.com 2020-01-05 17:03:22-05:00 clock-out apembroke@gmail.com 00:30:49 0.513611 7 2020-01-05 17:29:01-05:00 clock-in apembroke@gmail.com 2020-01-05 18:34:41-05:00 clock-out apembroke@gmail.com 01:05:40 1.094444 0 days 12:54:47, 12.91 hours worked 1291.31 USD generating invoice for current user Asher Pembroke buyer: address1: null address2: null country: null email: null locality: null name: null notify: true phone: null postalCode: null region: null currency: USD extendedNotifications: true fullNotifications: true itemDesc: 12.91 hours worked from 2020-01-03T18:44:04-05:00 to 2020-01-05T18:34:41-05:00 notificationEmail: null notificationURL: null orderId: null price: 1291.3055555555554 redirectURL: null transactionSpeed: medium Is this correct? (yes/n)yes Success! Your invoice may be paid here: https://btc.exitpay.org/invoice?id=MoSbFujB7AwcrvfMN21gGC Navigate to the payment url provided:","title":"Hourly Invoicing"},{"location":"press-release.html","text":"Hourly integrates BTCPayserver # Hourly is a command-line time tracking tool that lets developers clock in and out of git repos, create timesheets, visualize workloads, and issue invoices, all by creating and parsing commit messages. Hourly is privacy-focused: it won't spy on you, but assumes you report honestly. The new integration with Stripe and BTCPay-server means you can issue lightning, bitcoin, or fiat invoices in a single command. Site - https://asherp.github.io/hourly Github - https://github.com/asherp/hourly Install - pip install hourly","title":"Press release"},{"location":"press-release.html#hourly-integrates-btcpayserver","text":"Hourly is a command-line time tracking tool that lets developers clock in and out of git repos, create timesheets, visualize workloads, and issue invoices, all by creating and parsing commit messages. Hourly is privacy-focused: it won't spy on you, but assumes you report honestly. The new integration with Stripe and BTCPay-server means you can issue lightning, bitcoin, or fiat invoices in a single command. Site - https://asherp.github.io/hourly Github - https://github.com/asherp/hourly Install - pip install hourly","title":"Hourly integrates BTCPayserver"},{"location":"stripe.html","text":"Stripe # Stripe is a popular global payment processing platform for credit cards. They have an invoice API that allows hourly to issue invoices on your behalf in a single command: hourly-report invoice=stripe stripe.customer.email=my.client@momandpop.com Stripe Setup # Step 1 - install the stripe python api: # pip install --upgrade stripe Step 2 - Create a stripe account # You will need an account at Stripe . Be sure to follow the steps for a developer looking to handle one-time payments. You should also set up your invoice template settings . Step 3 - Set environment variables # From the Stripe dashboard : copy the Secret key and set it as an environment variable STRIPE_API_SECRET_KEY You can also paste in the Secret key later as a command-line argument argument to hourly: stripe.secret_key=<your stripe secret key> Warning You will probably want to use your test_ API keys first! Hourly Configuration # Hourly provides the following default configuration for stripe invoices: invoice : # see https://stripe.com/docs/billing/invoices/create-invoice#python stripe : secret_key : ${env:STRIPE_API_SECRET_KEY} customer : name : null email : null description : null customer_id : null # skips customer creation if set invoice_item : customer : # overridden by customer_id amount : # overrides earnings currency : # overrides compensation currency description : # overrides <hours worked> from repo.start_date to repo.end_date invoice : customer : # overridden by customer_id collection_method : send_invoice days_until_due : 30 auto_advance : True # auto-finalize this draft after ~1 hour. footer : Time sheet generated by hourly send_invoice : true # sends invoice to customer.email immediately return_status : false logging : 40 # https://docs.python.org/3/library/logging.html#logging-level The following fields are subsets of stripe's own API, which has additional fields you can use: invoice_item customer invoice Any of the defaults can be overridden, either at command line or by your project's configuration override . However, stripe.customer.email is a required field. Generating Stripe invoices # To generate a stripe invoice for your repo, you will need to specify an email address. Hourly will prepare an invoice and ask for confirmation. Here is an example of what that looks like when I run hourly on the hourly repo: hourly-report invoice=stripe repo.start_date=\"Jan 1, 2020\" stripe.customer.email=apembroke+hourly@gmail.com\" 1 days 04:02:14, 28.04 hours worked 2803.72 USD Generating stripe invoice for Asher Pembroke creating new customer new customer_id: cus_GVy3BWS792lu4D customer: description: null email: apembroke+hourly@gmail.com name: null customer_id: cus_GVy3BWS792lu4D invoice: auto_advance: false collection_method: send_invoice customer: cus_GVy3BWS792lu4D days_until_due: 30 footer: Time sheet generated by hourly invoice_item: amount: 280373 currency: usd customer: cus_GVy3BWS792lu4D description: 28.04 hours worked from 2020-01-03T18:44:04-05:00 to 2020-01-09T02:04:18-05:00 logging: 40 return_status: false secret_key: ${env:STRIPE_API_SECRET_KEY} send_invoice: true Is this correct? (yes/n): yes Success! Invoice will be sent to apembroke+hourly@gmail.com Invoice may be paid at https://pay.stripe.com/invoice/<---- redacted -----> View your invoice at https://dashboard.stripe.com Note I have redacted actual payment URL The recipient should get an email from stripe to pay by credit card. You can test credit card payment using one of their testing cards . Meanwhile, visiting the url should show you a page like this:","title":"Stripe"},{"location":"stripe.html#stripe","text":"Stripe is a popular global payment processing platform for credit cards. They have an invoice API that allows hourly to issue invoices on your behalf in a single command: hourly-report invoice=stripe stripe.customer.email=my.client@momandpop.com","title":"Stripe"},{"location":"stripe.html#stripe-setup","text":"","title":"Stripe Setup"},{"location":"stripe.html#step-1-install-the-stripe-python-api","text":"pip install --upgrade stripe","title":"Step 1 - install the stripe python api:"},{"location":"stripe.html#step-2-create-a-stripe-account","text":"You will need an account at Stripe . Be sure to follow the steps for a developer looking to handle one-time payments. You should also set up your invoice template settings .","title":"Step 2 - Create a stripe account"},{"location":"stripe.html#step-3-set-environment-variables","text":"From the Stripe dashboard : copy the Secret key and set it as an environment variable STRIPE_API_SECRET_KEY You can also paste in the Secret key later as a command-line argument argument to hourly: stripe.secret_key=<your stripe secret key> Warning You will probably want to use your test_ API keys first!","title":"Step 3 - Set environment variables"},{"location":"stripe.html#hourly-configuration","text":"Hourly provides the following default configuration for stripe invoices: invoice : # see https://stripe.com/docs/billing/invoices/create-invoice#python stripe : secret_key : ${env:STRIPE_API_SECRET_KEY} customer : name : null email : null description : null customer_id : null # skips customer creation if set invoice_item : customer : # overridden by customer_id amount : # overrides earnings currency : # overrides compensation currency description : # overrides <hours worked> from repo.start_date to repo.end_date invoice : customer : # overridden by customer_id collection_method : send_invoice days_until_due : 30 auto_advance : True # auto-finalize this draft after ~1 hour. footer : Time sheet generated by hourly send_invoice : true # sends invoice to customer.email immediately return_status : false logging : 40 # https://docs.python.org/3/library/logging.html#logging-level The following fields are subsets of stripe's own API, which has additional fields you can use: invoice_item customer invoice Any of the defaults can be overridden, either at command line or by your project's configuration override . However, stripe.customer.email is a required field.","title":"Hourly Configuration"},{"location":"stripe.html#generating-stripe-invoices","text":"To generate a stripe invoice for your repo, you will need to specify an email address. Hourly will prepare an invoice and ask for confirmation. Here is an example of what that looks like when I run hourly on the hourly repo: hourly-report invoice=stripe repo.start_date=\"Jan 1, 2020\" stripe.customer.email=apembroke+hourly@gmail.com\" 1 days 04:02:14, 28.04 hours worked 2803.72 USD Generating stripe invoice for Asher Pembroke creating new customer new customer_id: cus_GVy3BWS792lu4D customer: description: null email: apembroke+hourly@gmail.com name: null customer_id: cus_GVy3BWS792lu4D invoice: auto_advance: false collection_method: send_invoice customer: cus_GVy3BWS792lu4D days_until_due: 30 footer: Time sheet generated by hourly invoice_item: amount: 280373 currency: usd customer: cus_GVy3BWS792lu4D description: 28.04 hours worked from 2020-01-03T18:44:04-05:00 to 2020-01-09T02:04:18-05:00 logging: 40 return_status: false secret_key: ${env:STRIPE_API_SECRET_KEY} send_invoice: true Is this correct? (yes/n): yes Success! Invoice will be sent to apembroke+hourly@gmail.com Invoice may be paid at https://pay.stripe.com/invoice/<---- redacted -----> View your invoice at https://dashboard.stripe.com Note I have redacted actual payment URL The recipient should get an email from stripe to pay by credit card. You can test credit card payment using one of their testing cards . Meanwhile, visiting the url should show you a page like this:","title":"Generating Stripe invoices"}]}